<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1574" onload="init(evt)" viewBox="0 0 1200 1574" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1574.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1557" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1557" > </text>
<g id="frames">
<g >
<title>void std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::insert[abi:v15000]&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="1098.8" y="533" width="6.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1101.76" y="543.5" ></text>
</g>
<g >
<title>tsdn_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="381.0" y="709" width="6.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="384.03" y="719.5" ></text>
</g>
<g >
<title>void std::__1::vector&lt;DB::ISerialization::Substream, std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt;::__push_back_slow_path&lt;DB::ISerialization::Substream&gt; (30,303,030 samples, 1.55%)</title><rect x="660.8" y="757" width="18.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="663.82" y="767.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="916.3" y="165" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="919.29" y="175.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="181" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1059.19" y="191.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="247.2" y="789" width="12.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="250.22" y="799.5" ></text>
</g>
<g >
<title>te_ctx_has_active_events (10,101,010 samples, 0.52%)</title><rect x="898.0" y="69" width="6.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="901.04" y="79.5" ></text>
</g>
<g >
<title>te_malloc_fastpath_ctx (10,101,010 samples, 0.52%)</title><rect x="478.4" y="533" width="6.0" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="481.35" y="543.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::ColumnVector&lt;unsigned long&gt; &gt; COWHelper&lt;DB::IColumnHelper&lt;DB::ColumnVector&lt;unsigned long&gt;, DB::ColumnFixedSizeHelper&gt;, DB::ColumnVector&lt;unsigned long&gt; &gt;::create&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="417.5" y="773" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="420.53" y="783.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::list&lt;std::__1::__wrap_iter&lt;DB::NameAndTypePair const*&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="472.3" y="805" width="12.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="475.27" y="815.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="466.2" y="693" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="469.19" y="703.5" ></text>
</g>
<g >
<title>witness_assert_depth_to_rank (10,101,010 samples, 0.52%)</title><rect x="174.2" y="517" width="6.1" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="177.23" y="527.5" ></text>
</g>
<g >
<title>DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::~PODArray (20,202,020 samples, 1.03%)</title><rect x="326.3" y="565" width="12.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="329.29" y="575.5" ></text>
</g>
<g >
<title>rtree_read (10,101,010 samples, 0.52%)</title><rect x="873.7" y="117" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="876.71" y="127.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="837.2" y="133" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="840.22" y="143.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB15NameAndTypePairETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="758.1" y="645" width="6.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="761.14" y="655.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="898.0" y="101" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="901.04" y="111.5" ></text>
</g>
<g >
<title>DB::NameAndTypePair::NameAndTypePair (10,101,010 samples, 0.52%)</title><rect x="502.7" y="725" width="6.1" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="505.68" y="735.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB20CheckSortedTransformETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (80,808,080 samples, 4.12%)</title><rect x="788.6" y="661" width="48.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="791.56" y="671.5" >_ZNS..</text>
</g>
<g >
<title>DB::NameAndTypePair::NameAndTypePair (20,202,020 samples, 1.03%)</title><rect x="691.2" y="757" width="12.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="694.24" y="767.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="758.1" y="533" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="761.14" y="543.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::insert[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="613" width="6.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1095.68" y="623.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (10,101,010 samples, 0.52%)</title><rect x="636.5" y="469" width="6.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="639.49" y="479.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="910.2" y="325" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="913.21" y="335.5" ></text>
</g>
<g >
<title>free_default (10,101,010 samples, 0.52%)</title><rect x="819.0" y="357" width="6.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="821.97" y="367.5" ></text>
</g>
<g >
<title>Poco::JSON::Object::~Object (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="485" width="12.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1053.10" y="495.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="557.4" y="613" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="560.42" y="623.5" ></text>
</g>
<g >
<title>sz_size2index_lookup (10,101,010 samples, 0.52%)</title><rect x="946.7" y="693" width="6.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="949.70" y="703.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="34.3" y="341" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="37.33" y="351.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::~VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1086.6" y="773" width="6.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1089.60" y="783.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="466.2" y="613" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="469.19" y="623.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="661" width="6.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1174.75" y="671.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::construct[abi:v15000]&lt;Poco::Dynamic::Var, Poco::Dynamic::Var&amp;, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="597" width="12.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1028.77" y="607.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="46.5" y="805" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="49.49" y="815.5" ></text>
</g>
<g >
<title>std::__1::__function::__policy_func&lt;DB::WriteBuffer*  (10,101,010 samples, 0.52%)</title><rect x="143.8" y="853" width="6.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="146.81" y="863.5" ></text>
</g>
<g >
<title>boost::intrusive_ptr&lt;DB::IColumn const&gt;::~intrusive_ptr (30,303,030 samples, 1.55%)</title><rect x="819.0" y="501" width="18.2" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="821.97" y="511.5" ></text>
</g>
<g >
<title>extent_recycle_split (10,101,010 samples, 0.52%)</title><rect x="302.0" y="469" width="6.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="304.96" y="479.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN3COWIN2DB7IColumnEE13immutable_ptrIS3_EETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS8_ (30,303,030 samples, 1.55%)</title><rect x="819.0" y="549" width="18.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="821.97" y="559.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="660.8" y="581" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="663.82" y="591.5" ></text>
</g>
<g >
<title>tsd_thread_deallocatedp_get (10,101,010 samples, 0.52%)</title><rect x="387.1" y="677" width="6.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="390.11" y="687.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (10,101,010 samples, 0.52%)</title><rect x="636.5" y="453" width="6.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="639.49" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.52%)</title><rect x="1177.8" y="965" width="6.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1180.84" y="975.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="277.6" y="709" width="12.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="280.63" y="719.5" ></text>
</g>
<g >
<title>tsd_state_get (10,101,010 samples, 0.52%)</title><rect x="362.8" y="693" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="365.78" y="703.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="648.7" y="773" width="6.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="651.66" y="783.5" ></text>
</g>
<g >
<title>Poco::JSON::Stringifier::stringify (20,202,020 samples, 1.03%)</title><rect x="1153.5" y="917" width="12.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1156.51" y="927.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="733.8" y="725" width="6.1" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="736.81" y="735.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::~vector[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="861.5" y="437" width="6.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="864.55" y="447.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="964.9" y="741" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="967.95" y="751.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::~__hash_table (20,202,020 samples, 1.03%)</title><rect x="849.4" y="421" width="12.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="852.38" y="431.5" ></text>
</g>
<g >
<title>sz_size2index (10,101,010 samples, 0.52%)</title><rect x="861.5" y="165" width="6.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="864.55" y="175.5" ></text>
</g>
<g >
<title>tsd_rtree_ctx (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="213" width="6.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1010.53" y="223.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB9InputPortETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="916.3" y="501" width="6.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="919.29" y="511.5" ></text>
</g>
<g >
<title>extent_recycle (10,101,010 samples, 0.52%)</title><rect x="374.9" y="517" width="6.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="377.95" y="527.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init_copy_ctor_external (10,101,010 samples, 0.52%)</title><rect x="289.8" y="917" width="6.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="292.79" y="927.5" ></text>
</g>
<g >
<title>free_fastpath (10,101,010 samples, 0.52%)</title><rect x="466.2" y="565" width="6.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="469.19" y="575.5" ></text>
</g>
<g >
<title>DB::Port::~Port (30,303,030 samples, 1.55%)</title><rect x="849.4" y="469" width="18.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="852.38" y="479.5" ></text>
</g>
<g >
<title>static_opts_init (10,101,010 samples, 0.52%)</title><rect x="691.2" y="565" width="6.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="694.24" y="575.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="289.8" y="805" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="292.79" y="815.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__deallocate_node (10,101,010 samples, 0.52%)</title><rect x="28.2" y="357" width="6.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="31.25" y="367.5" ></text>
</g>
<g >
<title>std::__1::char_traits&lt;char&gt;::copy (10,101,010 samples, 0.52%)</title><rect x="1153.5" y="677" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1156.51" y="687.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="460.1" y="645" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="463.10" y="655.5" ></text>
</g>
<g >
<title>extent_try_coalesce_impl (10,101,010 samples, 0.52%)</title><rect x="326.3" y="181" width="6.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="329.29" y="191.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="514.8" y="613" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="517.85" y="623.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::~__tree (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="453" width="6.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1059.19" y="463.5" ></text>
</g>
<g >
<title>std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, void*&gt;*, long&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::__lower_bound&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="271.5" y="901" width="6.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="274.55" y="911.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="1080.5" y="549" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1083.52" y="559.5" ></text>
</g>
<g >
<title>tcache_bin_flush_bottom (10,101,010 samples, 0.52%)</title><rect x="34.3" y="149" width="6.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="37.33" y="159.5" ></text>
</g>
<g >
<title>free (20,202,020 samples, 1.03%)</title><rect x="326.3" y="501" width="12.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="329.29" y="511.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__emplace_hint_unique_key_args&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; const&amp;&gt; (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="645" width="12.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1010.53" y="655.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_10shared_ptrIKN2DB14ISerializationEEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS7_ (10,101,010 samples, 0.52%)</title><rect x="782.5" y="645" width="6.1" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="785.47" y="655.5" ></text>
</g>
<g >
<title>_ZNSt3__118__apply_tuple_implB6v15000IRZN14ThreadPoolImplI24ThreadFromGlobalPoolImplILb0EEE12scheduleImplIvEET_NS_8functionIFvvEEE8PriorityNS_8optionalImEEbEUlvE0_RNS_5tupleIJEEETpTnmJEEEDcOS6_OT0_NS_15__tuple_indicesIJXspT1_EEEE (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1253" width="1161.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="25.16" y="1263.5" >_ZNSt3__118__apply_tuple_implB6v15000IRZN14ThreadPoolImplI24ThreadFromGlobalPoolImplILb0EEE12scheduleImplIvEET_NS_8functionIFvvEEE8PriorityNS_8optionalImEEbEUlvE0..</text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="928.5" y="773" width="6.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="931.45" y="783.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__hash_map_iterator&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt; &gt;, bool&gt; std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::emplace[abi:v15000]&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="958.9" y="933" width="6.0" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="961.87" y="943.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="466.2" y="581" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="469.19" y="591.5" ></text>
</g>
<g >
<title>sdallocx_default (20,202,020 samples, 1.03%)</title><rect x="788.6" y="197" width="12.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="791.56" y="207.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::map[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1098.8" y="549" width="6.0" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1101.76" y="559.5" ></text>
</g>
<g >
<title>DB::MergeTreeReaderCompact::createColumnsForReading (20,202,020 samples, 1.03%)</title><rect x="587.8" y="821" width="12.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="590.84" y="831.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="460.1" y="613" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="463.10" y="623.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="539.2" y="613" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="542.18" y="623.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__deallocate_node (20,202,020 samples, 1.03%)</title><rect x="788.6" y="405" width="12.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="791.56" y="415.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="661" width="6.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1138.26" y="671.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN2DB14ISerialization26DeserializeBinaryBulkStateEEEEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPSG_ (10,101,010 samples, 0.52%)</title><rect x="776.4" y="517" width="6.1" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="779.39" y="527.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="295.9" y="805" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="298.88" y="815.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="910.2" y="277" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="913.21" y="287.5" ></text>
</g>
<g >
<title>DB::ISimpleTransform::~ISimpleTransform (50,505,050 samples, 2.58%)</title><rect x="837.2" y="613" width="30.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="840.22" y="623.5" >DB..</text>
</g>
<g >
<title>std::__1::__shared_count::__release_shared[abi:v15000] (222,222,220 samples, 11.34%)</title><rect x="788.6" y="917" width="133.8" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="791.56" y="927.5" >std::__1::__shar..</text>
</g>
<g >
<title>_ZNSt3__116__variant_detail12__visitation6__base11__visit_altB6v15000INS1_9__variant15__value_visitorIRZN2DB22MergingSortedAlgorithm5mergeEvE3$_0EEJRNS0_6__implIJNS6_16SortingQueueImplINS6_33SpecializedSingleColumnSortCursorINS6_12ColumnVectorIDuEEEELNS6_20SortingQueueStrategyE0EEENSC_INSD_INSE_ItEEEELSH_0EEENSC_INSD_INSE_IjEEEELSH_0EEENSC_INSD_INSE_ImEEEELSH_0EEENSC_INSD_INSE_IN4wide7integerILm128EjEEEEEELSH_0EEENSC_INSD_INSE_INST_ILm256EjEEEEEELSH_0EEENSC_INSD_INSE_IDB8_EEEELSH_0EEENSC_INSD_INSE_IsEEEELSH_0EEENSC_INSD_INSE_IiEEEELSH_0EEENSC_INSD_INSE_IlEEEELSH_0EEENSC_INSD_INSE_INST_ILm128EiEEEEEELSH_0EEENSC_INSD_INSE_INST_ILm256EiEEEEEELSH_0EEENSC_INSD_INSE_IfEEEELSH_0EEENSC_INSD_INSE_IdEEEELSH_0EEENSC_INSD_INS6_13ColumnDecimalINS6_7DecimalIiEEEEEELSH_0EEENSC_INSD_INS1T_INS1U_IlEEEEEELSH_0EEENSC_INSD_INS1T_INS1U_IS1F_EEEEEELSH_0EEENSC_INSD_INS1T_INS1U_IS1J_EEEEEELSH_0EEENSC_INSD_INS1T_INS6_10DateTime64EEEEELSH_0EEENSC_INSD_INSE_I13StrongTypedefISU_NS6_7UUIDTagEEEEEELSH_0EEENSC_INSD_INSE_INS6_4IPv4EEEEELSH_0EEENSC_INSD_INSE_INS6_4IPv6EEEEELSH_0EEENSC_INSD_INS6_12ColumnStringEEELSH_0EEENSC_INSD_INS6_17ColumnFixedStringEEELSH_0EEENSC_INS6_16SimpleSortCursorELSH_0EEENSC_INS6_10SortCursorELSH_0EEENSC_INS6_23SortCursorWithCollationELSH_0EEEEEEEEEDcOT_DpOT0_ (50,505,050 samples, 2.58%)</title><rect x="314.1" y="789" width="30.4" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="317.12" y="799.5" >_Z..</text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::free (10,101,010 samples, 0.52%)</title><rect x="441.9" y="613" width="6.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="444.86" y="623.5" ></text>
</g>
<g >
<title>DB::ISerialization::EnumerateStreamsSettings::~EnumerateStreamsSettings (10,101,010 samples, 0.52%)</title><rect x="940.6" y="917" width="6.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="943.62" y="927.5" ></text>
</g>
<g >
<title>DB::WriteBuffer::next (10,101,010 samples, 0.52%)</title><rect x="636.5" y="629" width="6.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="639.49" y="639.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="648.7" y="661" width="6.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="651.66" y="671.5" ></text>
</g>
<g >
<title>void* (anonymous namespace)::allocNoTrack&lt;false, false&gt; (10,101,010 samples, 0.52%)</title><rect x="83.0" y="789" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="85.99" y="799.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolder* Poco::Dynamic::VarHolder::cloneHolder&lt;Poco::JSON::Array&gt; (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="757" width="12.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1101.76" y="767.5" ></text>
</g>
<g >
<title>arena_decay (10,101,010 samples, 0.52%)</title><rect x="326.3" y="341" width="6.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="329.29" y="351.5" ></text>
</g>
<g >
<title>tsd_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="1031.9" y="245" width="6.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1034.86" y="255.5" ></text>
</g>
<g >
<title>DB::ColumnWithTypeAndName::~ColumnWithTypeAndName (10,101,010 samples, 0.52%)</title><rect x="861.5" y="341" width="6.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="864.55" y="351.5" ></text>
</g>
<g >
<title>pai_alloc (10,101,010 samples, 0.52%)</title><rect x="344.5" y="581" width="6.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="347.54" y="591.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="677" width="6.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1095.68" y="687.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::~vector[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="837" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1040.94" y="847.5" ></text>
</g>
<g >
<title>Poco::JSON::Object::~Object (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="533" width="12.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1144.34" y="543.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::alloc (10,101,010 samples, 0.52%)</title><rect x="636.5" y="725" width="6.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="639.49" y="735.5" ></text>
</g>
<g >
<title>tsdn_fetch (10,101,010 samples, 0.52%)</title><rect x="283.7" y="661" width="6.1" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="286.71" y="671.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::destroy[abi:v15000]&lt;DB::ColumnWithTypeAndName, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="131.6" y="869" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="134.65" y="879.5" ></text>
</g>
<g >
<title>std::__1::function&lt;void  (10,101,010 samples, 0.52%)</title><rect x="928.5" y="885" width="6.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="931.45" y="895.5" ></text>
</g>
<g >
<title>free (10,101,010 samples, 0.52%)</title><rect x="393.2" y="565" width="6.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="396.20" y="575.5" ></text>
</g>
<g >
<title>iralloct (10,101,010 samples, 0.52%)</title><rect x="344.5" y="725" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="347.54" y="735.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append (10,101,010 samples, 0.52%)</title><rect x="168.1" y="677" width="6.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="171.14" y="687.5" ></text>
</g>
<g >
<title>imalloc_fastpath (20,202,020 samples, 1.03%)</title><rect x="472.3" y="549" width="12.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="475.27" y="559.5" ></text>
</g>
<g >
<title>sz_index2size_lookup (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="325" width="6.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1120.01" y="335.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="52.6" y="853" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="55.58" y="863.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="581" width="6.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1174.75" y="591.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="613" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1174.75" y="623.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="581.8" y="661" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="584.75" y="671.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="898.0" y="149" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="901.04" y="159.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (20,202,020 samples, 1.03%)</title><rect x="58.7" y="901" width="12.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="61.66" y="911.5" ></text>
</g>
<g >
<title>_ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEC2B6v15000IRS6_mTnPNS_9enable_ifIXclsr10_CheckArgsE17__enable_implicitIT_T0_EEEvE4typeELPv0EEEOSC_OSD_ (20,202,020 samples, 1.03%)</title><rect x="277.6" y="837" width="12.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="280.63" y="847.5" ></text>
</g>
<g >
<title>cache_bin_empty_position_get (10,101,010 samples, 0.52%)</title><rect x="563.5" y="437" width="6.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="566.51" y="447.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="539.2" y="533" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="542.18" y="543.5" ></text>
</g>
<g >
<title>_ZNSt3__116__variant_detail12__visitation9__variant13__visit_valueB6v15000IRZN2DB22MergingSortedAlgorithm5mergeEvE3$_0JRNS_7variantIJNS4_16SortingQueueImplINS4_33SpecializedSingleColumnSortCursorINS4_12ColumnVectorIDuEEEELNS4_20SortingQueueStrategyE0EEENS9_INSA_INSB_ItEEEELSE_0EEENS9_INSA_INSB_IjEEEELSE_0EEENS9_INSA_INSB_ImEEEELSE_0EEENS9_INSA_INSB_IN4wide7integerILm128EjEEEEEELSE_0EEENS9_INSA_INSB_INSQ_ILm256EjEEEEEELSE_0EEENS9_INSA_INSB_IDB8_EEEELSE_0EEENS9_INSA_INSB_IsEEEELSE_0EEENS9_INSA_INSB_IiEEEELSE_0EEENS9_INSA_INSB_IlEEEELSE_0EEENS9_INSA_INSB_INSQ_ILm128EiEEEEEELSE_0EEENS9_INSA_INSB_INSQ_ILm256EiEEEEEELSE_0EEENS9_INSA_INSB_IfEEEELSE_0EEENS9_INSA_INSB_IdEEEELSE_0EEENS9_INSA_INS4_13ColumnDecimalINS4_7DecimalIiEEEEEELSE_0EEENS9_INSA_INS1Q_INS1R_IlEEEEEELSE_0EEENS9_INSA_INS1Q_INS1R_IS1C_EEEEEELSE_0EEENS9_INSA_INS1Q_INS1R_IS1G_EEEEEELSE_0EEENS9_INSA_INS1Q_INS4_10DateTime64EEEEELSE_0EEENS9_INSA_INSB_I13StrongTypedefISR_NS4_7UUIDTagEEEEEELSE_0EEENS9_INSA_INSB_INS4_4IPv4EEEEELSE_0EEENS9_INSA_INSB_INS4_4IPv6EEEEELSE_0EEENS9_INSA_INS4_12ColumnStringEEELSE_0EEENS9_INSA_INS4_17ColumnFixedStringEEELSE_0EEENS9_INS4_16SimpleSortCursorELSE_0EEENS9_INS4_10SortCursorELSE_0EEENS9_INS4_23SortCursorWithCollationELSE_0EEEEEEEEEDcOT_DpOT0_ (50,505,050 samples, 2.58%)</title><rect x="314.1" y="821" width="30.4" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="317.12" y="831.5" >_Z..</text>
</g>
<g >
<title>sz_size2index_lookup (10,101,010 samples, 0.52%)</title><rect x="648.7" y="581" width="6.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="651.66" y="591.5" ></text>
</g>
<g >
<title>std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt;::~shared_ptr[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="776.4" y="485" width="6.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="779.39" y="495.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="758.1" y="581" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="761.14" y="591.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="332.4" y="405" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="335.37" y="415.5" ></text>
</g>
<g >
<title>tsd_thread_allocated_next_event_fastp_get (10,101,010 samples, 0.52%)</title><rect x="435.8" y="581" width="6.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="438.77" y="591.5" ></text>
</g>
<g >
<title>Poco::SharedPtr&lt;Poco::Dynamic::Struct&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, Poco::ReferenceCounter, Poco::ReleasePolicy&lt;Poco::Dynamic::Struct&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::release (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="501" width="12.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1144.34" y="511.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Array&gt;::~VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="885" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1040.94" y="895.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="70.8" y="821" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="73.82" y="831.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN3COWIN2DB7IColumnEE13immutable_ptrIS3_EETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS8_ (30,303,030 samples, 1.55%)</title><rect x="819.0" y="533" width="18.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="821.97" y="543.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::~__hash_table (50,505,050 samples, 2.58%)</title><rect x="101.2" y="901" width="30.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="104.24" y="911.5" >st..</text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="849.4" y="373" width="6.1" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="852.38" y="383.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;::__clear[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="441.9" y="821" width="6.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="444.86" y="831.5" ></text>
</g>
<g >
<title>tsd_peak_alloc_event_wait_get (10,101,010 samples, 0.52%)</title><rect x="332.4" y="341" width="6.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="335.37" y="351.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPSB_ (20,202,020 samples, 1.03%)</title><rect x="788.6" y="357" width="12.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="791.56" y="367.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="308.0" y="661" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="311.04" y="671.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;* std::__1::launder[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="235.1" y="853" width="6.0" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="238.05" y="863.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate_at_least[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="715.6" y="693" width="18.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="718.57" y="703.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB9MergeTaskETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (30,303,030 samples, 1.55%)</title><rect x="22.2" y="789" width="18.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="25.16" y="799.5" ></text>
</g>
<g >
<title>futex_wake (10,101,010 samples, 0.52%)</title><rect x="1177.8" y="901" width="6.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1180.84" y="911.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="964.9" y="757" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="967.95" y="767.5" ></text>
</g>
<g >
<title>std::__1::__function::__policy_func&lt;DB::WriteBuffer*  (20,202,020 samples, 1.03%)</title><rect x="168.1" y="853" width="12.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="171.14" y="863.5" ></text>
</g>
<g >
<title>free_fastpath (10,101,010 samples, 0.52%)</title><rect x="758.1" y="469" width="6.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="761.14" y="479.5" ></text>
</g>
<g >
<title>DB::IMergeTreeReader::fillMissingColumns (101,010,100 samples, 5.15%)</title><rect x="472.3" y="837" width="60.8" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="475.27" y="847.5" >DB::IM..</text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="1123.1" y="709" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1126.09" y="719.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::clone (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="549" width="12.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1028.77" y="559.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="1123.1" y="821" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1126.09" y="831.5" ></text>
</g>
<g >
<title>DB::collectOffsetsColumns (40,404,040 samples, 2.06%)</title><rect x="508.8" y="805" width="24.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="511.76" y="815.5" >D..</text>
</g>
<g >
<title>pa_shard_uses_hpa (10,101,010 samples, 0.52%)</title><rect x="368.9" y="581" width="6.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="371.87" y="591.5" ></text>
</g>
<g >
<title>DB::(anonymous namespace)::deserializeOffsets (10,101,010 samples, 0.52%)</title><rect x="654.7" y="789" width="6.1" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="657.74" y="799.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="691.2" y="709" width="12.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="694.24" y="719.5" ></text>
</g>
<g >
<title>std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::~unordered_map[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="904.1" y="565" width="6.1" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="907.12" y="575.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="22.2" y="405" width="6.0" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="25.16" y="415.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, void*&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="764.2" y="549" width="6.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="767.23" y="559.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="125.6" y="677" width="6.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="128.57" y="687.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::~VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="709" width="6.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1040.94" y="719.5" ></text>
</g>
<g >
<title>pac_decay_to_limit (10,101,010 samples, 0.52%)</title><rect x="971.0" y="437" width="6.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="974.03" y="447.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB10OutputPortETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (30,303,030 samples, 1.55%)</title><rect x="849.4" y="517" width="18.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="852.38" y="527.5" ></text>
</g>
<g >
<title>tcache_alloc_small (10,101,010 samples, 0.52%)</title><rect x="593.9" y="501" width="6.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="596.92" y="511.5" ></text>
</g>
<g >
<title>DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::~PODArray (20,202,020 samples, 1.03%)</title><rect x="825.1" y="437" width="12.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="828.05" y="447.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="673.0" y="597" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="675.99" y="607.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;DB::NameAndTypePair, void*&gt; &gt; &gt;::deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="484.4" y="757" width="12.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="487.43" y="767.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="83.0" y="773" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="85.99" y="783.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate_at_least[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="174.2" y="661" width="6.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="177.23" y="671.5" ></text>
</g>
<g >
<title>CurrentMemoryTracker::alloc (10,101,010 samples, 0.52%)</title><rect x="636.5" y="709" width="6.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="639.49" y="719.5" ></text>
</g>
<g >
<title>pac_dalloc_impl (10,101,010 samples, 0.52%)</title><rect x="52.6" y="693" width="6.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="55.58" y="703.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Array&gt;::clone (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="709" width="12.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1028.77" y="719.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="517" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1095.68" y="527.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="1074.4" y="581" width="12.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1077.43" y="591.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="302.0" y="741" width="6.0" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="304.96" y="751.5" ></text>
</g>
<g >
<title>DB::ISource::work (525,252,520 samples, 26.80%)</title><rect x="472.3" y="885" width="316.3" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="475.27" y="895.5" >DB::ISource::work</text>
</g>
<g >
<title>sz_s2u_lookup (10,101,010 samples, 0.52%)</title><rect x="648.7" y="597" width="6.0" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="651.66" y="607.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;::~pair (40,404,040 samples, 2.06%)</title><rect x="1110.9" y="901" width="24.4" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1113.93" y="911.5" >s..</text>
</g>
<g >
<title>tsd_peak_alloc_event_waitp_get (10,101,010 samples, 0.52%)</title><rect x="332.4" y="325" width="6.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="335.37" y="335.5" ></text>
</g>
<g >
<title>std::__1::enable_if&lt;__can_be_converted_to_string_view&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt;::value, int&gt;::type std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::compare&lt;std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="1001.4" y="757" width="6.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1004.44" y="767.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="764.2" y="533" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="767.23" y="543.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::~ColumnVector (10,101,010 samples, 0.52%)</title><rect x="399.3" y="645" width="6.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="402.28" y="655.5" ></text>
</g>
<g >
<title>free_fastpath_nonfast_aligned (10,101,010 samples, 0.52%)</title><rect x="746.0" y="645" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="748.98" y="655.5" ></text>
</g>
<g >
<title>pac_decay_try_purge (10,101,010 samples, 0.52%)</title><rect x="326.3" y="277" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="329.29" y="287.5" ></text>
</g>
<g >
<title>tsd_thread_allocated_next_event_fastp_get (10,101,010 samples, 0.52%)</title><rect x="569.6" y="565" width="6.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="572.59" y="575.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::~ColumnVector (10,101,010 samples, 0.52%)</title><rect x="441.9" y="677" width="6.0" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="444.86" y="687.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="898.0" y="85" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="901.04" y="95.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::VarHolderImpl (30,303,030 samples, 1.55%)</title><rect x="1068.4" y="757" width="18.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1071.35" y="767.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="624.3" y="725" width="6.1" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="627.33" y="735.5" ></text>
</g>
<g >
<title>isfree (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="437" width="12.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1144.34" y="447.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="545.3" y="725" width="6.0" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="548.26" y="735.5" ></text>
</g>
<g >
<title>arena_decay_dirty (10,101,010 samples, 0.52%)</title><rect x="971.0" y="501" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="974.03" y="511.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="904.1" y="389" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="907.12" y="399.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1019.7" y="741" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1022.69" y="751.5" ></text>
</g>
<g >
<title>decltype  (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1429" width="12.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="13.00" y="1439.5" ></text>
</g>
<g >
<title>Poco::JSON::Object::Object (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="661" width="6.1" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1095.68" y="671.5" ></text>
</g>
<g >
<title>atomic_load_p (10,101,010 samples, 0.52%)</title><rect x="119.5" y="645" width="6.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="122.48" y="655.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="399.3" y="549" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="402.28" y="559.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::chameleon_ptr&lt;DB::IColumn&gt;::~chameleon_ptr (10,101,010 samples, 0.52%)</title><rect x="393.2" y="725" width="6.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="396.20" y="735.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="660.8" y="645" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="663.82" y="655.5" ></text>
</g>
<g >
<title>std::__1::__function::__policy_func&lt;void  (30,303,030 samples, 1.55%)</title><rect x="22.2" y="997" width="18.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="25.16" y="1007.5" ></text>
</g>
<g >
<title>boost::intrusive_ptr&lt;DB::IColumn const&gt;::~intrusive_ptr (10,101,010 samples, 0.52%)</title><rect x="393.2" y="789" width="6.1" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="396.20" y="799.5" ></text>
</g>
<g >
<title>pa_alloc (10,101,010 samples, 0.52%)</title><rect x="593.9" y="437" width="6.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="596.92" y="447.5" ></text>
</g>
<g >
<title>DB::IMergeTreeReader::getColumnNameInPart (30,303,030 samples, 1.55%)</title><rect x="715.6" y="789" width="18.2" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="718.57" y="799.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="1074.4" y="549" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1077.43" y="559.5" ></text>
</g>
<g >
<title>std::__1::stack&lt;unsigned long, std::__1::deque&lt;unsigned long, std::__1::allocator&lt;unsigned long&gt; &gt; &gt;::push[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="302.0" y="901" width="6.0" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="304.96" y="911.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.03%)</title><rect x="277.6" y="693" width="12.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="280.63" y="703.5" ></text>
</g>
<g >
<title>ecache_evict (10,101,010 samples, 0.52%)</title><rect x="326.3" y="229" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="329.29" y="239.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::push_back (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="917" width="6.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1168.67" y="927.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="597" width="6.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1065.27" y="607.5" ></text>
</g>
<g >
<title>sdallocx_default (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="453" width="12.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1144.34" y="463.5" ></text>
</g>
<g >
<title>std::__1::function&lt;DB::ReadBuffer*  (10,101,010 samples, 0.52%)</title><rect x="752.1" y="821" width="6.0" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="755.06" y="831.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="764.2" y="437" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="767.23" y="447.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="1044.0" y="629" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1047.02" y="639.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="247.2" y="837" width="12.2" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="250.22" y="847.5" ></text>
</g>
<g >
<title>tsdn_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="673.0" y="581" width="6.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="675.99" y="591.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 1.03%)</title><rect x="879.8" y="229" width="12.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="882.79" y="239.5" ></text>
</g>
<g >
<title>DB::IDataType::getDefaultSerialization (10,101,010 samples, 0.52%)</title><rect x="922.4" y="885" width="6.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="925.37" y="895.5" ></text>
</g>
<g >
<title>std::__1::__function::__default_alloc_func&lt;DB::MergeTreeBackgroundExecutor&lt;DB::DynamicRuntimeQueue&gt;::MergeTreeBackgroundExecutor (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1141" width="1161.7" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="25.16" y="1151.5" >std::__1::__function::__default_alloc_func&lt;DB::MergeTreeBackgroundExecutor&lt;DB::DynamicRuntimeQueue&gt;::MergeTreeBackgroundExecutor</text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::insertRangeFrom (10,101,010 samples, 0.52%)</title><rect x="137.7" y="917" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="140.73" y="927.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="624.3" y="485" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="627.33" y="495.5" ></text>
</g>
<g >
<title>std::__1::shared_ptr&lt;DB::MergeTask&gt;::reset[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="22.2" y="901" width="18.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="25.16" y="911.5" ></text>
</g>
<g >
<title>std::__1::unique_ptr&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;, std::__1::__tree_node_destructor&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt; &gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__construct_node&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; const&amp;&gt; (20,202,020 samples, 1.03%)</title><rect x="1074.4" y="645" width="12.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1077.43" y="655.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="1019.7" y="709" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1022.69" y="719.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="867.6" y="373" width="6.1" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="870.63" y="383.5" ></text>
</g>
<g >
<title>bin_stats_merge (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1045" width="12.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="13.00" y="1055.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="64.7" y="773" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="67.74" y="783.5" ></text>
</g>
<g >
<title>std::__1::shared_ptr&lt;DB::ISerialization const&gt;::~shared_ptr[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="782.5" y="629" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="785.47" y="639.5" ></text>
</g>
<g >
<title>DB::MergeTreeDataPartWriterCompact::~MergeTreeDataPartWriterCompact (10,101,010 samples, 0.52%)</title><rect x="28.2" y="437" width="6.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="31.25" y="447.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;::~pair (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="789" width="12.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1144.34" y="799.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, void*&gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="764.2" y="565" width="6.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="767.23" y="575.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="642.6" y="757" width="6.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="645.58" y="767.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__clear[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="879.8" y="421" width="12.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="882.79" y="431.5" ></text>
</g>
<g >
<title>witness_tsdn_null (10,101,010 samples, 0.52%)</title><rect x="52.6" y="645" width="6.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="55.58" y="655.5" ></text>
</g>
<g >
<title>extent_try_coalesce (10,101,010 samples, 0.52%)</title><rect x="326.3" y="197" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="329.29" y="207.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="739.9" y="757" width="12.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="742.90" y="767.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::destruct (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="517" width="6.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1065.27" y="527.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="916.3" y="197" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="919.29" y="207.5" ></text>
</g>
<g >
<title>maybe_check_alloc_ctx (10,101,010 samples, 0.52%)</title><rect x="405.4" y="661" width="6.0" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="408.36" y="671.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::~__hash_table (20,202,020 samples, 1.03%)</title><rect x="867.6" y="421" width="12.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="870.63" y="431.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::destruct (10,101,010 samples, 0.52%)</title><rect x="1044.0" y="693" width="6.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1047.02" y="703.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="1013.6" y="501" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1016.61" y="511.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;::__base_destruct_at_end[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="441.9" y="805" width="6.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="444.86" y="815.5" ></text>
</g>
<g >
<title>arena_cache_bin_fill_small (10,101,010 samples, 0.52%)</title><rect x="563.5" y="485" width="6.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="566.51" y="495.5" ></text>
</g>
<g >
<title>Poco::JSON::Object::~Object (30,303,030 samples, 1.55%)</title><rect x="1044.0" y="853" width="18.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1047.02" y="863.5" ></text>
</g>
<g >
<title>std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::find&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="533.1" y="789" width="6.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="536.09" y="799.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="642.6" y="677" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="645.58" y="687.5" ></text>
</g>
<g >
<title>DB::AsynchronousMetrics::update (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1189" width="12.2" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="13.00" y="1199.5" ></text>
</g>
<g >
<title>DB::NameAndTypePair&amp; std::__1::list&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::emplace_back&lt;DB::NameAndTypePair const&amp;&gt; (20,202,020 samples, 1.03%)</title><rect x="472.3" y="773" width="12.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="475.27" y="783.5" ></text>
</g>
<g >
<title>arena_sdalloc (10,101,010 samples, 0.52%)</title><rect x="971.0" y="613" width="6.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="974.03" y="623.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="660.8" y="565" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="663.82" y="575.5" ></text>
</g>
<g >
<title>aligned_usize_get (10,101,010 samples, 0.52%)</title><rect x="514.8" y="565" width="6.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="517.85" y="575.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::InputPort, std::__1::allocator&lt;DB::InputPort&gt; &gt;::~list (20,202,020 samples, 1.03%)</title><rect x="892.0" y="565" width="12.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="894.96" y="575.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="22.2" y="357" width="6.0" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="25.16" y="367.5" ></text>
</g>
<g >
<title>DB::ICompressionCodec::compress (10,101,010 samples, 0.52%)</title><rect x="192.5" y="837" width="6.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="195.47" y="847.5" ></text>
</g>
<g >
<title>Poco::JSON::Array::~Array (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="853" width="6.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1040.94" y="863.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::~map[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="1135.3" y="901" width="18.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1138.26" y="911.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;::~pair (10,101,010 samples, 0.52%)</title><rect x="873.7" y="341" width="6.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="876.71" y="351.5" ></text>
</g>
<g >
<title>DB::ISerialization::getFileNameForStream (20,202,020 samples, 1.03%)</title><rect x="168.1" y="757" width="12.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="171.14" y="767.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::~VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="709" width="6.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1065.27" y="719.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN4Poco7Dynamic3VarETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS5_ (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="613" width="12.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1144.34" y="623.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="496.6" y="597" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="499.60" y="607.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::Var (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="725" width="12.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1028.77" y="735.5" ></text>
</g>
<g >
<title>DB::MergeTreeDataPartWriterCompact::writeDataBlockPrimaryIndexAndSkipIndices (90,909,090 samples, 4.64%)</title><rect x="143.8" y="933" width="54.8" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="146.81" y="943.5" >DB::M..</text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::CheckSortedTransform&gt; &gt;::destroy[abi:v15000]&lt;DB::CheckSortedTransform, void, void&gt; (80,808,080 samples, 4.12%)</title><rect x="788.6" y="677" width="48.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="791.56" y="687.5" >void..</text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;DB::OutputPort, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;DB::OutputPort, void, void&gt; (40,404,040 samples, 2.06%)</title><rect x="867.6" y="533" width="24.4" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="870.63" y="543.5" >v..</text>
</g>
<g >
<title>DB::BufferBase::available (10,101,010 samples, 0.52%)</title><rect x="654.7" y="725" width="6.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="657.74" y="735.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::__base_destruct_at_end[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="805" width="6.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1040.94" y="815.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="70.8" y="837" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="73.82" y="847.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="964.9" y="789" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="967.95" y="799.5" ></text>
</g>
<g >
<title>rtree_leaf_elm_bits_read (10,101,010 samples, 0.52%)</title><rect x="119.5" y="661" width="6.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="122.48" y="671.5" ></text>
</g>
<g >
<title>tsdn_tsd (10,101,010 samples, 0.52%)</title><rect x="892.0" y="229" width="6.0" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="894.96" y="239.5" ></text>
</g>
<g >
<title>DB::PODArray&lt;long, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::~PODArray (10,101,010 samples, 0.52%)</title><rect x="819.0" y="437" width="6.1" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="821.97" y="447.5" ></text>
</g>
<g >
<title>tsd_reentrancy_level_get (10,101,010 samples, 0.52%)</title><rect x="253.3" y="709" width="6.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="256.30" y="719.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::OutputPort, std::__1::allocator&lt;DB::OutputPort&gt; &gt;::~__list_imp (10,101,010 samples, 0.52%)</title><rect x="910.2" y="565" width="6.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="913.21" y="575.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="764.2" y="581" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="767.23" y="591.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::shared_ptr&lt;DB::ISerialization const&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::shared_ptr&lt;DB::ISerialization const&gt;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="782.5" y="677" width="6.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="785.47" y="687.5" ></text>
</g>
<g >
<title>witness_tsdn_tsd (10,101,010 samples, 0.52%)</title><rect x="174.2" y="501" width="6.1" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="177.23" y="511.5" ></text>
</g>
<g >
<title>inallocx (10,101,010 samples, 0.52%)</title><rect x="95.2" y="837" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="98.15" y="847.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="58.7" y="645" width="6.0" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="61.66" y="655.5" ></text>
</g>
<g >
<title>extent_split_interior (10,101,010 samples, 0.52%)</title><rect x="374.9" y="485" width="6.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="377.95" y="495.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;DB::OutputPort, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;DB::OutputPort, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="806.8" y="533" width="12.2" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="809.80" y="543.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate_at_least[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="958.9" y="757" width="6.0" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="961.87" y="767.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::clone (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="709" width="6.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1095.68" y="719.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="618.2" y="661" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="621.25" y="671.5" ></text>
</g>
<g >
<title>sz_s2u_compute (10,101,010 samples, 0.52%)</title><rect x="581.8" y="565" width="6.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="584.75" y="575.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;::__clear[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="819.0" y="597" width="18.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="821.97" y="607.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPSB_ (10,101,010 samples, 0.52%)</title><rect x="125.6" y="837" width="6.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="128.57" y="847.5" ></text>
</g>
<g >
<title>std::__1::deque&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt;, std::__1::allocator&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt; &gt; &gt;::~deque (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="661" width="6.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1040.94" y="671.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;long&gt;::~ColumnVector (10,101,010 samples, 0.52%)</title><rect x="819.0" y="469" width="6.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="821.97" y="479.5" ></text>
</g>
<g >
<title>sz_size2index (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="613" width="6.0" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1138.26" y="623.5" ></text>
</g>
<g >
<title>edata_szind_get (10,101,010 samples, 0.52%)</title><rect x="393.2" y="485" width="6.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="396.20" y="495.5" ></text>
</g>
<g >
<title>sz_size2index (10,101,010 samples, 0.52%)</title><rect x="946.7" y="709" width="6.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="949.70" y="719.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN4Poco7Dynamic3VarETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS5_ (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="757" width="6.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1040.94" y="767.5" ></text>
</g>
<g >
<title>void std::__1::__invoke_void_return_wrapper&lt;void, true&gt;::__call&lt;DB::MergeTreeBackgroundExecutor&lt;DB::DynamicRuntimeQueue&gt;::MergeTreeBackgroundExecutor (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1125" width="1161.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="25.16" y="1135.5" >void std::__1::__invoke_void_return_wrapper&lt;void, true&gt;::__call&lt;DB::MergeTreeBackgroundExecutor&lt;DB::DynamicRuntimeQueue&gt;::MergeTreeBackgroundExecutor</text>
</g>
<g >
<title>tsdn_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="879.8" y="149" width="6.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="882.79" y="159.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;::~pair (10,101,010 samples, 0.52%)</title><rect x="855.5" y="341" width="6.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="858.46" y="351.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::destroy[abi:v15000]&lt;Poco::Dynamic::Var, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="789" width="6.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1040.94" y="799.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="508.8" y="629" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="511.76" y="639.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="496.6" y="581" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="499.60" y="591.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB19SerializationSparseETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="782.5" y="533" width="6.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="785.47" y="543.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.03%)</title><rect x="89.1" y="869" width="12.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="92.07" y="879.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="496.6" y="693" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="499.60" y="703.5" ></text>
</g>
<g >
<title>sdallocx (20,202,020 samples, 1.03%)</title><rect x="837.2" y="213" width="12.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="840.22" y="223.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="946.7" y="901" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="949.70" y="911.5" ></text>
</g>
<g >
<title>DB::MergeTreeBackgroundExecutor&lt;DB::DynamicRuntimeQueue&gt;::MergeTreeBackgroundExecutor (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1093" width="1161.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="25.16" y="1103.5" >DB::MergeTreeBackgroundExecutor&lt;DB::DynamicRuntimeQueue&gt;::MergeTreeBackgroundExecutor</text>
</g>
<g >
<title>Poco::Dynamic::Var::destruct (30,303,030 samples, 1.55%)</title><rect x="1117.0" y="869" width="18.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1120.01" y="879.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="648.7" y="693" width="6.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="651.66" y="703.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::free (10,101,010 samples, 0.52%)</title><rect x="819.0" y="389" width="6.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="821.97" y="399.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::insert[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1098.8" y="517" width="6.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1101.76" y="527.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="143.8" y="757" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="146.81" y="767.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="1129.2" y="741" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1132.18" y="751.5" ></text>
</g>
<g >
<title>DB::Block::has (10,101,010 samples, 0.52%)</title><rect x="533.1" y="821" width="6.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="536.09" y="831.5" ></text>
</g>
<g >
<title>std::__1::function&lt;DB::WriteBuffer*  (20,202,020 samples, 1.03%)</title><rect x="168.1" y="869" width="12.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="171.14" y="879.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Array&gt;::~VarHolderImpl (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="725" width="12.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1144.34" y="735.5" ></text>
</g>
<g >
<title>DB::Block::eraseImpl (10,101,010 samples, 0.52%)</title><rect x="447.9" y="805" width="6.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="450.94" y="815.5" ></text>
</g>
<g >
<title>start_thread (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1477" width="12.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="13.00" y="1487.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__emplace_unique_key_args&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="958.9" y="901" width="6.0" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="961.87" y="911.5" ></text>
</g>
<g >
<title>tsd_reentrancy_level_get (10,101,010 samples, 0.52%)</title><rect x="660.8" y="517" width="6.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="663.82" y="527.5" ></text>
</g>
<g >
<title>_ZNSt3__118__apply_tuple_implB6v15000IRZN2DB19AsynchronousMetrics5startEvE3$_0RNS_5tupleIJEEETpTnmJEEEDcOT_OT0_NS_15__tuple_indicesIJXspT1_EEEE (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1253" width="12.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="13.00" y="1263.5" ></text>
</g>
<g >
<title>DB::ISerialization::enumerateStreams (10,101,010 samples, 0.52%)</title><rect x="514.8" y="773" width="6.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="517.85" y="783.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="308.0" y="677" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="311.04" y="687.5" ></text>
</g>
<g >
<title>CityHash_v1_0_2::CityHash128WithSeed (10,101,010 samples, 0.52%)</title><rect x="630.4" y="709" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="633.41" y="719.5" ></text>
</g>
<g >
<title>tsd_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="289.8" y="725" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="292.79" y="735.5" ></text>
</g>
<g >
<title>free (10,101,010 samples, 0.52%)</title><rect x="441.9" y="597" width="6.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="444.86" y="607.5" ></text>
</g>
<g >
<title>witness_tsdn_null (10,101,010 samples, 0.52%)</title><rect x="174.2" y="485" width="6.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="177.23" y="495.5" ></text>
</g>
<g >
<title>decltype (50,505,050 samples, 2.58%)</title><rect x="314.1" y="853" width="30.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="317.12" y="863.5" >de..</text>
</g>
<g >
<title>std::__1::queue&lt;DB::ExecutingGraph::Node*, std::__1::deque&lt;DB::ExecutingGraph::Node*, AllocatorWithMemoryTracking&lt;DB::ExecutingGraph::Node*&gt; &gt; &gt;::push[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="295.9" y="901" width="6.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="298.88" y="911.5" ></text>
</g>
<g >
<title>tcache_salloc (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="373" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1120.01" y="383.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;::~immutable_ptr (10,101,010 samples, 0.52%)</title><rect x="441.9" y="741" width="6.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="444.86" y="751.5" ></text>
</g>
<g >
<title>DB::MergedBlockOutputStream::writeImpl (343,434,340 samples, 17.53%)</title><rect x="70.8" y="965" width="206.8" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="73.82" y="975.5" >DB::MergedBlockOutputStream..</text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN4Poco7Dynamic3VarETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS5_ (10,101,010 samples, 0.52%)</title><rect x="1086.6" y="821" width="6.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1089.60" y="831.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="501" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1095.68" y="511.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="709" width="6.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1138.26" y="719.5" ></text>
</g>
<g >
<title>tcache_event (10,101,010 samples, 0.52%)</title><rect x="58.7" y="597" width="6.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="61.66" y="607.5" ></text>
</g>
<g >
<title>witness_assert_lockless (10,101,010 samples, 0.52%)</title><rect x="739.9" y="645" width="6.1" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="742.90" y="655.5" ></text>
</g>
<g >
<title>std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::~unordered_map[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="539.2" y="805" width="6.1" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="542.18" y="815.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="125.6" y="645" width="6.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="128.57" y="655.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::destruct (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="533" width="12.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1053.10" y="543.5" ></text>
</g>
<g >
<title>DB::MergeTreeDataPartWriterCompact::writeDataBlock (90,909,090 samples, 4.64%)</title><rect x="143.8" y="917" width="54.8" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="146.81" y="927.5" >DB::M..</text>
</g>
<g >
<title>witness_assert_depth (10,101,010 samples, 0.52%)</title><rect x="113.4" y="693" width="6.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="116.40" y="703.5" ></text>
</g>
<g >
<title>sdallocx (20,202,020 samples, 1.03%)</title><rect x="569.6" y="693" width="12.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="572.59" y="703.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::~Var (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="597" width="12.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1144.34" y="607.5" ></text>
</g>
<g >
<title>DB::ISerialization::deserializeBinaryBulkWithMultipleStreams (20,202,020 samples, 1.03%)</title><rect x="630.4" y="805" width="12.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="633.41" y="815.5" ></text>
</g>
<g >
<title>tsdn_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="1031.9" y="261" width="6.0" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1034.86" y="271.5" ></text>
</g>
<g >
<title>isdalloct (10,101,010 samples, 0.52%)</title><rect x="338.5" y="517" width="6.0" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="341.45" y="527.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="168.1" y="501" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="171.14" y="511.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="624.3" y="597" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="627.33" y="607.5" ></text>
</g>
<g >
<title>extent_merge_impl (10,101,010 samples, 0.52%)</title><rect x="971.0" y="325" width="6.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="974.03" y="335.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="563.5" y="613" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="566.51" y="623.5" ></text>
</g>
<g >
<title>tsd_reentrancy_levelp_get (10,101,010 samples, 0.52%)</title><rect x="660.8" y="501" width="6.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="663.82" y="511.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="764.2" y="421" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="767.23" y="431.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="437" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1095.68" y="447.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="597" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1120.01" y="607.5" ></text>
</g>
<g >
<title>void std::__1::vector&lt;DB::ISerialization::Substream, std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt;::__push_back_slow_path&lt;DB::ISerialization::Substream&gt; (10,101,010 samples, 0.52%)</title><rect x="514.8" y="741" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="517.85" y="751.5" ></text>
</g>
<g >
<title>std::__1::shared_ptr&lt;DB::IDataType const&gt;::shared_ptr[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="502.7" y="709" width="6.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="505.68" y="719.5" ></text>
</g>
<g >
<title>te_event_trigger (10,101,010 samples, 0.52%)</title><rect x="58.7" y="629" width="6.0" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="61.66" y="639.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="776.4" y="373" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="779.39" y="383.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB15NameAndTypePairETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="34.3" y="405" width="6.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="37.33" y="415.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPSB_ (20,202,020 samples, 1.03%)</title><rect x="788.6" y="373" width="12.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="791.56" y="383.5" ></text>
</g>
<g >
<title>idalloctm (10,101,010 samples, 0.52%)</title><rect x="326.3" y="453" width="6.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="329.29" y="463.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="95.2" y="853" width="6.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="98.15" y="863.5" ></text>
</g>
<g >
<title>thread_alloc_event (10,101,010 samples, 0.52%)</title><rect x="295.9" y="741" width="6.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="298.88" y="751.5" ></text>
</g>
<g >
<title>ecache_alloc_grow (10,101,010 samples, 0.52%)</title><rect x="302.0" y="517" width="6.0" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="304.96" y="527.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__base_destruct_at_end[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="971.0" y="869" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="974.03" y="879.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="125.6" y="725" width="6.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="128.57" y="735.5" ></text>
</g>
<g >
<title>aligned_usize_get (10,101,010 samples, 0.52%)</title><rect x="697.3" y="565" width="6.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="700.32" y="575.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="454.0" y="741" width="12.2" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="457.02" y="751.5" ></text>
</g>
<g >
<title>DB::ExecutingGraph::updateNode (20,202,020 samples, 1.03%)</title><rect x="295.9" y="917" width="12.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="298.88" y="927.5" ></text>
</g>
<g >
<title>tsdn_null (10,101,010 samples, 0.52%)</title><rect x="429.7" y="549" width="6.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="432.69" y="559.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="569.6" y="757" width="12.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="572.59" y="767.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="587.8" y="613" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="590.84" y="623.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="673.0" y="725" width="6.1" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="675.99" y="735.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="910.2" y="197" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="913.21" y="207.5" ></text>
</g>
<g >
<title>pa_alloc (20,202,020 samples, 1.03%)</title><rect x="368.9" y="597" width="12.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="371.87" y="607.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::reserveForNextSize&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="593.9" y="709" width="6.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="596.92" y="719.5" ></text>
</g>
<g >
<title>rtree_leaf_elm_lookup (10,101,010 samples, 0.52%)</title><rect x="374.9" y="437" width="6.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="377.95" y="447.5" ></text>
</g>
<g >
<title>rtree_leaf_elm_read (10,101,010 samples, 0.52%)</title><rect x="873.7" y="101" width="6.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="876.71" y="111.5" ></text>
</g>
<g >
<title>extent_recycle_split (10,101,010 samples, 0.52%)</title><rect x="374.9" y="501" width="6.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="377.95" y="511.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="472.3" y="533" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="475.27" y="543.5" ></text>
</g>
<g >
<title>witness_assert_depth (10,101,010 samples, 0.52%)</title><rect x="95.2" y="789" width="6.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="98.15" y="799.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::map[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="485" width="12.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1028.77" y="495.5" ></text>
</g>
<g >
<title>isdalloct (10,101,010 samples, 0.52%)</title><rect x="496.6" y="533" width="6.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="499.60" y="543.5" ></text>
</g>
<g >
<title>iralloct (30,303,030 samples, 1.55%)</title><rect x="368.9" y="725" width="18.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="371.87" y="735.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::OutputPort, std::__1::allocator&lt;DB::OutputPort&gt; &gt;::~list (20,202,020 samples, 1.03%)</title><rect x="806.8" y="581" width="12.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="809.80" y="591.5" ></text>
</g>
<g >
<title>witness_depth_to_rank (10,101,010 samples, 0.52%)</title><rect x="95.2" y="757" width="6.0" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="98.15" y="767.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.52%)</title><rect x="636.5" y="581" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="639.49" y="591.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="302.0" y="805" width="6.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="304.96" y="815.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="805" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1168.67" y="815.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB22MergingSortedTransformETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (30,303,030 samples, 1.55%)</title><rect x="892.0" y="661" width="18.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="894.96" y="671.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__shared_ptr_emplace&lt;DB::SerializationNumber&lt;long&gt;, std::__1::allocator&lt;DB::SerializationNumber&lt;long&gt; &gt; &gt; &gt; &gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="922.4" y="805" width="6.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="925.37" y="815.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate_at_least[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="606.1" y="693" width="12.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="609.08" y="703.5" ></text>
</g>
<g >
<title>DB::DataTypeNumberBase&lt;unsigned long&gt;::haveSubtypes (10,101,010 samples, 0.52%)</title><rect x="600.0" y="741" width="6.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="603.00" y="751.5" ></text>
</g>
<g >
<title>witness_assert_depth_to_rank (10,101,010 samples, 0.52%)</title><rect x="95.2" y="773" width="6.0" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="98.15" y="783.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.03%)</title><rect x="472.3" y="581" width="12.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="475.27" y="591.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="1129.2" y="757" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1132.18" y="767.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="928.5" y="757" width="6.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="931.45" y="767.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::alloc&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="593.9" y="677" width="6.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="596.92" y="687.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;::~pair (20,202,020 samples, 1.03%)</title><rect x="788.6" y="341" width="12.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="791.56" y="351.5" ></text>
</g>
<g >
<title>ifree (10,101,010 samples, 0.52%)</title><rect x="393.2" y="533" width="6.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="396.20" y="543.5" ></text>
</g>
<g >
<title>DB::HashingWriteBuffer::nextImpl (30,303,030 samples, 1.55%)</title><rect x="180.3" y="885" width="18.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="183.31" y="895.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 1.03%)</title><rect x="423.6" y="693" width="12.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="426.61" y="703.5" ></text>
</g>
<g >
<title>iallocztm (10,101,010 samples, 0.52%)</title><rect x="302.0" y="677" width="6.0" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="304.96" y="687.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::alloc (10,101,010 samples, 0.52%)</title><rect x="83.0" y="805" width="6.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="85.99" y="815.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::~vector[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="898.0" y="421" width="6.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="901.04" y="431.5" ></text>
</g>
<g >
<title>boost::multi_index::multi_index_container&lt;DB::ColumnDescription, boost::multi_index::indexed_by&lt;boost::multi_index::sequenced&lt;boost::multi_index::tag&lt;mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt; &gt;, boost::multi_index::ordered_unique&lt;boost::multi_index::member&lt;DB::ColumnDescription, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, &amp;DB::ColumnDescription::name&gt;, mpl_::na, mpl_::na&gt;, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt;, std::__1::allocator&lt;DB::ColumnDescription&gt; &gt;::insert_rv_ (10,101,010 samples, 0.52%)</title><rect x="934.5" y="869" width="6.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="937.54" y="879.5" ></text>
</g>
<g >
<title>DB::WriteBuffer::next (10,101,010 samples, 0.52%)</title><rect x="192.5" y="869" width="6.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="195.47" y="879.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::ColumnConst&gt;::~immutable_ptr (20,202,020 samples, 1.03%)</title><rect x="399.3" y="789" width="12.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="402.28" y="799.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="277.6" y="677" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="280.63" y="687.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4Poco7Dynamic3VarEEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPSE_ (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="789" width="6.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1138.26" y="799.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1098.8" y="421" width="6.0" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1101.76" y="431.5" ></text>
</g>
<g >
<title>witness_tsdn_tsd (10,101,010 samples, 0.52%)</title><rect x="113.4" y="661" width="6.1" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="116.40" y="671.5" ></text>
</g>
<g >
<title>tcache_alloc_small_hard (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="661" width="6.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1168.67" y="671.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (20,202,020 samples, 1.03%)</title><rect x="837.2" y="261" width="12.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="840.22" y="271.5" ></text>
</g>
<g >
<title>std::__1::__hash_map_iterator&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt; &gt;::operator++[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="229.0" y="901" width="6.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="231.97" y="911.5" ></text>
</g>
<g >
<title>DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::resize_fill (20,202,020 samples, 1.03%)</title><rect x="423.6" y="773" width="12.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="426.61" y="783.5" ></text>
</g>
<g >
<title>isdalloct (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="421" width="6.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1120.01" y="431.5" ></text>
</g>
<g >
<title>atomic_load_p (10,101,010 samples, 0.52%)</title><rect x="849.4" y="181" width="6.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="852.38" y="191.5" ></text>
</g>
<g >
<title>DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::~PODArrayBase (10,101,010 samples, 0.52%)</title><rect x="393.2" y="613" width="6.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="396.20" y="623.5" ></text>
</g>
<g >
<title>arena_salloc (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="261" width="6.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1010.53" y="271.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPSB_ (10,101,010 samples, 0.52%)</title><rect x="855.5" y="373" width="6.0" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="858.46" y="383.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::MergeTask, std::__1::allocator&lt;DB::MergeTask&gt; &gt;::__on_zero_shared (30,303,030 samples, 1.55%)</title><rect x="22.2" y="837" width="18.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="25.16" y="847.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__emplace_unique_key_args&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="1001.4" y="853" width="6.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1004.44" y="863.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="910.2" y="293" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="913.21" y="303.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="849.4" y="389" width="6.1" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="852.38" y="399.5" ></text>
</g>
<g >
<title>arena_sdalloc (10,101,010 samples, 0.52%)</title><rect x="946.7" y="725" width="6.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="949.70" y="735.5" ></text>
</g>
<g >
<title>DB::PullingPipelineExecutor::pull (818,181,810 samples, 41.75%)</title><rect x="295.9" y="965" width="492.7" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="298.88" y="975.5" >DB::PullingPipelineExecutor::pull</text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__hash_map_iterator&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt; &gt;, bool&gt; std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::emplace[abi:v15000]&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="277.6" y="933" width="12.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="280.63" y="943.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::~VarHolderImpl (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="501" width="12.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1053.10" y="511.5" ></text>
</g>
<g >
<title>cache_bin_diff (10,101,010 samples, 0.52%)</title><rect x="563.5" y="421" width="6.1" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="566.51" y="431.5" ></text>
</g>
<g >
<title>emap_alloc_ctx_lookup (10,101,010 samples, 0.52%)</title><rect x="119.5" y="709" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="122.48" y="719.5" ></text>
</g>
<g >
<title>tsdn_tsd (10,101,010 samples, 0.52%)</title><rect x="1080.5" y="517" width="6.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1083.52" y="527.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::clone (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="773" width="12.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1010.53" y="783.5" ></text>
</g>
<g >
<title>malloc_mutex_assert_owner (10,101,010 samples, 0.52%)</title><rect x="16.1" y="1013" width="6.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="19.08" y="1023.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::~__hash_table (10,101,010 samples, 0.52%)</title><rect x="539.2" y="789" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="542.18" y="799.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="22.2" y="389" width="6.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="25.16" y="399.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="320.2" y="565" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="323.21" y="575.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__get_pointer[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="685.2" y="661" width="6.0" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="688.15" y="671.5" ></text>
</g>
<g >
<title>sz_s2u_lookup (10,101,010 samples, 0.52%)</title><rect x="581.8" y="581" width="6.0" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="584.75" y="591.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::operator=[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="952.8" y="917" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="955.78" y="927.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;long&gt;::~ColumnVector (20,202,020 samples, 1.03%)</title><rect x="58.7" y="805" width="12.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="61.66" y="815.5" ></text>
</g>
<g >
<title>emap_full_alloc_ctx_try_lookup (10,101,010 samples, 0.52%)</title><rect x="849.4" y="245" width="6.1" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="852.38" y="255.5" ></text>
</g>
<g >
<title>DB::AsynchronousMetrics::start (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1221" width="12.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="13.00" y="1231.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;::VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="517" width="6.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1010.53" y="527.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="107.3" y="741" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="110.32" y="751.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="861.5" y="325" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="864.55" y="335.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__base_destruct_at_end[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="545.3" y="773" width="6.0" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="548.26" y="783.5" ></text>
</g>
<g >
<title>iallocztm (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="709" width="6.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1168.67" y="719.5" ></text>
</g>
<g >
<title>pac_alloc_impl (10,101,010 samples, 0.52%)</title><rect x="302.0" y="549" width="6.0" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="304.96" y="559.5" ></text>
</g>
<g >
<title>arena_ralloc (20,202,020 samples, 1.03%)</title><rect x="368.9" y="709" width="12.1" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="371.87" y="719.5" ></text>
</g>
<g >
<title>rtree_leaf_elm_read (10,101,010 samples, 0.52%)</title><rect x="849.4" y="213" width="6.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="852.38" y="223.5" ></text>
</g>
<g >
<title>tcache_bin_flush_bottom (10,101,010 samples, 0.52%)</title><rect x="338.5" y="453" width="6.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="341.45" y="463.5" ></text>
</g>
<g >
<title>DB::NameAndTypePair::~NameAndTypePair (10,101,010 samples, 0.52%)</title><rect x="648.7" y="805" width="6.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="651.66" y="815.5" ></text>
</g>
<g >
<title>void std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::__push_back_slow_path&lt;Poco::Dynamic::Var const&amp;&gt; (40,404,040 samples, 2.06%)</title><rect x="1062.3" y="885" width="24.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1065.27" y="895.5" >v..</text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::construct[abi:v15000]&lt;Poco::Dynamic::Var, Poco::Dynamic::Var&amp;, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="661" width="12.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1101.76" y="671.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::reserveForNextSize&lt;&gt; (70,707,070 samples, 3.61%)</title><rect x="350.6" y="805" width="42.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="353.62" y="815.5" >void..</text>
</g>
<g >
<title>ifree (10,101,010 samples, 0.52%)</title><rect x="58.7" y="677" width="6.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="61.66" y="687.5" ></text>
</g>
<g >
<title>thread_alloc_event (10,101,010 samples, 0.52%)</title><rect x="587.8" y="549" width="6.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="590.84" y="559.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="873.7" y="389" width="6.1" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="876.71" y="399.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::realloc&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="587.8" y="693" width="6.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="590.84" y="703.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB10NullSourceETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="910.2" y="645" width="6.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="913.21" y="655.5" ></text>
</g>
<g >
<title>pac_stash_decayed (10,101,010 samples, 0.52%)</title><rect x="971.0" y="421" width="6.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="974.03" y="431.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="837.2" y="309" width="12.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="840.22" y="319.5" ></text>
</g>
<g >
<title>rtree_leaf_elm_lookup (10,101,010 samples, 0.52%)</title><rect x="867.6" y="213" width="6.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="870.63" y="223.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="989.3" y="789" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="992.28" y="799.5" ></text>
</g>
<g >
<title>std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;::operator (20,202,020 samples, 1.03%)</title><rect x="679.1" y="757" width="12.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="682.07" y="767.5" ></text>
</g>
<g >
<title>ctl_arena_refresh (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1093" width="12.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="13.00" y="1103.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::MergeTask::GlobalRuntimeContext, std::__1::allocator&lt;DB::MergeTask::GlobalRuntimeContext&gt; &gt;::__on_zero_shared (30,303,030 samples, 1.55%)</title><rect x="22.2" y="709" width="18.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="25.16" y="719.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt; &gt; &gt;::__emplace_unique_key_args&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::piecewise_construct_t const&amp;, std::__1::tuple&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;&gt;, std::__1::tuple&lt;&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="679.1" y="789" width="12.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="682.07" y="799.5" ></text>
</g>
<g >
<title>Poco::JSON::Stringifier::stringify (20,202,020 samples, 1.03%)</title><rect x="1153.5" y="869" width="12.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1156.51" y="879.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="977.1" y="725" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="980.11" y="735.5" ></text>
</g>
<g >
<title>isdalloct (10,101,010 samples, 0.52%)</title><rect x="46.5" y="773" width="6.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="49.49" y="783.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::~__tree (30,303,030 samples, 1.55%)</title><rect x="1044.0" y="821" width="18.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1047.02" y="831.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10,101,010 samples, 0.52%)</title><rect x="83.0" y="693" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="85.99" y="703.5" ></text>
</g>
<g >
<title>thread_alloc_event (10,101,010 samples, 0.52%)</title><rect x="733.8" y="549" width="6.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="736.81" y="559.5" ></text>
</g>
<g >
<title>DB::ExpressionActions::execute (40,404,040 samples, 2.06%)</title><rect x="447.9" y="837" width="24.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="450.94" y="847.5" >D..</text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="496.6" y="549" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="499.60" y="559.5" ></text>
</g>
<g >
<title>DB::(anonymous namespace)::getNameForSubstreamPath (10,101,010 samples, 0.52%)</title><rect x="168.1" y="725" width="6.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="171.14" y="735.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="143.8" y="789" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="146.81" y="799.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="873.7" y="181" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="876.71" y="191.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="770.3" y="469" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="773.31" y="479.5" ></text>
</g>
<g >
<title>DB::ColumnsDescription::tryGetColumnOrSubcolumn (20,202,020 samples, 1.03%)</title><rect x="551.3" y="805" width="12.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="554.34" y="815.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt; &gt; &gt;::destroy (20,202,020 samples, 1.03%)</title><rect x="770.3" y="613" width="12.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="773.31" y="623.5" ></text>
</g>
<g >
<title>DB::IProcessor::~IProcessor (40,404,040 samples, 2.06%)</title><rect x="867.6" y="597" width="24.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="870.63" y="607.5" >D..</text>
</g>
<g >
<title>arena_cache_bin_fill_small (10,101,010 samples, 0.52%)</title><rect x="612.2" y="453" width="6.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="615.16" y="463.5" ></text>
</g>
<g >
<title>extent_try_delayed_coalesce (10,101,010 samples, 0.52%)</title><rect x="971.0" y="389" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="974.03" y="399.5" ></text>
</g>
<g >
<title>cache_bin_assert_empty (10,101,010 samples, 0.52%)</title><rect x="612.2" y="421" width="6.0" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="615.16" y="431.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.52%)</title><rect x="642.6" y="789" width="6.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="645.58" y="799.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="70.8" y="805" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="73.82" y="815.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN4Poco7Dynamic3VarETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS5_ (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="725" width="6.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1120.01" y="735.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="563.5" y="645" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="566.51" y="655.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="405" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1010.53" y="415.5" ></text>
</g>
<g >
<title>witness_assert_lockless (10,101,010 samples, 0.52%)</title><rect x="174.2" y="549" width="6.1" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="177.23" y="559.5" ></text>
</g>
<g >
<title>DB::ISerialization::enumerateStreams (20,202,020 samples, 1.03%)</title><rect x="508.8" y="789" width="12.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="511.76" y="799.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="660.8" y="533" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="663.82" y="543.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="770.3" y="405" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="773.31" y="415.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::Var (30,303,030 samples, 1.55%)</title><rect x="1068.4" y="805" width="18.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1071.35" y="815.5" ></text>
</g>
<g >
<title>DB::MergeTask::MergeProjectionsStage::finalizeProjectionsAndWholeMerge (424,242,420 samples, 21.65%)</title><rect x="922.4" y="997" width="255.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="925.37" y="1007.5" >DB::MergeTask::MergeProjectionsSta..</text>
</g>
<g >
<title>sallocx (10,101,010 samples, 0.52%)</title><rect x="739.9" y="677" width="6.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="742.90" y="687.5" ></text>
</g>
<g >
<title>Poco::JSON::Object::Object (10,101,010 samples, 0.52%)</title><rect x="1098.8" y="565" width="6.0" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1101.76" y="575.5" ></text>
</g>
<g >
<title>free_default (10,101,010 samples, 0.52%)</title><rect x="393.2" y="549" width="6.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="396.20" y="559.5" ></text>
</g>
<g >
<title>std::__1::__tree_node_base&lt;void*&gt;*&amp; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__find_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="1001.4" y="837" width="6.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1004.44" y="847.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="581.8" y="645" width="6.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="584.75" y="655.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="770.3" y="485" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="773.31" y="495.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="22.2" y="421" width="6.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="25.16" y="431.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="417.5" y="693" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="420.53" y="703.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="58.7" y="661" width="6.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="61.66" y="671.5" ></text>
</g>
<g >
<title>std::__1::enable_if&lt;__can_be_converted_to_string_view&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt;::value, int&gt;::type std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::compare&lt;std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="271.5" y="821" width="6.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="274.55" y="831.5" ></text>
</g>
<g >
<title>void std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::insert[abi:v15000]&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="629" width="6.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1095.68" y="639.5" ></text>
</g>
<g >
<title>do_rallocx (70,707,070 samples, 3.61%)</title><rect x="350.6" y="741" width="42.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="353.62" y="751.5" >do_r..</text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="1074.4" y="517" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1077.43" y="527.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="508.8" y="517" width="6.0" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="511.76" y="527.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;::~pair (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="741" width="12.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1053.10" y="751.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN4Poco7Dynamic3VarETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS5_ (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="773" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1040.94" y="783.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="904.1" y="453" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="907.12" y="463.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="1129.2" y="709" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1132.18" y="719.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Array&gt;::~VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="853" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1120.01" y="863.5" ></text>
</g>
<g >
<title>std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;::operator (10,101,010 samples, 0.52%)</title><rect x="533.1" y="773" width="6.1" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="536.09" y="783.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1019.7" y="757" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1022.69" y="767.5" ></text>
</g>
<g >
<title>DB::ISimpleTransform::~ISimpleTransform (50,505,050 samples, 2.58%)</title><rect x="788.6" y="613" width="30.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="791.56" y="623.5" >DB..</text>
</g>
<g >
<title>arena_decay_ticks (10,101,010 samples, 0.52%)</title><rect x="326.3" y="357" width="6.1" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="329.29" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="660.8" y="629" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="663.82" y="639.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB19SerializationSparseETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="782.5" y="549" width="6.1" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="785.47" y="559.5" ></text>
</g>
<g >
<title>DB::MergeTreeDataPartWriterCompact::fillDataChecksums (50,505,050 samples, 2.58%)</title><rect x="964.9" y="933" width="30.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="967.95" y="943.5" >DB..</text>
</g>
<g >
<title>std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;::~vector[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="308.0" y="837" width="6.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="311.04" y="847.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="399.3" y="629" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="402.28" y="639.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="940.6" y="805" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="943.62" y="815.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="904.1" y="325" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="907.12" y="335.5" ></text>
</g>
<g >
<title>arena_slab_alloc (10,101,010 samples, 0.52%)</title><rect x="302.0" y="597" width="6.0" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="304.96" y="607.5" ></text>
</g>
<g >
<title>arena_cache_bin_fill_small (10,101,010 samples, 0.52%)</title><rect x="593.9" y="469" width="6.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="596.92" y="479.5" ></text>
</g>
<g >
<title>void* std::__1::__thread_proxy[abi:v15000]&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, ThreadPoolImpl&lt;std::__1::thread&gt;::scheduleImpl&lt;void&gt; (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1461" width="12.2" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="13.00" y="1471.5" ></text>
</g>
<g >
<title>std::__1::__shared_count::__release_shared[abi:v15000] (222,222,220 samples, 11.34%)</title><rect x="788.6" y="709" width="133.8" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="791.56" y="719.5" >std::__1::__shar..</text>
</g>
<g >
<title>Poco::JSON::Array::Array (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="725" width="12.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1101.76" y="735.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="89.1" y="805" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="92.07" y="815.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="764.2" y="373" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="767.23" y="383.5" ></text>
</g>
<g >
<title>pa_dalloc (10,101,010 samples, 0.52%)</title><rect x="52.6" y="725" width="6.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="55.58" y="735.5" ></text>
</g>
<g >
<title>std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, void*&gt;*, long&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::find&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="271.5" y="917" width="6.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="274.55" y="927.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolder* Poco::Dynamic::VarHolder::cloneHolder&lt;Poco::JSON::Object&gt; (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="597" width="12.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1101.76" y="607.5" ></text>
</g>
<g >
<title>edata_addr_get (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="613" width="6.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1168.67" y="623.5" ></text>
</g>
<g >
<title>DB::Block::~Block (30,303,030 samples, 1.55%)</title><rect x="849.4" y="453" width="18.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="852.38" y="463.5" ></text>
</g>
<g >
<title>cache_bin_still_zero_initialized (10,101,010 samples, 0.52%)</title><rect x="28.2" y="85" width="6.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="31.25" y="95.5" ></text>
</g>
<g >
<title>DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::dealloc (20,202,020 samples, 1.03%)</title><rect x="825.1" y="405" width="12.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="828.05" y="415.5" ></text>
</g>
<g >
<title>te_ctx_get (10,101,010 samples, 0.52%)</title><rect x="569.6" y="581" width="6.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="572.59" y="591.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__emplace_hint_unique_key_args&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; const&amp;&gt; (30,303,030 samples, 1.55%)</title><rect x="1019.7" y="805" width="18.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1022.69" y="815.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="971.0" y="789" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="974.03" y="799.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="549" width="6.0" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1174.75" y="559.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::SerializationSparse, std::__1::allocator&lt;DB::SerializationSparse&gt; &gt;::__on_zero_shared (10,101,010 samples, 0.52%)</title><rect x="782.5" y="581" width="6.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="785.47" y="591.5" ></text>
</g>
<g >
<title>DB::NamesAndTypesList::NamesAndTypesList (10,101,010 samples, 0.52%)</title><rect x="502.7" y="805" width="6.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="505.68" y="815.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ExpressionTransform&gt; &gt;::destroy[abi:v15000]&lt;DB::ExpressionTransform, void, void&gt; (50,505,050 samples, 2.58%)</title><rect x="837.2" y="677" width="30.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="840.22" y="687.5" >vo..</text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::~ColumnVector (20,202,020 samples, 1.03%)</title><rect x="825.1" y="469" width="12.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="828.05" y="479.5" ></text>
</g>
<g >
<title>std::__1::__compressed_pair&lt;DB::ISerialization::Substream*, std::__1::allocator&lt;DB::ISerialization::Substream&gt;&amp;&gt;::second[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="666.9" y="709" width="6.1" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="669.91" y="719.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::free (10,101,010 samples, 0.52%)</title><rect x="393.2" y="581" width="6.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="396.20" y="591.5" ></text>
</g>
<g >
<title>DB::IProcessor::~IProcessor (10,101,010 samples, 0.52%)</title><rect x="916.3" y="597" width="6.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="919.29" y="607.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_10shared_ptrIN2DB10IProcessorEEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS6_ (222,222,220 samples, 11.34%)</title><rect x="788.6" y="757" width="133.8" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="791.56" y="767.5" >_ZNSt3__112__des..</text>
</g>
<g >
<title>sz_size2index_compute (10,101,010 samples, 0.52%)</title><rect x="940.6" y="661" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="943.62" y="671.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt;::construct[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; const&amp;, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="773" width="12.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1028.77" y="783.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ISerialization::Substream, std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt;::~vector[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="940.6" y="885" width="6.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="943.62" y="895.5" ></text>
</g>
<g >
<title>isalloc (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="277" width="6.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1010.53" y="287.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::destroy[abi:v15000]&lt;DB::ColumnWithTypeAndName, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="545.3" y="757" width="6.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="548.26" y="767.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="977.1" y="789" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="980.11" y="799.5" ></text>
</g>
<g >
<title>te_next_event_compute (10,101,010 samples, 0.52%)</title><rect x="332.4" y="373" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="335.37" y="383.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="618.2" y="693" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="621.25" y="703.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="545.3" y="549" width="6.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="548.26" y="559.5" ></text>
</g>
<g >
<title>CityHash_v1_0_2::WeakHashLen32WithSeeds (20,202,020 samples, 1.03%)</title><rect x="180.3" y="821" width="12.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="183.31" y="831.5" ></text>
</g>
<g >
<title>std::__1::__deque_base&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt;, std::__1::allocator&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt; &gt; &gt;::clear (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="629" width="6.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1040.94" y="639.5" ></text>
</g>
<g >
<title>tcache_bin_flush_bottom (10,101,010 samples, 0.52%)</title><rect x="326.3" y="389" width="6.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="329.29" y="399.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate_at_least[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="259.4" y="837" width="6.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="262.38" y="847.5" ></text>
</g>
<g >
<title>std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::~unordered_map[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="849.4" y="437" width="12.1" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="852.38" y="447.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="472.3" y="661" width="12.1" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="475.27" y="671.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;long&gt;::insertDefault (10,101,010 samples, 0.52%)</title><rect x="587.8" y="741" width="6.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="590.84" y="751.5" ></text>
</g>
<g >
<title>std::__1::enable_if&lt;__can_be_converted_to_string_view&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt;::value, int&gt;::type std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::compare&lt;std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="952.8" y="773" width="6.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="955.78" y="783.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::~map[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="764.2" y="725" width="6.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="767.23" y="735.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="849.4" y="325" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="852.38" y="335.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="855.5" y="389" width="6.0" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="858.46" y="399.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="563.5" y="757" width="6.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="566.51" y="767.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="624.3" y="645" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="627.33" y="655.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="733.8" y="533" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="736.81" y="543.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="971.0" y="693" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="974.03" y="703.5" ></text>
</g>
<g >
<title>tsd_reentrancy_levelp_get (10,101,010 samples, 0.52%)</title><rect x="253.3" y="693" width="6.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="256.30" y="703.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolder* Poco::Dynamic::VarHolder::cloneHolder&lt;Poco::JSON::Object&gt; (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="533" width="12.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1028.77" y="543.5" ></text>
</g>
<g >
<title>tcache_bin_flush_impl (10,101,010 samples, 0.52%)</title><rect x="971.0" y="549" width="6.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="974.03" y="559.5" ></text>
</g>
<g >
<title>sz_size2index_lookup (10,101,010 samples, 0.52%)</title><rect x="940.6" y="677" width="6.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="943.62" y="687.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::destroy[abi:v15000]&lt;DB::ColumnWithTypeAndName, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="898.0" y="373" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="901.04" y="383.5" ></text>
</g>
<g >
<title>iallocztm (10,101,010 samples, 0.52%)</title><rect x="612.2" y="517" width="6.0" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="615.16" y="527.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate_at_least[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="642.6" y="725" width="6.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="645.58" y="735.5" ></text>
</g>
<g >
<title>std::__1::unique_ptr&lt;DB::IDataTypeCustomName const, std::__1::default_delete&lt;DB::IDataTypeCustomName const&gt; &gt;::~unique_ptr[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="156.0" y="821" width="6.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="158.98" y="831.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="853" width="6.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1174.75" y="863.5" ></text>
</g>
<g >
<title>tcache_bin_flush_bottom (10,101,010 samples, 0.52%)</title><rect x="58.7" y="549" width="6.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="61.66" y="559.5" ></text>
</g>
<g >
<title>tsd_fast (10,101,010 samples, 0.52%)</title><rect x="283.7" y="613" width="6.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="286.71" y="623.5" ></text>
</g>
<g >
<title>DB::MergedBlockOutputStream::write (343,434,340 samples, 17.53%)</title><rect x="70.8" y="981" width="206.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="73.82" y="991.5" >DB::MergedBlockOutputStream..</text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="1123.1" y="725" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1126.09" y="735.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="411.4" y="757" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="414.44" y="767.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPSB_ (10,101,010 samples, 0.52%)</title><rect x="916.3" y="373" width="6.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="919.29" y="383.5" ></text>
</g>
<g >
<title>DB::NameAndTypePair::NameAndTypePair (20,202,020 samples, 1.03%)</title><rect x="472.3" y="725" width="12.1" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="475.27" y="735.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="539.2" y="693" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="542.18" y="703.5" ></text>
</g>
<g >
<title>DB::BufferBase::Buffer::end (10,101,010 samples, 0.52%)</title><rect x="654.7" y="709" width="6.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="657.74" y="719.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="533" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1120.01" y="543.5" ></text>
</g>
<g >
<title>void boost::sp_adl_block::intrusive_ptr_release&lt;DB::IColumn, boost::sp_adl_block::thread_safe_counter&gt; (20,202,020 samples, 1.03%)</title><rect x="399.3" y="757" width="12.1" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="402.28" y="767.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::~list (10,101,010 samples, 0.52%)</title><rect x="34.3" y="485" width="6.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="37.33" y="495.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="782.5" y="357" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="785.47" y="367.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::SerializationSparse, std::__1::allocator&lt;DB::SerializationSparse&gt; &gt;::_Storage::__get_elem (10,101,010 samples, 0.52%)</title><rect x="703.4" y="677" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="706.40" y="687.5" ></text>
</g>
<g >
<title>DB::ColumnWithTypeAndName::~ColumnWithTypeAndName (10,101,010 samples, 0.52%)</title><rect x="581.8" y="789" width="6.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="584.75" y="799.5" ></text>
</g>
<g >
<title>DB::ExpressionTransform::~ExpressionTransform (50,505,050 samples, 2.58%)</title><rect x="837.2" y="629" width="30.4" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="840.22" y="639.5" >DB..</text>
</g>
<g >
<title>std::__1::__optional_move_assign_base&lt;DB::StatisticDescription, false&gt;::__optional_move_assign_base[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="934.5" y="709" width="6.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="937.54" y="719.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="812.9" y="213" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="815.89" y="223.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="565" width="6.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1174.75" y="575.5" ></text>
</g>
<g >
<title>DB::IMergeTreeReader::getSerializationInPart (50,505,050 samples, 2.58%)</title><rect x="600.0" y="805" width="30.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="603.00" y="815.5" >DB..</text>
</g>
<g >
<title>cache_bin_init_ptr_array_for_fill (10,101,010 samples, 0.52%)</title><rect x="563.5" y="469" width="6.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="566.51" y="479.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::destroy[abi:v15000]&lt;DB::ColumnWithTypeAndName, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="58.7" y="917" width="12.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="61.66" y="927.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="508.8" y="565" width="6.0" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="511.76" y="575.5" ></text>
</g>
<g >
<title>operator new (30,303,030 samples, 1.55%)</title><rect x="715.6" y="629" width="18.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="718.57" y="639.5" ></text>
</g>
<g >
<title>Poco::JSON::Object::~Object (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="677" width="6.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1040.94" y="687.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="52.6" y="933" width="6.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="55.58" y="943.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="289.8" y="901" width="6.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="292.79" y="911.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="861.5" y="229" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="864.55" y="239.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="904.1" y="469" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="907.12" y="479.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="581" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1120.01" y="591.5" ></text>
</g>
<g >
<title>DB::IProcessor::~IProcessor (50,505,050 samples, 2.58%)</title><rect x="837.2" y="597" width="30.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="840.22" y="607.5" >DB..</text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="1104.8" y="533" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1107.85" y="543.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="812.9" y="341" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="815.89" y="351.5" ></text>
</g>
<g >
<title>ivsalloc (10,101,010 samples, 0.52%)</title><rect x="849.4" y="277" width="6.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="852.38" y="287.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="581.8" y="757" width="6.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="584.75" y="767.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="168.1" y="453" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="171.14" y="463.5" ></text>
</g>
<g >
<title>std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator (10,101,010 samples, 0.52%)</title><rect x="533.1" y="725" width="6.1" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="536.09" y="735.5" ></text>
</g>
<g >
<title>tsdn_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="326.3" y="101" width="6.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="329.29" y="111.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="1104.8" y="469" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1107.85" y="479.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="867.6" y="357" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="870.63" y="367.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init_copy_ctor_external (20,202,020 samples, 1.03%)</title><rect x="277.6" y="805" width="12.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="280.63" y="815.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="782.5" y="405" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="785.47" y="415.5" ></text>
</g>
<g >
<title>std::__1::__function::__default_alloc_func&lt;DB::MergeTreeReaderCompactSingleBuffer::readRows (10,101,010 samples, 0.52%)</title><rect x="752.1" y="789" width="6.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="755.06" y="799.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="697.3" y="597" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="700.32" y="607.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="131.6" y="773" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="134.65" y="783.5" ></text>
</g>
<g >
<title>tsd_tcache_gc_dalloc_event_wait_get (10,101,010 samples, 0.52%)</title><rect x="910.2" y="53" width="6.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="913.21" y="63.5" ></text>
</g>
<g >
<title>te_event_advance (20,202,020 samples, 1.03%)</title><rect x="569.6" y="629" width="12.2" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="572.59" y="639.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="873.7" y="261" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="876.71" y="271.5" ></text>
</g>
<g >
<title>DB::ColumnsDescription::add (30,303,030 samples, 1.55%)</title><rect x="922.4" y="917" width="18.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="925.37" y="927.5" ></text>
</g>
<g >
<title>tcache_bin_flush_match (10,101,010 samples, 0.52%)</title><rect x="587.8" y="421" width="6.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="590.84" y="431.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;unsigned long&gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="302.0" y="837" width="6.0" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="304.96" y="847.5" ></text>
</g>
<g >
<title>tsd_state_get (10,101,010 samples, 0.52%)</title><rect x="624.3" y="405" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="627.33" y="415.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN3COWIN2DB7IColumnEE13immutable_ptrIS3_EETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS8_ (10,101,010 samples, 0.52%)</title><rect x="441.9" y="757" width="6.0" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="444.86" y="767.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB15NameAndTypePairETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="34.3" y="421" width="6.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="37.33" y="431.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="977.1" y="709" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="980.11" y="719.5" ></text>
</g>
<g >
<title>tcache_alloc_small_hard (20,202,020 samples, 1.03%)</title><rect x="368.9" y="645" width="12.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="371.87" y="655.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::CheckSortedTransform, std::__1::allocator&lt;DB::CheckSortedTransform&gt; &gt;::__on_zero_shared (80,808,080 samples, 4.12%)</title><rect x="788.6" y="693" width="48.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="791.56" y="703.5" >std:..</text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="125.6" y="613" width="6.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="128.57" y="623.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB10OutputPortETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="910.2" y="517" width="6.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="913.21" y="527.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__deallocate_node (20,202,020 samples, 1.03%)</title><rect x="867.6" y="405" width="12.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="870.63" y="415.5" ></text>
</g>
<g >
<title>sallocx (10,101,010 samples, 0.52%)</title><rect x="143.8" y="725" width="6.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="146.81" y="735.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="946.7" y="821" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="949.70" y="831.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::OutputPort, std::__1::allocator&lt;DB::OutputPort&gt; &gt;::~__list_imp (40,404,040 samples, 2.06%)</title><rect x="867.6" y="565" width="24.4" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="870.63" y="575.5" >s..</text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="861.5" y="181" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="864.55" y="191.5" ></text>
</g>
<g >
<title>all (1,959,595,940 samples, 100%)</title><rect x="10.0" y="1525" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1535.5" ></text>
</g>
<g >
<title>arena_dalloc (10,101,010 samples, 0.52%)</title><rect x="393.2" y="501" width="6.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="396.20" y="511.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::vector&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt; &gt; &gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::vector&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt; &gt; &gt;, void, void&gt; (222,222,220 samples, 11.34%)</title><rect x="788.6" y="885" width="133.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="791.56" y="895.5" >void std::__1::a..</text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="885.9" y="181" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="888.88" y="191.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;::clone (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="549" width="6.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1010.53" y="559.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="977.1" y="821" width="6.1" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="980.11" y="831.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="514.8" y="645" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="517.85" y="655.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="904.1" y="405" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="907.12" y="415.5" ></text>
</g>
<g >
<title>isdalloct (10,101,010 samples, 0.52%)</title><rect x="618.2" y="613" width="6.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="621.25" y="623.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::__base_destruct_at_end[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1086.6" y="869" width="6.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1089.60" y="879.5" ></text>
</g>
<g >
<title>pac_maybe_decay_purge (10,101,010 samples, 0.52%)</title><rect x="971.0" y="469" width="6.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="974.03" y="479.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="357" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1010.53" y="367.5" ></text>
</g>
<g >
<title>imalloc_fastpath (20,202,020 samples, 1.03%)</title><rect x="423.6" y="677" width="12.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="426.61" y="687.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="971.0" y="741" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="974.03" y="751.5" ></text>
</g>
<g >
<title>DB::CompressedReadBufferFromFile::nextImpl (10,101,010 samples, 0.52%)</title><rect x="654.7" y="757" width="6.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="657.74" y="767.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="520.9" y="533" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="523.93" y="543.5" ></text>
</g>
<g >
<title>std::__1::shared_ptr&lt;DB::MergeTask&gt;::~shared_ptr[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="22.2" y="885" width="18.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="25.16" y="895.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPSB_ (10,101,010 samples, 0.52%)</title><rect x="539.2" y="725" width="6.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="542.18" y="735.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="1098.8" y="389" width="6.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1101.76" y="399.5" ></text>
</g>
<g >
<title>te_ctx_get (10,101,010 samples, 0.52%)</title><rect x="387.1" y="693" width="6.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="390.11" y="703.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__grow_by_and_replace (10,101,010 samples, 0.52%)</title><rect x="168.1" y="661" width="6.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="171.14" y="671.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="247.2" y="693" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="250.22" y="703.5" ></text>
</g>
<g >
<title>witness_assert_depth_to_rank (10,101,010 samples, 0.52%)</title><rect x="825.1" y="309" width="6.0" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="828.05" y="319.5" ></text>
</g>
<g >
<title>imalloc_fastpath (20,202,020 samples, 1.03%)</title><rect x="715.6" y="597" width="12.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="718.57" y="607.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="399.3" y="581" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="402.28" y="591.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="259.4" y="805" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="262.38" y="815.5" ></text>
</g>
<g >
<title>LZ4_compress_default (10,101,010 samples, 0.52%)</title><rect x="192.5" y="805" width="6.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="195.47" y="815.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4Poco7Dynamic3VarEEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPSE_ (10,101,010 samples, 0.52%)</title><rect x="1044.0" y="741" width="6.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1047.02" y="751.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="794.6" y="117" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="797.64" y="127.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="1044.0" y="773" width="6.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1047.02" y="783.5" ></text>
</g>
<g >
<title>std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::find[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="533.1" y="805" width="6.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="536.09" y="815.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::compare[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="952.8" y="789" width="6.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="955.78" y="799.5" ></text>
</g>
<g >
<title>DB::Block::~Block (20,202,020 samples, 1.03%)</title><rect x="892.0" y="437" width="12.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="894.96" y="447.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::__allocate_node[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="901" width="6.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1168.67" y="911.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="28.2" y="197" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="31.25" y="207.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="70.8" y="789" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="73.82" y="799.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="691.2" y="597" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="694.24" y="607.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var* std::__1::__uninitialized_allocator_copy[abi:v15000]&lt;std::__1::allocator&lt;Poco::Dynamic::Var&gt;, Poco::Dynamic::Var*, Poco::Dynamic::Var*, Poco::Dynamic::Var*&gt; (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="677" width="12.1" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1101.76" y="687.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="910.2" y="213" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="913.21" y="223.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="776.4" y="389" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="779.39" y="399.5" ></text>
</g>
<g >
<title>DB::Block::cloneWithColumns (10,101,010 samples, 0.52%)</title><rect x="964.9" y="917" width="6.1" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="967.95" y="927.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__deallocate_node (20,202,020 samples, 1.03%)</title><rect x="806.8" y="405" width="12.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="809.80" y="415.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="469" width="6.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1010.53" y="479.5" ></text>
</g>
<g >
<title>pac_decay_try_purge (10,101,010 samples, 0.52%)</title><rect x="971.0" y="453" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="974.03" y="463.5" ></text>
</g>
<g >
<title>std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;::operator (20,202,020 samples, 1.03%)</title><rect x="679.1" y="741" width="12.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="682.07" y="751.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="332.4" y="389" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="335.37" y="399.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ISerialization::Substream, std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt;::~vector[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="977.1" y="837" width="6.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="980.11" y="847.5" ></text>
</g>
<g >
<title>std::__1::enable_if&lt;__is_cpp17_forward_iterator&lt;Poco::Dynamic::Var*&gt;::value, void&gt;::type std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::__construct_at_end&lt;Poco::Dynamic::Var*&gt; (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="629" width="12.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1028.77" y="639.5" ></text>
</g>
<g >
<title>tcache_alloc_small_hard (10,101,010 samples, 0.52%)</title><rect x="612.2" y="469" width="6.0" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="615.16" y="479.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="958.9" y="773" width="6.0" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="961.87" y="783.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="910.2" y="117" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="913.21" y="127.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.03%)</title><rect x="606.1" y="629" width="12.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="609.08" y="639.5" ></text>
</g>
<g >
<title>realloc (70,707,070 samples, 3.61%)</title><rect x="350.6" y="757" width="42.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="353.62" y="767.5" >real..</text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::MergeTreeSequentialSource&gt; &gt;::destroy[abi:v15000]&lt;DB::MergeTreeSequentialSource, void, void&gt; (40,404,040 samples, 2.06%)</title><rect x="867.6" y="677" width="24.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="870.63" y="687.5" >v..</text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN4Poco7Dynamic3VarETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS5_ (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="789" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1065.27" y="799.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::~list (30,303,030 samples, 1.55%)</title><rect x="484.4" y="805" width="18.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="487.43" y="815.5" ></text>
</g>
<g >
<title>te_next_event_compute (10,101,010 samples, 0.52%)</title><rect x="812.9" y="165" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="815.89" y="175.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::destroy (30,303,030 samples, 1.55%)</title><rect x="1135.3" y="869" width="18.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1138.26" y="879.5" ></text>
</g>
<g >
<title>sz_size2index_lookup (10,101,010 samples, 0.52%)</title><rect x="697.3" y="517" width="6.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="700.32" y="527.5" ></text>
</g>
<g >
<title>sz_size2index_lookup (10,101,010 samples, 0.52%)</title><rect x="64.7" y="741" width="6.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="67.74" y="751.5" ></text>
</g>
<g >
<title>DB::Block::~Block (10,101,010 samples, 0.52%)</title><rect x="28.2" y="405" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="31.25" y="415.5" ></text>
</g>
<g >
<title>sallocx (10,101,010 samples, 0.52%)</title><rect x="40.4" y="821" width="6.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="43.41" y="831.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::realloc&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="137.7" y="885" width="6.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="140.73" y="895.5" ></text>
</g>
<g >
<title>arena_salloc (10,101,010 samples, 0.52%)</title><rect x="496.6" y="469" width="6.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="499.60" y="479.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::OutputPort, std::__1::allocator&lt;DB::OutputPort&gt; &gt;::~list (30,303,030 samples, 1.55%)</title><rect x="849.4" y="581" width="18.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="852.38" y="591.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPSB_ (10,101,010 samples, 0.52%)</title><rect x="873.7" y="373" width="6.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="876.71" y="383.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.52%)</title><rect x="624.3" y="773" width="6.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="627.33" y="783.5" ></text>
</g>
<g >
<title>emap_alloc_ctx_try_lookup_fast (10,101,010 samples, 0.52%)</title><rect x="441.9" y="565" width="6.0" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="444.86" y="575.5" ></text>
</g>
<g >
<title>tsdn_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="411.4" y="709" width="6.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="414.44" y="719.5" ></text>
</g>
<g >
<title>sz_s2u (10,101,010 samples, 0.52%)</title><rect x="697.3" y="549" width="6.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="700.32" y="559.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::~ColumnVector (20,202,020 samples, 1.03%)</title><rect x="825.1" y="453" width="12.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="828.05" y="463.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::Var (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="885" width="6.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1095.68" y="895.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__emplace_unique_key_args&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="454.0" y="773" width="12.2" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="457.02" y="783.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__hash_map_iterator&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt; &gt;, bool&gt; std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::emplace[abi:v15000]&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, unsigned long&amp;&gt; (20,202,020 samples, 1.03%)</title><rect x="247.2" y="901" width="12.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="250.22" y="911.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="618.2" y="677" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="621.25" y="687.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="837" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1168.67" y="847.5" ></text>
</g>
<g >
<title>std::__1::unique_ptr&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;, std::__1::__tree_node_destructor&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt; &gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__construct_node&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; const&amp;&gt; (30,303,030 samples, 1.55%)</title><rect x="1019.7" y="789" width="18.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1022.69" y="799.5" ></text>
</g>
<g >
<title>tcache_alloc_small (10,101,010 samples, 0.52%)</title><rect x="612.2" y="485" width="6.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="615.16" y="495.5" ></text>
</g>
<g >
<title>ph_try_aux_merge_pair (10,101,010 samples, 0.52%)</title><rect x="338.5" y="341" width="6.0" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="341.45" y="351.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="277" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1059.19" y="287.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__insert_unique[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="597" width="6.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1095.68" y="607.5" ></text>
</g>
<g >
<title>eset_first_fit (10,101,010 samples, 0.52%)</title><rect x="593.9" y="309" width="6.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="596.92" y="319.5" ></text>
</g>
<g >
<title>std::__1::__function::__policy_func&lt;void  (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1365" width="12.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="13.00" y="1375.5" ></text>
</g>
<g >
<title>decltype  (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1109" width="1161.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="25.16" y="1119.5" >decltype </text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;DB::NameAndTypePair, void*&gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="22.2" y="565" width="6.0" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="25.16" y="575.5" ></text>
</g>
<g >
<title>tsd_reentrancy_levelp_get (10,101,010 samples, 0.52%)</title><rect x="356.7" y="693" width="6.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="359.70" y="703.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::__base_destruct_at_end[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="773" width="6.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1120.01" y="783.5" ></text>
</g>
<g >
<title>arena_salloc (10,101,010 samples, 0.52%)</title><rect x="429.7" y="597" width="6.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="432.69" y="607.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="733.8" y="565" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="736.81" y="575.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="812.9" y="389" width="6.1" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="815.89" y="399.5" ></text>
</g>
<g >
<title>AllocatorWithMemoryTracking&lt;DB::ExecutingGraph::Node*&gt;::allocate (10,101,010 samples, 0.52%)</title><rect x="295.9" y="837" width="6.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="298.88" y="847.5" ></text>
</g>
<g >
<title>_ZNSt3__16__copyB6v15000IPKcS2_PcTnNS_9enable_ifIXaaaasr21is_copy_constructibleIT_EE5valuesr21is_copy_constructibleIT0_EE5valuesr21is_copy_constructibleIT1_EE5valueEiE4typeELi0EEENS_4pairIS5_S7_EES5_S6_S7_ (10,101,010 samples, 0.52%)</title><rect x="1153.5" y="629" width="6.1" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1156.51" y="639.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;* std::__1::construct_at[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, unsigned long, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;*&gt; (20,202,020 samples, 1.03%)</title><rect x="277.6" y="853" width="12.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="280.63" y="863.5" ></text>
</g>
<g >
<title>inallocx (10,101,010 samples, 0.52%)</title><rect x="940.6" y="741" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="943.62" y="751.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="545.3" y="645" width="6.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="548.26" y="655.5" ></text>
</g>
<g >
<title>tsd_thread_allocated_last_eventp_get (10,101,010 samples, 0.52%)</title><rect x="131.6" y="565" width="6.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="134.65" y="575.5" ></text>
</g>
<g >
<title>witness_assert_depth_to_rank (10,101,010 samples, 0.52%)</title><rect x="52.6" y="661" width="6.1" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="55.58" y="671.5" ></text>
</g>
<g >
<title>sz_s2u_lookup (10,101,010 samples, 0.52%)</title><rect x="697.3" y="533" width="6.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="700.32" y="543.5" ></text>
</g>
<g >
<title>DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::alloc_for_num_elements (10,101,010 samples, 0.52%)</title><rect x="83.0" y="837" width="6.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="85.99" y="847.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate_at_least[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="964.9" y="821" width="6.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="967.95" y="831.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="539.2" y="645" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="542.18" y="655.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="922.4" y="709" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="925.37" y="719.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::operator+=[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="168.1" y="709" width="6.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="171.14" y="719.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="964.9" y="805" width="6.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="967.95" y="815.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="168.1" y="565" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="171.14" y="575.5" ></text>
</g>
<g >
<title>large_dalloc_finish_impl (10,101,010 samples, 0.52%)</title><rect x="52.6" y="741" width="6.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="55.58" y="751.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate_at_least[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="624.3" y="709" width="6.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="627.33" y="719.5" ></text>
</g>
<g >
<title>arena_dalloc_bin_locked_step (10,101,010 samples, 0.52%)</title><rect x="338.5" y="421" width="6.0" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="341.45" y="431.5" ></text>
</g>
<g >
<title>DB::IHashingBuffer&lt;DB::WriteBuffer&gt;::calculateHash (20,202,020 samples, 1.03%)</title><rect x="180.3" y="869" width="12.2" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="183.31" y="879.5" ></text>
</g>
<g >
<title>DB::MergeTreeSequentialSource::finish (50,505,050 samples, 2.58%)</title><rect x="758.1" y="837" width="30.5" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="761.14" y="847.5" >DB..</text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="373" width="6.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1059.19" y="383.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::clear (10,101,010 samples, 0.52%)</title><rect x="34.3" y="453" width="6.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="37.33" y="463.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="892.0" y="293" width="6.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="894.96" y="303.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="453" width="6.1" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="1010.53" y="463.5" ></text>
</g>
<g >
<title>DB::Port::~Port (40,404,040 samples, 2.06%)</title><rect x="867.6" y="469" width="24.4" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="870.63" y="479.5" >D..</text>
</g>
<g >
<title>Poco::Dynamic::Var::destruct (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="741" width="6.0" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1138.26" y="751.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="776.4" y="549" width="6.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="779.39" y="559.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::PullingOutputFormat, std::__1::allocator&lt;DB::PullingOutputFormat&gt; &gt;::__on_zero_shared (10,101,010 samples, 0.52%)</title><rect x="916.3" y="693" width="6.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="919.29" y="703.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="788.6" y="389" width="12.1" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="791.56" y="399.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="549" width="6.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1120.01" y="559.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="757" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1168.67" y="767.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB10NullSourceETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="910.2" y="661" width="6.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="913.21" y="671.5" ></text>
</g>
<g >
<title>witness_assert_lockless (10,101,010 samples, 0.52%)</title><rect x="922.4" y="693" width="6.1" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="925.37" y="703.5" ></text>
</g>
<g >
<title>te_ctx_get (10,101,010 samples, 0.52%)</title><rect x="1074.4" y="405" width="6.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1077.43" y="415.5" ></text>
</g>
<g >
<title>pac_alloc_real (10,101,010 samples, 0.52%)</title><rect x="344.5" y="549" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="347.54" y="559.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::compare[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1001.4" y="773" width="6.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1004.44" y="783.5" ></text>
</g>
<g >
<title>DB::MergeTask::ExecuteAndFinalizeHorizontalPart::execute (1,464,646,450 samples, 74.74%)</title><rect x="40.4" y="1013" width="882.0" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="43.41" y="1023.5" >DB::MergeTask::ExecuteAndFinalizeHorizontalPart::execute</text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;DB::InputPort, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;DB::InputPort, void, void&gt; (30,303,030 samples, 1.55%)</title><rect x="788.6" y="533" width="18.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="791.56" y="543.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::destruct (40,404,040 samples, 2.06%)</title><rect x="1037.9" y="901" width="24.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1040.94" y="911.5" >P..</text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::__clear[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1086.6" y="885" width="6.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1089.60" y="895.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__insert_unique[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="661" width="12.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1010.53" y="671.5" ></text>
</g>
<g >
<title>DB::IColumn::cloneEmpty (10,101,010 samples, 0.52%)</title><rect x="70.8" y="901" width="6.1" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="73.82" y="911.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="125.6" y="597" width="6.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="128.57" y="607.5" ></text>
</g>
<g >
<title>void* (anonymous namespace)::allocNoTrack&lt;false, false&gt; (20,202,020 samples, 1.03%)</title><rect x="423.6" y="709" width="12.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="426.61" y="719.5" ></text>
</g>
<g >
<title>DB::MergeTreeDataPartWriterCompact::ColumnsBuffer::add (10,101,010 samples, 0.52%)</title><rect x="137.7" y="933" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="140.73" y="943.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.03%)</title><rect x="1074.4" y="565" width="12.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1077.43" y="575.5" ></text>
</g>
<g >
<title>tcache_assert_initialized (10,101,010 samples, 0.52%)</title><rect x="320.2" y="485" width="6.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="323.21" y="495.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="417.5" y="709" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="420.53" y="719.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="277.6" y="725" width="12.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="280.63" y="735.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::__clear[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="677" width="12.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1144.34" y="687.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="174.2" y="597" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="177.23" y="607.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="922.4" y="725" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="925.37" y="735.5" ></text>
</g>
<g >
<title>DB::MergeTreeReaderCompact::readData (151,515,150 samples, 7.73%)</title><rect x="600.0" y="821" width="91.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="603.00" y="831.5" >DB::MergeT..</text>
</g>
<g >
<title>DB::CheckSortedTransform::transform (171,717,170 samples, 8.76%)</title><rect x="344.5" y="853" width="103.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="347.54" y="863.5" >DB::CheckSor..</text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate_at_least[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="472.3" y="645" width="12.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="475.27" y="655.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="389" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1010.53" y="399.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__emplace_unique_key_args&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="869" width="12.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1101.76" y="879.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="28.2" y="213" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="31.25" y="223.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="879.8" y="165" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="882.79" y="175.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="861.5" y="197" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="864.55" y="207.5" ></text>
</g>
<g >
<title>edata_cache_put (10,101,010 samples, 0.52%)</title><rect x="326.3" y="133" width="6.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="329.29" y="143.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="916.3" y="389" width="6.1" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="919.29" y="399.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init_copy_ctor_external (10,101,010 samples, 0.52%)</title><rect x="958.9" y="805" width="6.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="961.87" y="815.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="131.6" y="613" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="134.65" y="623.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="460.1" y="661" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="463.10" y="671.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="52.6" y="901" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="55.58" y="911.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="1074.4" y="453" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1077.43" y="463.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="399.3" y="597" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="402.28" y="607.5" ></text>
</g>
<g >
<title>Poco::toJSON (10,101,010 samples, 0.52%)</title><rect x="1153.5" y="757" width="6.1" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1156.51" y="767.5" ></text>
</g>
<g >
<title>DB::Block::~Block (60,606,060 samples, 3.09%)</title><rect x="101.2" y="933" width="36.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="104.24" y="943.5" >DB:..</text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init_copy_ctor_external (10,101,010 samples, 0.52%)</title><rect x="642.6" y="773" width="6.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="645.58" y="783.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="831.1" y="277" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="834.13" y="287.5" ></text>
</g>
<g >
<title>rtree_leaf_elm_lookup (10,101,010 samples, 0.52%)</title><rect x="1050.1" y="309" width="6.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1053.10" y="319.5" ></text>
</g>
<g >
<title>DB::Port::~Port (20,202,020 samples, 1.03%)</title><rect x="837.2" y="469" width="12.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="840.22" y="479.5" ></text>
</g>
<g >
<title>sz_s2u (10,101,010 samples, 0.52%)</title><rect x="940.6" y="709" width="6.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="943.62" y="719.5" ></text>
</g>
<g >
<title>DB::MergePlainMergeTreeTask::executeStep (1,919,191,900 samples, 97.94%)</title><rect x="22.2" y="1045" width="1155.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="25.16" y="1055.5" >DB::MergePlainMergeTreeTask::executeStep</text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="508.8" y="645" width="6.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="511.76" y="655.5" ></text>
</g>
<g >
<title>std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;::operator (10,101,010 samples, 0.52%)</title><rect x="1001.4" y="821" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1004.44" y="831.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__base_destruct_at_end[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="910.2" y="405" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="913.21" y="415.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init_copy_ctor_external (30,303,030 samples, 1.55%)</title><rect x="715.6" y="741" width="18.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="718.57" y="751.5" ></text>
</g>
<g >
<title>pai_alloc (10,101,010 samples, 0.52%)</title><rect x="302.0" y="565" width="6.0" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="304.96" y="575.5" ></text>
</g>
<g >
<title>std::__1::__deque_base&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt;, std::__1::allocator&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt; &gt; &gt;::~__deque_base (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="645" width="6.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1040.94" y="655.5" ></text>
</g>
<g >
<title>tsdn_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="289.8" y="741" width="6.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="292.79" y="751.5" ></text>
</g>
<g >
<title>rtree_metadata_read (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="389" width="6.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1065.27" y="399.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="788.6" y="245" width="12.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="791.56" y="255.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="1019.7" y="725" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1022.69" y="735.5" ></text>
</g>
<g >
<title>DB::IMergeTreeReader::~IMergeTreeReader (50,505,050 samples, 2.58%)</title><rect x="758.1" y="741" width="30.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="761.14" y="751.5" >DB..</text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::ColumnSparse&gt; DB::ColumnSparse::create&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="587.8" y="789" width="12.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="590.84" y="799.5" ></text>
</g>
<g >
<title>ecache_alloc (10,101,010 samples, 0.52%)</title><rect x="344.5" y="533" width="6.1" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="347.54" y="543.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="52.6" y="837" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="55.58" y="847.5" ></text>
</g>
<g >
<title>DB::MergedBlockOutputStream::finalizePartAsync (424,242,420 samples, 21.65%)</title><rect x="922.4" y="965" width="255.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="925.37" y="975.5" >DB::MergedBlockOutputStream::final..</text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__insert_unique[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1098.8" y="501" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1101.76" y="511.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="405.4" y="709" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="408.36" y="719.5" ></text>
</g>
<g >
<title>DB::NameAndTypePair::~NameAndTypePair (10,101,010 samples, 0.52%)</title><rect x="496.6" y="709" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="499.60" y="719.5" ></text>
</g>
<g >
<title>tsd_peak_alloc_event_wait_get (10,101,010 samples, 0.52%)</title><rect x="1129.2" y="661" width="6.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1132.18" y="671.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="776.4" y="341" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="779.39" y="351.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (20,202,020 samples, 1.03%)</title><rect x="739.9" y="789" width="12.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="742.90" y="799.5" ></text>
</g>
<g >
<title>witness_assert_lockless (10,101,010 samples, 0.52%)</title><rect x="113.4" y="709" width="6.1" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="116.40" y="719.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="885.9" y="149" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="888.88" y="159.5" ></text>
</g>
<g >
<title>tsdn_null (10,101,010 samples, 0.52%)</title><rect x="1098.8" y="341" width="6.0" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1101.76" y="351.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="624.3" y="565" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="627.33" y="575.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;::~vector[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="819.0" y="613" width="18.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="821.97" y="623.5" ></text>
</g>
<g >
<title>DB::ISimpleTransform::transform (212,121,210 samples, 10.82%)</title><rect x="344.5" y="869" width="127.8" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="347.54" y="879.5" >DB::ISimpleTrans..</text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="904.1" y="373" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="907.12" y="383.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;unsigned long&gt;::~VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1044.0" y="677" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1047.02" y="687.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt; &gt; &gt;::~vector[abi:v15000] (222,222,220 samples, 11.34%)</title><rect x="788.6" y="837" width="133.8" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="791.56" y="847.5" >std::__1::vector..</text>
</g>
<g >
<title>ctl_arena_stats_amerge (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1077" width="12.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="13.00" y="1087.5" ></text>
</g>
<g >
<title>free (10,101,010 samples, 0.52%)</title><rect x="58.7" y="709" width="6.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="61.66" y="719.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="34.3" y="309" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="37.33" y="319.5" ></text>
</g>
<g >
<title>void boost::sp_adl_block::intrusive_ptr_release&lt;DB::IColumn, boost::sp_adl_block::thread_safe_counter&gt; (10,101,010 samples, 0.52%)</title><rect x="393.2" y="773" width="6.1" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="396.20" y="783.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (20,202,020 samples, 1.03%)</title><rect x="788.6" y="325" width="12.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="791.56" y="335.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::destruct (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="581" width="12.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1144.34" y="591.5" ></text>
</g>
<g >
<title>arena_vsalloc (10,101,010 samples, 0.52%)</title><rect x="484.4" y="629" width="6.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="487.43" y="639.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="453" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1120.01" y="463.5" ></text>
</g>
<g >
<title>std::__1::unique_ptr&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;, std::__1::__hash_node_destructor&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt; &gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__construct_node_hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, unsigned long&amp;&gt; (20,202,020 samples, 1.03%)</title><rect x="247.2" y="853" width="12.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="250.22" y="863.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="764.2" y="645" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="767.23" y="655.5" ></text>
</g>
<g >
<title>DB::MergeTask::GlobalRuntimeContext::~GlobalRuntimeContext (30,303,030 samples, 1.55%)</title><rect x="22.2" y="645" width="18.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="25.16" y="655.5" ></text>
</g>
<g >
<title>ctl_refresh (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1109" width="12.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.00" y="1119.5" ></text>
</g>
<g >
<title>Poco::JSON::Object::Object (30,303,030 samples, 1.55%)</title><rect x="1019.7" y="885" width="18.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1022.69" y="895.5" ></text>
</g>
<g >
<title>tcache_bin_flush_bottom (10,101,010 samples, 0.52%)</title><rect x="587.8" y="437" width="6.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="590.84" y="447.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;long&gt;::insertFrom (10,101,010 samples, 0.52%)</title><rect x="344.5" y="837" width="6.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="347.54" y="847.5" ></text>
</g>
<g >
<title>pthread_cond_signal@@GLIBC_2.3.2 (10,101,010 samples, 0.52%)</title><rect x="1177.8" y="997" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1180.84" y="1007.5" ></text>
</g>
<g >
<title>imalloc_no_sample (10,101,010 samples, 0.52%)</title><rect x="70.8" y="757" width="6.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="73.82" y="767.5" ></text>
</g>
<g >
<title>tsdn_null (10,101,010 samples, 0.52%)</title><rect x="618.2" y="581" width="6.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="621.25" y="591.5" ></text>
</g>
<g >
<title>tsd_peak_alloc_event_waitp_get (10,101,010 samples, 0.52%)</title><rect x="22.2" y="293" width="6.0" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="25.16" y="303.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="971.0" y="725" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="974.03" y="735.5" ></text>
</g>
<g >
<title>std::__1::function&lt;void  (30,303,030 samples, 1.55%)</title><rect x="22.2" y="1013" width="18.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="25.16" y="1023.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::insert[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="901" width="12.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1101.76" y="911.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="539.2" y="677" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="542.18" y="687.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN4Poco7Dynamic3VarETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS5_ (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="773" width="6.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1065.27" y="783.5" ></text>
</g>
<g >
<title>prof_sample_aligned (10,101,010 samples, 0.52%)</title><rect x="746.0" y="629" width="6.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="748.98" y="639.5" ></text>
</g>
<g >
<title>sz_size2index_compute (10,101,010 samples, 0.52%)</title><rect x="782.5" y="293" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="785.47" y="303.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="289.8" y="853" width="6.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="292.79" y="863.5" ></text>
</g>
<g >
<title>std::__1::__function::__default_alloc_func&lt;DB::MergeTreeDataPartWriterCompact::writeDataBlock (10,101,010 samples, 0.52%)</title><rect x="989.3" y="837" width="6.1" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="992.28" y="847.5" ></text>
</g>
<g >
<title>tsdn_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="539.2" y="517" width="6.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="542.18" y="527.5" ></text>
</g>
<g >
<title>edata_base_get (10,101,010 samples, 0.52%)</title><rect x="302.0" y="389" width="6.0" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="304.96" y="399.5" ></text>
</g>
<g >
<title>void std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::__assign_multi&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, void*&gt;*, long&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="952.8" y="885" width="6.1" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="955.78" y="895.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__list_node&lt;DB::NameAndTypePair, void*&gt; &gt;::deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="484.4" y="741" width="12.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="487.43" y="751.5" ></text>
</g>
<g >
<title>tsd_fetch_slow (10,101,010 samples, 0.52%)</title><rect x="143.8" y="677" width="6.1" height="15.0" fill="rgb(249,204,49)" rx="2" ry="2" />
<text  x="146.81" y="687.5" ></text>
</g>
<g >
<title>boost::multi_index::detail::sequenced_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;DB::ColumnDescription, std::__1::allocator&lt;DB::ColumnDescription&gt; &gt; &gt; &gt;* boost::multi_index::detail::ordered_index_impl&lt;boost::multi_index::member&lt;DB::ColumnDescription, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, &amp;DB::ColumnDescription::name&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, boost::multi_index::detail::nth_layer&lt;2, DB::ColumnDescription, boost::multi_index::indexed_by&lt;boost::multi_index::sequenced&lt;boost::multi_index::tag&lt;mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt; &gt;, boost::multi_index::ordered_unique&lt;boost::multi_index::member&lt;DB::ColumnDescription, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, &amp;DB::ColumnDescription::name&gt;, mpl_::na, mpl_::na&gt;, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt;, std::__1::allocator&lt;DB::ColumnDescription&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt;, boost::multi_index::detail::ordered_unique_tag, boost::multi_index::detail::null_augment_policy&gt;::insert_&lt;boost::multi_index::detail::rvalue_tag&gt; (10,101,010 samples, 0.52%)</title><rect x="934.5" y="821" width="6.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="937.54" y="831.5" ></text>
</g>
<g >
<title>std::__1::__optional_copy_base&lt;DB::StatisticDescription, false&gt;::__optional_copy_base[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="934.5" y="661" width="6.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="937.54" y="671.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="131.6" y="645" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="134.65" y="655.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::destroy[abi:v15000]&lt;Poco::Dynamic::Var, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="757" width="6.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1120.01" y="767.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Array&gt;::~VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="869" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1040.94" y="879.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="624.3" y="661" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="627.33" y="671.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="727.7" y="613" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="730.73" y="623.5" ></text>
</g>
<g >
<title>DB::IMergingTransform&lt;DB::MergingSortedAlgorithm&gt;::~IMergingTransform (30,303,030 samples, 1.55%)</title><rect x="892.0" y="613" width="18.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="894.96" y="623.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::realloc (10,101,010 samples, 0.52%)</title><rect x="435.8" y="709" width="6.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="438.77" y="719.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::map[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="1019.7" y="869" width="18.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1022.69" y="879.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="764.2" y="517" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="767.23" y="527.5" ></text>
</g>
<g >
<title>arena_sdalloc (10,101,010 samples, 0.52%)</title><rect x="338.5" y="501" width="6.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="341.45" y="511.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="320.2" y="581" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="323.21" y="591.5" ></text>
</g>
<g >
<title>std::__1::unique_ptr&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;, std::__1::__hash_node_destructor&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt; &gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__construct_node_hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="277.6" y="885" width="12.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="280.63" y="895.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::insert[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1074.4" y="693" width="12.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1077.43" y="703.5" ></text>
</g>
<g >
<title>DB::MergeTreeReaderCompactSingleBuffer::~MergeTreeReaderCompactSingleBuffer (50,505,050 samples, 2.58%)</title><rect x="758.1" y="773" width="30.5" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="761.14" y="783.5" >DB..</text>
</g>
<g >
<title>peak_dalloc_event_wait_get (10,101,010 samples, 0.52%)</title><rect x="904.1" y="277" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="907.12" y="287.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="28.2" y="181" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="31.25" y="191.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::InputPort, std::__1::allocator&lt;DB::InputPort&gt; &gt;::~__list_imp (30,303,030 samples, 1.55%)</title><rect x="788.6" y="565" width="18.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="791.56" y="575.5" ></text>
</g>
<g >
<title>isdalloct (10,101,010 samples, 0.52%)</title><rect x="971.0" y="629" width="6.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="974.03" y="639.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::~__hash_table (10,101,010 samples, 0.52%)</title><rect x="28.2" y="373" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="31.25" y="383.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;DB::NameAndTypePair, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;DB::NameAndTypePair, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="34.3" y="437" width="6.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="37.33" y="447.5" ></text>
</g>
<g >
<title>sz_size2index_compute (10,101,010 samples, 0.52%)</title><rect x="977.1" y="613" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="980.11" y="623.5" ></text>
</g>
<g >
<title>DB::AsynchronousMetrics::run (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1205" width="12.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="13.00" y="1215.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::destroy[abi:v15000]&lt;DB::ColumnWithTypeAndName, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="800.7" y="389" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="803.72" y="399.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="485" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1120.01" y="495.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt; &gt; &gt;::~__tree (20,202,020 samples, 1.03%)</title><rect x="770.3" y="709" width="12.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="773.31" y="719.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="22.2" y="453" width="6.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="25.16" y="463.5" ></text>
</g>
<g >
<title>long std::__1::__libcpp_atomic_refcount_increment[abi:v15000]&lt;long&gt; (10,101,010 samples, 0.52%)</title><rect x="502.7" y="661" width="6.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="505.68" y="671.5" ></text>
</g>
<g >
<title>DB::PipelineExecutor::executeStep (818,181,810 samples, 41.75%)</title><rect x="295.9" y="949" width="492.7" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="298.88" y="959.5" >DB::PipelineExecutor::executeStep</text>
</g>
<g >
<title>tcache_available (10,101,010 samples, 0.52%)</title><rect x="28.2" y="101" width="6.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="31.25" y="111.5" ></text>
</g>
<g >
<title>DB::PullingOutputFormat::~PullingOutputFormat (10,101,010 samples, 0.52%)</title><rect x="916.3" y="629" width="6.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="919.29" y="639.5" ></text>
</g>
<g >
<title>try_to_wake_up (10,101,010 samples, 0.52%)</title><rect x="1177.8" y="869" width="6.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1180.84" y="879.5" ></text>
</g>
<g >
<title>DB::PullingPipelineExecutor::pull (848,484,840 samples, 43.30%)</title><rect x="277.6" y="981" width="511.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="280.63" y="991.5" >DB::PullingPipelineExecutor::pull</text>
</g>
<g >
<title>DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::dealloc (10,101,010 samples, 0.52%)</title><rect x="441.9" y="629" width="6.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="444.86" y="639.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;long&gt;::insertFrom (10,101,010 samples, 0.52%)</title><rect x="435.8" y="773" width="6.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="438.77" y="783.5" ></text>
</g>
<g >
<title>std::__1::unique_ptr&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;, std::__1::__tree_node_destructor&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt; &gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__construct_node&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; const&amp;&gt; (10,101,010 samples, 0.52%)</title><rect x="1031.9" y="405" width="6.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1034.86" y="415.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::free (20,202,020 samples, 1.03%)</title><rect x="825.1" y="389" width="12.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="828.05" y="399.5" ></text>
</g>
<g >
<title>arena_stats_merge (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1061" width="12.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="13.00" y="1071.5" ></text>
</g>
<g >
<title>tsdn_tsd (10,101,010 samples, 0.52%)</title><rect x="1019.7" y="677" width="6.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1022.69" y="687.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::~vector[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="645" width="12.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1053.10" y="655.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::~__hash_table (10,101,010 samples, 0.52%)</title><rect x="892.0" y="405" width="6.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="894.96" y="415.5" ></text>
</g>
<g >
<title>tcache_alloc_small (10,101,010 samples, 0.52%)</title><rect x="563.5" y="517" width="6.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="566.51" y="527.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::realloc (70,707,070 samples, 3.61%)</title><rect x="350.6" y="773" width="42.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="353.62" y="783.5" >Allo..</text>
</g>
<g >
<title>DB::InputPort::~InputPort (20,202,020 samples, 1.03%)</title><rect x="892.0" y="469" width="12.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="894.96" y="479.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;::pair (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="581" width="12.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1010.53" y="591.5" ></text>
</g>
<g >
<title>DB::MergeTreeDataPartWriterCompact::~MergeTreeDataPartWriterCompact (10,101,010 samples, 0.52%)</title><rect x="28.2" y="421" width="6.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="31.25" y="431.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="916.3" y="277" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="919.29" y="287.5" ></text>
</g>
<g >
<title>arena_sdalloc (10,101,010 samples, 0.52%)</title><rect x="618.2" y="597" width="6.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="621.25" y="607.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__insert_unique[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1074.4" y="677" width="12.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1077.43" y="687.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="940.6" y="869" width="6.1" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="943.62" y="879.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="727.7" y="597" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="730.73" y="607.5" ></text>
</g>
<g >
<title>te_assert_invariants (20,202,020 samples, 1.03%)</title><rect x="569.6" y="613" width="12.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="572.59" y="623.5" ></text>
</g>
<g >
<title>tcache_bin_flush_impl (10,101,010 samples, 0.52%)</title><rect x="326.3" y="373" width="6.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="329.29" y="383.5" ></text>
</g>
<g >
<title>DB::Block::~Block (10,101,010 samples, 0.52%)</title><rect x="916.3" y="453" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="919.29" y="463.5" ></text>
</g>
<g >
<title>void DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::push_back&lt;unsigned long const&amp;&gt; (70,707,070 samples, 3.61%)</title><rect x="350.6" y="821" width="42.6" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="353.62" y="831.5" >void..</text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="527.0" y="629" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="530.01" y="639.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN3COWIN2DB7IColumnEE13immutable_ptrIS3_EETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS8_ (10,101,010 samples, 0.52%)</title><rect x="308.0" y="773" width="6.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="311.04" y="783.5" ></text>
</g>
<g >
<title>DB::recursiveRemoveSparse (70,707,070 samples, 3.61%)</title><rect x="399.3" y="821" width="42.6" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="402.28" y="831.5" >DB::..</text>
</g>
<g >
<title>DB::WriteBuffer* std::__1::__function::__policy_invoker&lt;DB::WriteBuffer*  (20,202,020 samples, 1.03%)</title><rect x="168.1" y="837" width="12.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="171.14" y="847.5" ></text>
</g>
<g >
<title>emap_alloc_ctx_lookup (10,101,010 samples, 0.52%)</title><rect x="715.6" y="501" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="718.57" y="511.5" ></text>
</g>
<g >
<title>CityHash_v1_0_2::HashLen0to16 (10,101,010 samples, 0.52%)</title><rect x="630.4" y="677" width="6.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="633.41" y="687.5" ></text>
</g>
<g >
<title>DB::IMergingTransformBase::~IMergingTransformBase (20,202,020 samples, 1.03%)</title><rect x="892.0" y="597" width="12.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="894.96" y="607.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="1129.2" y="773" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1132.18" y="783.5" ></text>
</g>
<g >
<title>tcache_dalloc_small (10,101,010 samples, 0.52%)</title><rect x="971.0" y="597" width="6.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="974.03" y="607.5" ></text>
</g>
<g >
<title>boost::intrusive_ptr&lt;DB::ColumnConst const&gt;::~intrusive_ptr (20,202,020 samples, 1.03%)</title><rect x="399.3" y="773" width="12.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="402.28" y="783.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN4Poco7Dynamic3VarETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS5_ (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="581" width="12.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1053.10" y="591.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::__base_destruct_at_end[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="613" width="12.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1053.10" y="623.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="758.1" y="565" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="761.14" y="575.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init_copy_ctor_external (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="485" width="6.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1010.53" y="495.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="421" width="6.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1010.53" y="431.5" ></text>
</g>
<g >
<title>sz_size2index_lookup (10,101,010 samples, 0.52%)</title><rect x="861.5" y="149" width="6.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="864.55" y="159.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4Poco7Dynamic3VarEEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPSE_ (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="757" width="12.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1053.10" y="767.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="131.6" y="837" width="6.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="134.65" y="847.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="387.1" y="709" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="390.11" y="719.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="587.8" y="581" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="590.84" y="591.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="545.3" y="661" width="6.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="548.26" y="671.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="928.5" y="805" width="6.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="931.45" y="815.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="34.3" y="373" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="37.33" y="383.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="867.6" y="341" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="870.63" y="351.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="514.8" y="629" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="517.85" y="639.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="520.9" y="677" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="523.93" y="687.5" ></text>
</g>
<g >
<title>std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::__hash_len_17_to_32 (10,101,010 samples, 0.52%)</title><rect x="533.1" y="709" width="6.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="536.09" y="719.5" ></text>
</g>
<g >
<title>COWHelper&lt;DB::IColumnHelper&lt;DB::ColumnVector&lt;unsigned long&gt;, DB::ColumnFixedSizeHelper&gt;, DB::ColumnVector&lt;unsigned long&gt; &gt;::COWHelper (10,101,010 samples, 0.52%)</title><rect x="983.2" y="805" width="6.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="986.20" y="815.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::__swap_out_circular_buffer (30,303,030 samples, 1.55%)</title><rect x="1068.4" y="869" width="18.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1071.35" y="879.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::~VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="725" width="6.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1065.27" y="735.5" ></text>
</g>
<g >
<title>tsd_fetch_impl (10,101,010 samples, 0.52%)</title><rect x="1123.1" y="661" width="6.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1126.09" y="671.5" ></text>
</g>
<g >
<title>DB::ISerialization::SubstreamPath::~SubstreamPath (10,101,010 samples, 0.52%)</title><rect x="977.1" y="853" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="980.11" y="863.5" ></text>
</g>
<g >
<title>extent_recycle_extract (10,101,010 samples, 0.52%)</title><rect x="593.9" y="341" width="6.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="596.92" y="351.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="545.3" y="597" width="6.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="548.26" y="607.5" ></text>
</g>
<g >
<title>inallocx (10,101,010 samples, 0.52%)</title><rect x="648.7" y="645" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="651.66" y="655.5" ></text>
</g>
<g >
<title>DB::NamesAndTypesList::~NamesAndTypesList (30,303,030 samples, 1.55%)</title><rect x="484.4" y="821" width="18.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="487.43" y="831.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt;::allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="454.0" y="725" width="12.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="457.02" y="735.5" ></text>
</g>
<g >
<title>sdallocx (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="469" width="12.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1144.34" y="479.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 1.03%)</title><rect x="788.6" y="229" width="12.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="791.56" y="239.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="302.0" y="773" width="6.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="304.96" y="783.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="879.8" y="309" width="12.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="882.79" y="319.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="782.5" y="373" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="785.47" y="383.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="289.8" y="837" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="292.79" y="847.5" ></text>
</g>
<g >
<title>rtree_leafkey (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="357" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1065.27" y="367.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (20,202,020 samples, 1.03%)</title><rect x="58.7" y="885" width="12.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="61.66" y="895.5" ></text>
</g>
<g >
<title>DB::SerializationSparse::deserializeBinaryBulkWithMultipleStreams (40,404,040 samples, 2.06%)</title><rect x="654.7" y="805" width="24.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="657.74" y="815.5" >D..</text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB19ExpressionTransformETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (50,505,050 samples, 2.58%)</title><rect x="837.2" y="645" width="30.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="840.22" y="655.5" >_Z..</text>
</g>
<g >
<title>peak_alloc_event_wait_get (10,101,010 samples, 0.52%)</title><rect x="1129.2" y="677" width="6.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1132.18" y="687.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.52%)</title><rect x="1177.8" y="981" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1180.84" y="991.5" ></text>
</g>
<g >
<title>rtree_metadata_read (10,101,010 samples, 0.52%)</title><rect x="247.2" y="645" width="6.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="250.22" y="655.5" ></text>
</g>
<g >
<title>tsd_fetch_impl (10,101,010 samples, 0.52%)</title><rect x="143.8" y="693" width="6.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="146.81" y="703.5" ></text>
</g>
<g >
<title>sz_s2u_lookup (10,101,010 samples, 0.52%)</title><rect x="940.6" y="693" width="6.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="943.62" y="703.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="1159.6" y="693" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1162.59" y="703.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::~vector[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="805" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1120.01" y="815.5" ></text>
</g>
<g >
<title>std::__1::default_delete&lt;DB::IMergeTreeDataPartWriter&gt;::operator (10,101,010 samples, 0.52%)</title><rect x="28.2" y="453" width="6.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="31.25" y="463.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="496.6" y="677" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="499.60" y="687.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;::pair (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="805" width="12.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1101.76" y="815.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="34.3" y="261" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="37.33" y="271.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="904.1" y="485" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="907.12" y="495.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="788.6" y="293" width="12.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="791.56" y="303.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="320.2" y="549" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="323.21" y="559.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="22.2" y="469" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="25.16" y="479.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::~__hash_table (20,202,020 samples, 1.03%)</title><rect x="788.6" y="421" width="12.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="791.56" y="431.5" ></text>
</g>
<g >
<title>DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::~PODArrayBase (20,202,020 samples, 1.03%)</title><rect x="825.1" y="421" width="12.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="828.05" y="431.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPSB_ (10,101,010 samples, 0.52%)</title><rect x="916.3" y="357" width="6.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="919.29" y="367.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::destroy[abi:v15000]&lt;Poco::Dynamic::Var, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="805" width="6.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1065.27" y="815.5" ></text>
</g>
<g >
<title>sallocx (10,101,010 samples, 0.52%)</title><rect x="928.5" y="741" width="6.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="931.45" y="751.5" ></text>
</g>
<g >
<title>DB::ISource::~ISource (40,404,040 samples, 2.06%)</title><rect x="867.6" y="613" width="24.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="870.63" y="623.5" >D..</text>
</g>
<g >
<title>ecache_alloc (10,101,010 samples, 0.52%)</title><rect x="593.9" y="373" width="6.1" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="596.92" y="383.5" ></text>
</g>
<g >
<title>DB::MergePlainMergeTreeTask::finish (30,303,030 samples, 1.55%)</title><rect x="22.2" y="1029" width="18.2" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="25.16" y="1039.5" ></text>
</g>
<g >
<title>DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::~PODArray (10,101,010 samples, 0.52%)</title><rect x="393.2" y="629" width="6.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="396.20" y="639.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::~vector[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1086.6" y="901" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1089.60" y="911.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="904.1" y="357" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="907.12" y="367.5" ></text>
</g>
<g >
<title>lg_floor (10,101,010 samples, 0.52%)</title><rect x="977.1" y="597" width="6.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="980.11" y="607.5" ></text>
</g>
<g >
<title>DB::DataTypeNumber&lt;unsigned long&gt;::~DataTypeNumber (10,101,010 samples, 0.52%)</title><rect x="156.0" y="869" width="6.1" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="158.98" y="879.5" ></text>
</g>
<g >
<title>DB::Block::~Block (10,101,010 samples, 0.52%)</title><rect x="910.2" y="453" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="913.21" y="463.5" ></text>
</g>
<g >
<title>DB::IColumnHelper&lt;DB::ColumnVector&lt;long&gt;, DB::ColumnFixedSizeHelper&gt;::getIndicesOfNonDefaultRows (10,101,010 samples, 0.52%)</title><rect x="162.1" y="869" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="165.06" y="879.5" ></text>
</g>
<g >
<title>mallctl (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1157" width="12.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="13.00" y="1167.5" ></text>
</g>
<g >
<title>DB::ISerialization::SerializeBinaryBulkSettings::~SerializeBinaryBulkSettings (10,101,010 samples, 0.52%)</title><rect x="143.8" y="885" width="6.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="146.81" y="895.5" ></text>
</g>
<g >
<title>decltype (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1269" width="12.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="13.00" y="1279.5" ></text>
</g>
<g >
<title>emap_merge_prepare (10,101,010 samples, 0.52%)</title><rect x="971.0" y="309" width="6.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="974.03" y="319.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;::~pair (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="741" width="6.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1174.75" y="751.5" ></text>
</g>
<g >
<title>DB::ColumnsDescription::tryGetColumn (20,202,020 samples, 1.03%)</title><rect x="551.3" y="789" width="12.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="554.34" y="799.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN2DB17SerializationInfoEEEEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPSF_ (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="773" width="6.0" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="1174.75" y="783.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__clear[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="910.2" y="421" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="913.21" y="431.5" ></text>
</g>
<g >
<title>tsd_get (10,101,010 samples, 0.52%)</title><rect x="1123.1" y="645" width="6.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1126.09" y="655.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="309" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1010.53" y="319.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="733.8" y="581" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="736.81" y="591.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="977.1" y="741" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="980.11" y="751.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="940.6" y="789" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="943.62" y="799.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="855.5" y="261" width="6.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="858.46" y="271.5" ></text>
</g>
<g >
<title>iallocztm (10,101,010 samples, 0.52%)</title><rect x="593.9" y="533" width="6.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="596.92" y="543.5" ></text>
</g>
<g >
<title>DB::ColumnWithTypeAndName::~ColumnWithTypeAndName (20,202,020 samples, 1.03%)</title><rect x="58.7" y="869" width="12.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="61.66" y="879.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;::operator= (10,101,010 samples, 0.52%)</title><rect x="393.2" y="821" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="396.20" y="831.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1044.0" y="789" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1047.02" y="799.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="373" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1010.53" y="383.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="789" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1168.67" y="799.5" ></text>
</g>
<g >
<title>sz_s2u (10,101,010 samples, 0.52%)</title><rect x="977.1" y="661" width="6.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="980.11" y="671.5" ></text>
</g>
<g >
<title>DB::ISource::~ISource (10,101,010 samples, 0.52%)</title><rect x="910.2" y="613" width="6.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="913.21" y="623.5" ></text>
</g>
<g >
<title>tsd_thread_allocatedp_get_unsafe (10,101,010 samples, 0.52%)</title><rect x="478.4" y="517" width="6.0" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="481.35" y="527.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="245" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1059.19" y="255.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="514.8" y="597" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="517.85" y="607.5" ></text>
</g>
<g >
<title>std::__1::__shared_weak_count::__release_weak (10,101,010 samples, 0.52%)</title><rect x="776.4" y="453" width="6.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="779.39" y="463.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (10,101,010 samples, 0.52%)</title><rect x="679.1" y="677" width="6.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="682.07" y="687.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1159.6" y="725" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1162.59" y="735.5" ></text>
</g>
<g >
<title>emap_alloc_ctx_lookup (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="245" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1010.53" y="255.5" ></text>
</g>
<g >
<title>te_ctx_has_active_events (10,101,010 samples, 0.52%)</title><rect x="1104.8" y="405" width="6.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1107.85" y="415.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::~__tree (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="917" width="6.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1174.75" y="927.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;long&gt;::~ColumnVector (10,101,010 samples, 0.52%)</title><rect x="58.7" y="789" width="6.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="61.66" y="799.5" ></text>
</g>
<g >
<title>maybe_check_alloc_ctx (10,101,010 samples, 0.52%)</title><rect x="545.3" y="533" width="6.0" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="548.26" y="543.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string (20,202,020 samples, 1.03%)</title><rect x="606.1" y="757" width="12.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="609.08" y="767.5" ></text>
</g>
<g >
<title>DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::~PODArrayBase (10,101,010 samples, 0.52%)</title><rect x="58.7" y="757" width="6.0" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="61.66" y="767.5" ></text>
</g>
<g >
<title>tsd_reentrancy_levelp_get (10,101,010 samples, 0.52%)</title><rect x="727.7" y="565" width="6.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="730.73" y="575.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="125.6" y="805" width="6.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="128.57" y="815.5" ></text>
</g>
<g >
<title>tsd_state_get (10,101,010 samples, 0.52%)</title><rect x="295.9" y="677" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="298.88" y="687.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="168.1" y="485" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="171.14" y="495.5" ></text>
</g>
<g >
<title>DB::TraceSender::send (10,101,010 samples, 0.52%)</title><rect x="636.5" y="645" width="6.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="639.49" y="655.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var* std::__1::construct_at[abi:v15000]&lt;Poco::Dynamic::Var, Poco::Dynamic::Var const&amp;, Poco::Dynamic::Var*&gt; (30,303,030 samples, 1.55%)</title><rect x="1068.4" y="821" width="18.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1071.35" y="831.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt; &gt; &gt;::~__tree (10,101,010 samples, 0.52%)</title><rect x="764.2" y="709" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="767.23" y="719.5" ></text>
</g>
<g >
<title>tcache_bin_flush_small (10,101,010 samples, 0.52%)</title><rect x="338.5" y="469" width="6.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="341.45" y="479.5" ></text>
</g>
<g >
<title>CityHash_v1_0_2::UNALIGNED_LOAD64 (10,101,010 samples, 0.52%)</title><rect x="186.4" y="805" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="189.39" y="815.5" ></text>
</g>
<g >
<title>te_ctx_get (10,101,010 samples, 0.52%)</title><rect x="131.6" y="581" width="6.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="134.65" y="591.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="971.0" y="645" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="974.03" y="655.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__shared_ptr_emplace&lt;DB::(anonymous namespace)::DeserializeStateSparse, std::__1::allocator&lt;DB::(anonymous namespace)::DeserializeStateSparse&gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="776.4" y="405" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="779.39" y="415.5" ></text>
</g>
<g >
<title>std::__1::__hash_map_iterator&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt; &gt;::operator (10,101,010 samples, 0.52%)</title><rect x="235.1" y="901" width="6.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="238.05" y="911.5" ></text>
</g>
<g >
<title>arena_malloc (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="693" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1168.67" y="703.5" ></text>
</g>
<g >
<title>std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;::operator (10,101,010 samples, 0.52%)</title><rect x="271.5" y="885" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="274.55" y="895.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (20,202,020 samples, 1.03%)</title><rect x="837.2" y="373" width="12.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="840.22" y="383.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="892.0" y="245" width="6.0" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="894.96" y="255.5" ></text>
</g>
<g >
<title>std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;::operator (10,101,010 samples, 0.52%)</title><rect x="952.8" y="821" width="6.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="955.78" y="831.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::Var (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="789" width="12.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1101.76" y="799.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;DB::ISerialization::Substream&gt;::allocate_at_least[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="514.8" y="677" width="6.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="517.85" y="687.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="1074.4" y="421" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1077.43" y="431.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt; &gt; &gt;::destroy (20,202,020 samples, 1.03%)</title><rect x="770.3" y="629" width="12.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="773.31" y="639.5" ></text>
</g>
<g >
<title>rtree_leaf_elm_bits_read (10,101,010 samples, 0.52%)</title><rect x="849.4" y="197" width="6.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="852.38" y="207.5" ></text>
</g>
<g >
<title>tsd_fetch_impl (10,101,010 samples, 0.52%)</title><rect x="89.1" y="773" width="6.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="92.07" y="783.5" ></text>
</g>
<g >
<title>eset_fit (10,101,010 samples, 0.52%)</title><rect x="593.9" y="325" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="596.92" y="335.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="295.9" y="725" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="298.88" y="735.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="338.5" y="581" width="6.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="341.45" y="591.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="1013.6" y="437" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1016.61" y="447.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::insert[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1001.4" y="885" width="6.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1004.44" y="895.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="904.1" y="341" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="907.12" y="351.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="928.5" y="725" width="6.0" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="931.45" y="735.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::(anonymous namespace)::DeserializeStateSparse, std::__1::allocator&lt;DB::(anonymous namespace)::DeserializeStateSparse&gt; &gt;::__on_zero_shared_weak (10,101,010 samples, 0.52%)</title><rect x="776.4" y="437" width="6.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="779.39" y="447.5" ></text>
</g>
<g >
<title>isfree (20,202,020 samples, 1.03%)</title><rect x="569.6" y="661" width="12.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="572.59" y="671.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="776.4" y="293" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="779.39" y="303.5" ></text>
</g>
<g >
<title>DB::Nested::convertToSubcolumns (10,101,010 samples, 0.52%)</title><rect x="502.7" y="821" width="6.1" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="505.68" y="831.5" ></text>
</g>
<g >
<title>arena_decay_impl (10,101,010 samples, 0.52%)</title><rect x="971.0" y="485" width="6.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="974.03" y="495.5" ></text>
</g>
<g >
<title>std::__1::__function::__default_alloc_func&lt;DB::MergeTreeDataPartWriterCompact::writeDataBlock (10,101,010 samples, 0.52%)</title><rect x="143.8" y="821" width="6.1" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="146.81" y="831.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="247.2" y="725" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="250.22" y="735.5" ></text>
</g>
<g >
<title>tsd_thread_allocatedp_get (10,101,010 samples, 0.52%)</title><rect x="295.9" y="693" width="6.1" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="298.88" y="703.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::ColumnSparse&gt; COWHelper&lt;DB::IColumnHelper&lt;DB::ColumnSparse, DB::IColumn&gt;, DB::ColumnSparse&gt;::create&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="587.8" y="773" width="12.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="590.84" y="783.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__base_destruct_at_end[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="837.2" y="405" width="12.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="840.22" y="415.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="794.6" y="133" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="797.64" y="143.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="405" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1059.19" y="415.5" ></text>
</g>
<g >
<title>Poco::JSON::Array::~Array (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="709" width="12.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1144.34" y="719.5" ></text>
</g>
<g >
<title>arena_sdalloc (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="405" width="12.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1144.34" y="415.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1123.1" y="805" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1126.09" y="815.5" ></text>
</g>
<g >
<title>pa_alloc (10,101,010 samples, 0.52%)</title><rect x="302.0" y="581" width="6.0" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="304.96" y="591.5" ></text>
</g>
<g >
<title>boost::multi_index::detail::index_base&lt;DB::ColumnDescription, boost::multi_index::indexed_by&lt;boost::multi_index::sequenced&lt;boost::multi_index::tag&lt;mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt; &gt;, boost::multi_index::ordered_unique&lt;boost::multi_index::member&lt;DB::ColumnDescription, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, &amp;DB::ColumnDescription::name&gt;, mpl_::na, mpl_::na&gt;, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt;, std::__1::allocator&lt;DB::ColumnDescription&gt; &gt;::insert_ (10,101,010 samples, 0.52%)</title><rect x="934.5" y="805" width="6.1" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="937.54" y="815.5" ></text>
</g>
<g >
<title>free_fastpath (10,101,010 samples, 0.52%)</title><rect x="64.7" y="757" width="6.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="67.74" y="767.5" ></text>
</g>
<g >
<title>std::__1::shared_ptr&lt;DB::ISerialization const&gt;::~shared_ptr[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="782.5" y="501" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="785.47" y="511.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="898.0" y="197" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="901.04" y="207.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="898.0" y="133" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="901.04" y="143.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN2DB14ISerialization26DeserializeBinaryBulkStateEEEEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPSG_ (10,101,010 samples, 0.52%)</title><rect x="776.4" y="533" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="779.39" y="543.5" ></text>
</g>
<g >
<title>witness_assert_lockless (10,101,010 samples, 0.52%)</title><rect x="95.2" y="805" width="6.0" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="98.15" y="815.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="1086.6" y="757" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1089.60" y="767.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="898.0" y="213" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="901.04" y="223.5" ></text>
</g>
<g >
<title>tsd_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="381.0" y="693" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="384.03" y="703.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="1159.6" y="677" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1162.59" y="687.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN4Poco7Dynamic3VarETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS5_ (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="565" width="12.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1053.10" y="575.5" ></text>
</g>
<g >
<title>pac_alloc_real (10,101,010 samples, 0.52%)</title><rect x="374.9" y="549" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="377.95" y="559.5" ></text>
</g>
<g >
<title>vfs_write (10,101,010 samples, 0.52%)</title><rect x="636.5" y="501" width="6.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="639.49" y="511.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="1013.6" y="469" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1016.61" y="479.5" ></text>
</g>
<g >
<title>te_ctx_current_bytes_set (10,101,010 samples, 0.52%)</title><rect x="399.3" y="533" width="6.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="402.28" y="543.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="673.0" y="661" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="675.99" y="671.5" ></text>
</g>
<g >
<title>std::__1::unique_ptr&lt;DB::IMergeTreeDataPartWriter, std::__1::default_delete&lt;DB::IMergeTreeDataPartWriter&gt; &gt;::reset[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="28.2" y="469" width="6.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="31.25" y="479.5" ></text>
</g>
<g >
<title>DB::NamesAndTypesList::NamesAndTypesList (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="949" width="6.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1168.67" y="959.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (20,202,020 samples, 1.03%)</title><rect x="356.7" y="725" width="12.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="359.70" y="735.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init_copy_ctor_external (10,101,010 samples, 0.52%)</title><rect x="259.4" y="885" width="6.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="262.38" y="895.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="593.9" y="565" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="596.92" y="575.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="916.3" y="261" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="919.29" y="271.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="28.2" y="341" width="6.1" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="31.25" y="351.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="247.2" y="741" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="250.22" y="751.5" ></text>
</g>
<g >
<title>imalloc_no_sample (10,101,010 samples, 0.52%)</title><rect x="593.9" y="549" width="6.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="596.92" y="559.5" ></text>
</g>
<g >
<title>te_next_event_compute (10,101,010 samples, 0.52%)</title><rect x="837.2" y="85" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="840.22" y="95.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate_at_least[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="733.8" y="709" width="6.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="736.81" y="719.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::~__list_imp (10,101,010 samples, 0.52%)</title><rect x="34.3" y="469" width="6.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="37.33" y="479.5" ></text>
</g>
<g >
<title>void std::__1::__function::__policy::__large_destroy&lt;std::__1::__function::__default_alloc_func&lt;DB::ColumnsDescription::addSubcolumns (10,101,010 samples, 0.52%)</title><rect x="928.5" y="853" width="6.0" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="931.45" y="863.5" ></text>
</g>
<g >
<title>std::__1::shared_ptr&lt;DB::SerializationSparse&gt; std::__1::allocate_shared[abi:v15000]&lt;DB::SerializationSparse, std::__1::allocator&lt;DB::SerializationSparse&gt;, std::__1::shared_ptr&lt;DB::ISerialization const&gt;, void&gt; (10,101,010 samples, 0.52%)</title><rect x="703.4" y="709" width="6.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="706.40" y="719.5" ></text>
</g>
<g >
<title>rtree_metadata_read (10,101,010 samples, 0.52%)</title><rect x="119.5" y="693" width="6.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="122.48" y="703.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::~Var (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="533" width="6.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1065.27" y="543.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="597" width="6.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1174.75" y="607.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1098.8" y="437" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1101.76" y="447.5" ></text>
</g>
<g >
<title>DB::Block::insert (101,010,100 samples, 5.15%)</title><rect x="198.6" y="917" width="60.8" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="201.56" y="927.5" >DB::Bl..</text>
</g>
<g >
<title>DB::MergingSortedAlgorithm::merge (50,505,050 samples, 2.58%)</title><rect x="314.1" y="869" width="30.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="317.12" y="879.5" >DB..</text>
</g>
<g >
<title>Poco::JSON::Object::Object (30,303,030 samples, 1.55%)</title><rect x="1068.4" y="741" width="18.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1071.35" y="751.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="1104.8" y="453" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1107.85" y="463.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="898.0" y="229" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="901.04" y="239.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="995.4" y="885" width="6.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="998.36" y="895.5" ></text>
</g>
<g >
<title>__x64_sys_write (10,101,010 samples, 0.52%)</title><rect x="636.5" y="533" width="6.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="639.49" y="543.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="1044.0" y="661" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1047.02" y="671.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="606.1" y="661" width="12.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="609.08" y="671.5" ></text>
</g>
<g >
<title>arena_malloc (10,101,010 samples, 0.52%)</title><rect x="593.9" y="517" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="596.92" y="527.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="837.2" y="101" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="840.22" y="111.5" ></text>
</g>
<g >
<title>extent_recycle (10,101,010 samples, 0.52%)</title><rect x="344.5" y="517" width="6.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="347.54" y="527.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="168.1" y="437" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="171.14" y="447.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="733.8" y="597" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="736.81" y="607.5" ></text>
</g>
<g >
<title>std::__1::__compressed_pair_elem&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__rep, 0, false&gt;::__get[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1001.4" y="693" width="6.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1004.44" y="703.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="1098.8" y="405" width="6.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1101.76" y="415.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__base_destruct_at_end[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="879.8" y="405" width="12.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="882.79" y="415.5" ></text>
</g>
<g >
<title>std::__1::shared_ptr&lt;DB::ISerialization const&gt;::~shared_ptr[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="520.9" y="789" width="12.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="523.93" y="799.5" ></text>
</g>
<g >
<title>tsd_reentrancy_level_get (10,101,010 samples, 0.52%)</title><rect x="727.7" y="581" width="6.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="730.73" y="591.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="794.6" y="181" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="797.64" y="191.5" ></text>
</g>
<g >
<title>exc_page_fault (10,101,010 samples, 0.52%)</title><rect x="83.0" y="661" width="6.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="85.99" y="671.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolder* Poco::Dynamic::VarHolder::cloneHolder&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="533" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1010.53" y="543.5" ></text>
</g>
<g >
<title>tsd_state_get (10,101,010 samples, 0.52%)</title><rect x="289.8" y="709" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="292.79" y="719.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="989.3" y="805" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="992.28" y="815.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (20,202,020 samples, 1.03%)</title><rect x="879.8" y="325" width="12.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="882.79" y="335.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="867.6" y="325" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="870.63" y="335.5" ></text>
</g>
<g >
<title>Poco::JSON::Array::~Array (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="821" width="6.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1120.01" y="831.5" ></text>
</g>
<g >
<title>witness_assert_depth (10,101,010 samples, 0.52%)</title><rect x="922.4" y="677" width="6.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="925.37" y="687.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::ColumnVector&lt;unsigned long&gt; &gt; COWHelper&lt;DB::IColumnHelper&lt;DB::ColumnVector&lt;unsigned long&gt;, DB::ColumnFixedSizeHelper&gt;, DB::ColumnVector&lt;unsigned long&gt; &gt;::create&lt;unsigned long&amp;&gt; (10,101,010 samples, 0.52%)</title><rect x="70.8" y="869" width="6.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="73.82" y="879.5" ></text>
</g>
<g >
<title>DB::ColumnWithTypeAndName::ColumnWithTypeAndName (10,101,010 samples, 0.52%)</title><rect x="259.4" y="917" width="6.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="262.38" y="927.5" ></text>
</g>
<g >
<title>rtree_metadata_read (10,101,010 samples, 0.52%)</title><rect x="715.6" y="485" width="6.0" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="718.57" y="495.5" ></text>
</g>
<g >
<title>isdalloct (10,101,010 samples, 0.52%)</title><rect x="52.6" y="805" width="6.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="55.58" y="815.5" ></text>
</g>
<g >
<title>sallocx (10,101,010 samples, 0.52%)</title><rect x="867.6" y="293" width="6.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="870.63" y="303.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="642.6" y="645" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="645.58" y="655.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt;::allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1074.4" y="629" width="12.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1077.43" y="639.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="648.7" y="789" width="6.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="651.66" y="799.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;DB::ISerialization::Substream&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="673.0" y="709" width="6.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="675.99" y="719.5" ></text>
</g>
<g >
<title>te_ctx_get (10,101,010 samples, 0.52%)</title><rect x="733.8" y="501" width="6.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="736.81" y="511.5" ></text>
</g>
<g >
<title>DB::SerializationNumber&lt;unsigned long&gt;::deserializeBinaryBulk (10,101,010 samples, 0.52%)</title><rect x="636.5" y="789" width="6.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="639.49" y="799.5" ></text>
</g>
<g >
<title>DB::CompressedWriteBuffer::nextImpl (10,101,010 samples, 0.52%)</title><rect x="192.5" y="853" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="195.47" y="863.5" ></text>
</g>
<g >
<title>ctl_byname (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1141" width="12.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="13.00" y="1151.5" ></text>
</g>
<g >
<title>DB::convertToFullIfSparse (80,808,080 samples, 4.12%)</title><rect x="393.2" y="837" width="48.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="396.20" y="847.5" >DB::..</text>
</g>
<g >
<title>LZ4_read_ARCH (10,101,010 samples, 0.52%)</title><rect x="192.5" y="773" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="195.47" y="783.5" ></text>
</g>
<g >
<title>boost::multi_index::detail::sequenced_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;DB::ColumnDescription, std::__1::allocator&lt;DB::ColumnDescription&gt; &gt; &gt; &gt;* boost::multi_index::detail::sequenced_index&lt;boost::multi_index::detail::nth_layer&lt;1, DB::ColumnDescription, boost::multi_index::indexed_by&lt;boost::multi_index::sequenced&lt;boost::multi_index::tag&lt;mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt; &gt;, boost::multi_index::ordered_unique&lt;boost::multi_index::member&lt;DB::ColumnDescription, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, &amp;DB::ColumnDescription::name&gt;, mpl_::na, mpl_::na&gt;, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt;, std::__1::allocator&lt;DB::ColumnDescription&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt; &gt;::insert_&lt;boost::multi_index::detail::rvalue_tag&gt; (10,101,010 samples, 0.52%)</title><rect x="934.5" y="837" width="6.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="937.54" y="847.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="587.8" y="533" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="590.84" y="543.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="1129.2" y="725" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1132.18" y="735.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="831.1" y="309" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="834.13" y="319.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="855.5" y="325" width="6.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="858.46" y="335.5" ></text>
</g>
<g >
<title>sz_psz_quantize_ceil (10,101,010 samples, 0.52%)</title><rect x="593.9" y="293" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="596.92" y="303.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;::~VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="725" width="6.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1138.26" y="735.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="40.4" y="805" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="43.41" y="815.5" ></text>
</g>
<g >
<title>extent_split_impl (10,101,010 samples, 0.52%)</title><rect x="374.9" y="469" width="6.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="377.95" y="479.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::reserveForNextSize&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="435.8" y="741" width="6.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="438.77" y="751.5" ></text>
</g>
<g >
<title>std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt;::operator++[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1068.4" y="677" width="6.0" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1071.35" y="687.5" ></text>
</g>
<g >
<title>emap_full_alloc_ctx_try_lookup (10,101,010 samples, 0.52%)</title><rect x="484.4" y="613" width="6.1" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="487.43" y="623.5" ></text>
</g>
<g >
<title>std::__1::__shared_weak_count::__release_shared[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="22.2" y="741" width="18.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="25.16" y="751.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="916.3" y="181" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="919.29" y="191.5" ></text>
</g>
<g >
<title>ThreadPoolImpl&lt;ThreadFromGlobalPoolImpl&lt;false&gt; &gt;::scheduleImpl&lt;void&gt; (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1221" width="1161.7" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="25.16" y="1231.5" >ThreadPoolImpl&lt;ThreadFromGlobalPoolImpl&lt;false&gt; &gt;::scheduleImpl&lt;void&gt;</text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::OutputPort, std::__1::allocator&lt;DB::OutputPort&gt; &gt;::clear (40,404,040 samples, 2.06%)</title><rect x="867.6" y="549" width="24.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="870.63" y="559.5" >s..</text>
</g>
<g >
<title>tsd_peak_dalloc_event_wait_get (10,101,010 samples, 0.52%)</title><rect x="837.2" y="53" width="6.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="840.22" y="63.5" ></text>
</g>
<g >
<title>void Poco::JSON::Object::doStringify&lt;std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="1153.5" y="885" width="12.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1156.51" y="895.5" ></text>
</g>
<g >
<title>ifree (10,101,010 samples, 0.52%)</title><rect x="819.0" y="341" width="6.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="821.97" y="351.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="593.9" y="581" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="596.92" y="591.5" ></text>
</g>
<g >
<title>std::__1::enable_if&lt;__is_cpp17_forward_iterator&lt;Poco::Dynamic::Var*&gt;::value, void&gt;::type std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::__construct_at_end&lt;Poco::Dynamic::Var*&gt; (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="853" width="12.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1010.53" y="863.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="95.2" y="821" width="6.0" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="98.15" y="831.5" ></text>
</g>
<g >
<title>DB::NameAndTypePair::getNameInStorage (10,101,010 samples, 0.52%)</title><rect x="733.8" y="789" width="6.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="736.81" y="799.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="1050.1" y="389" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1053.10" y="399.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB9MergeTask20GlobalRuntimeContextETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS5_ (30,303,030 samples, 1.55%)</title><rect x="22.2" y="661" width="18.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="25.16" y="671.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="563.5" y="709" width="6.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="566.51" y="719.5" ></text>
</g>
<g >
<title>void boost::sp_adl_block::intrusive_ptr_release&lt;DB::IColumn, boost::sp_adl_block::thread_safe_counter&gt; (40,404,040 samples, 2.06%)</title><rect x="320.2" y="613" width="24.3" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="323.21" y="623.5" >v..</text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::~vector[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="545.3" y="805" width="6.0" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="548.26" y="815.5" ></text>
</g>
<g >
<title>DB::IMergeTreeReader::performRequiredConversions (90,909,090 samples, 4.64%)</title><rect x="533.1" y="837" width="54.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="536.09" y="847.5" >DB::I..</text>
</g>
<g >
<title>DB::ColumnSparse::ColumnSparse (20,202,020 samples, 1.03%)</title><rect x="587.8" y="757" width="12.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="590.84" y="767.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.52%)</title><rect x="174.2" y="725" width="6.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="177.23" y="735.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="648.7" y="709" width="6.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="651.66" y="719.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="770.3" y="421" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="773.31" y="431.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::~map[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="677" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1065.27" y="687.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="606.1" y="677" width="12.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="609.08" y="687.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="946.7" y="773" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="949.70" y="783.5" ></text>
</g>
<g >
<title>DB::SerializationInfoByName::~SerializationInfoByName (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="949" width="6.0" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1174.75" y="959.5" ></text>
</g>
<g >
<title>boost::intrusive_ptr&lt;DB::IColumn&gt;::~intrusive_ptr (40,404,040 samples, 2.06%)</title><rect x="320.2" y="629" width="24.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="323.21" y="639.5" >b..</text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="733.8" y="613" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="736.81" y="623.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="539.2" y="757" width="6.1" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="542.18" y="767.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN4Poco7Dynamic3VarETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS5_ (10,101,010 samples, 0.52%)</title><rect x="1086.6" y="837" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1089.60" y="847.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="338.5" y="565" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="341.45" y="575.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::~__list_imp (30,303,030 samples, 1.55%)</title><rect x="484.4" y="789" width="18.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="487.43" y="799.5" ></text>
</g>
<g >
<title>DB::MergeTreeDataPartWriterCompact::writeDataBlock (20,202,020 samples, 1.03%)</title><rect x="168.1" y="773" width="12.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="171.14" y="783.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="922.4" y="773" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="925.37" y="783.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="514.8" y="709" width="6.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="517.85" y="719.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="308.0" y="629" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="311.04" y="639.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPSB_ (10,101,010 samples, 0.52%)</title><rect x="125.6" y="853" width="6.0" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="128.57" y="863.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;::~pair (10,101,010 samples, 0.52%)</title><rect x="776.4" y="501" width="6.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="779.39" y="511.5" ></text>
</g>
<g >
<title>emap_edata_lookup (10,101,010 samples, 0.52%)</title><rect x="1050.1" y="341" width="6.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1053.10" y="351.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;DB::NameAndTypePair, void*&gt; &gt; &gt;::construct[abi:v15000]&lt;DB::NameAndTypePair, DB::NameAndTypePair const&amp;, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="472.3" y="757" width="12.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="475.27" y="767.5" ></text>
</g>
<g >
<title>std::__1::enable_if&lt;__is_cpp17_forward_iterator&lt;Poco::Dynamic::Var*&gt;::value, void&gt;::type std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::__construct_at_end&lt;Poco::Dynamic::Var*&gt; (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="789" width="6.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1095.68" y="799.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="873.7" y="325" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="876.71" y="335.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="501" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1120.01" y="511.5" ></text>
</g>
<g >
<title>CityHash_v1_0_2::CityHash128WithSeed (20,202,020 samples, 1.03%)</title><rect x="180.3" y="837" width="12.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="183.31" y="847.5" ></text>
</g>
<g >
<title>peak_dalloc_event_wait_get (10,101,010 samples, 0.52%)</title><rect x="837.2" y="69" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="840.22" y="79.5" ></text>
</g>
<g >
<title>tsd_thread_deallocated_next_event_fastp_get (10,101,010 samples, 0.52%)</title><rect x="831.1" y="245" width="6.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="834.13" y="255.5" ></text>
</g>
<g >
<title>pai_dalloc (10,101,010 samples, 0.52%)</title><rect x="52.6" y="709" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="55.58" y="719.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;std::__1::shared_ptr&lt;DB::ISerialization const&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;DB::ISerialization const&gt; &gt; &gt;::__clear[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="782.5" y="709" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="785.47" y="719.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;long&gt;::createWithOffsets (10,101,010 samples, 0.52%)</title><rect x="411.4" y="789" width="6.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="414.44" y="799.5" ></text>
</g>
<g >
<title>DB::ColumnConst::~ColumnConst (10,101,010 samples, 0.52%)</title><rect x="399.3" y="725" width="6.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="402.28" y="735.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="1129.2" y="837" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1132.18" y="847.5" ></text>
</g>
<g >
<title>inallocx (10,101,010 samples, 0.52%)</title><rect x="581.8" y="629" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="584.75" y="639.5" ></text>
</g>
<g >
<title>DB::PipelineExecutor::executeStepImpl (818,181,810 samples, 41.75%)</title><rect x="295.9" y="933" width="492.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="298.88" y="943.5" >DB::PipelineExecutor::executeStepImpl</text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="460.1" y="549" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="463.10" y="559.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="581.8" y="677" width="6.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="584.75" y="687.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="660.8" y="661" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="663.82" y="671.5" ></text>
</g>
<g >
<title>DB::CompressedReadBufferBase::readCompressedData (10,101,010 samples, 0.52%)</title><rect x="654.7" y="741" width="6.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="657.74" y="751.5" ></text>
</g>
<g >
<title>DB::Block::cloneEmpty (10,101,010 samples, 0.52%)</title><rect x="70.8" y="933" width="6.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="73.82" y="943.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="341" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1010.53" y="351.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4Poco7Dynamic3VarEEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPSE_ (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="821" width="12.2" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1144.34" y="831.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="715.6" y="677" width="18.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="718.57" y="687.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init_copy_ctor_external (10,101,010 samples, 0.52%)</title><rect x="563.5" y="773" width="6.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="566.51" y="783.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="520.9" y="629" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="523.93" y="639.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="624.3" y="581" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="627.33" y="591.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="174.2" y="629" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="177.23" y="639.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4Poco7Dynamic3VarEEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPSE_ (10,101,010 samples, 0.52%)</title><rect x="1044.0" y="757" width="6.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1047.02" y="767.5" ></text>
</g>
<g >
<title>arena_bin_lower_slab (10,101,010 samples, 0.52%)</title><rect x="338.5" y="389" width="6.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="341.45" y="399.5" ></text>
</g>
<g >
<title>imalloc_no_sample (10,101,010 samples, 0.52%)</title><rect x="563.5" y="565" width="6.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="566.51" y="575.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolder* Poco::Dynamic::VarHolder::cloneHolder&lt;Poco::JSON::Object&gt; (30,303,030 samples, 1.55%)</title><rect x="1068.4" y="773" width="18.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1071.35" y="783.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="642.6" y="613" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="645.58" y="623.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::ExpressionTransform, std::__1::allocator&lt;DB::ExpressionTransform&gt; &gt;::__on_zero_shared (50,505,050 samples, 2.58%)</title><rect x="837.2" y="693" width="30.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="840.22" y="703.5" >st..</text>
</g>
<g >
<title>DB::NamesAndTypesList::~NamesAndTypesList (10,101,010 samples, 0.52%)</title><rect x="22.2" y="629" width="6.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="25.16" y="639.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__deallocate_node (10,101,010 samples, 0.52%)</title><rect x="916.3" y="405" width="6.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="919.29" y="415.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::__node_insert_multi (10,101,010 samples, 0.52%)</title><rect x="952.8" y="869" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="955.78" y="879.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::vector (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="645" width="12.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1028.77" y="655.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="764.2" y="389" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="767.23" y="399.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="940.6" y="821" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="943.62" y="831.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Array&gt;::VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="837" width="6.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1095.68" y="847.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="52.6" y="949" width="6.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="55.58" y="959.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="168.1" y="597" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="171.14" y="607.5" ></text>
</g>
<g >
<title>DB::ColumnSparse::~ColumnSparse (10,101,010 samples, 0.52%)</title><rect x="393.2" y="741" width="6.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="396.20" y="751.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init_copy_ctor_external (20,202,020 samples, 1.03%)</title><rect x="472.3" y="693" width="12.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="475.27" y="703.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::~__list_imp (10,101,010 samples, 0.52%)</title><rect x="758.1" y="693" width="6.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="761.14" y="703.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="520.9" y="613" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="523.93" y="623.5" ></text>
</g>
<g >
<title>DB::WriteBuffer* std::__1::__invoke_void_return_wrapper&lt;DB::WriteBuffer*, false&gt;::__call&lt;DB::MergeTreeDataPartWriterCompact::writeDataBlock (20,202,020 samples, 1.03%)</title><rect x="168.1" y="805" width="12.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="171.14" y="815.5" ></text>
</g>
<g >
<title>DB::ColumnWithTypeAndName::~ColumnWithTypeAndName (20,202,020 samples, 1.03%)</title><rect x="837.2" y="341" width="12.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="840.22" y="351.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Array&gt;::~VarHolderImpl (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="741" width="12.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1144.34" y="751.5" ></text>
</g>
<g >
<title>free (10,101,010 samples, 0.52%)</title><rect x="819.0" y="373" width="6.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="821.97" y="383.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::~__list_imp (10,101,010 samples, 0.52%)</title><rect x="22.2" y="597" width="6.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="25.16" y="607.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="1104.8" y="421" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1107.85" y="431.5" ></text>
</g>
<g >
<title>std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::~unordered_map[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="40.4" y="965" width="12.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="43.41" y="975.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 1.03%)</title><rect x="484.4" y="677" width="12.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="487.43" y="687.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (10,101,010 samples, 0.52%)</title><rect x="952.8" y="757" width="6.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="955.78" y="767.5" ></text>
</g>
<g >
<title>std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;::operator (10,101,010 samples, 0.52%)</title><rect x="271.5" y="869" width="6.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="274.55" y="879.5" ></text>
</g>
<g >
<title>Poco::JSON::Object::stringify (20,202,020 samples, 1.03%)</title><rect x="1153.5" y="901" width="12.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1156.51" y="911.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::realloc&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="636.5" y="757" width="6.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="639.49" y="767.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="1104.8" y="501" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1107.85" y="511.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::reserveForNextSize&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="344.5" y="805" width="6.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="347.54" y="815.5" ></text>
</g>
<g >
<title>std::__1::__function::__default_alloc_func&lt;DB::ColumnsDescription::addSubcolumns (10,101,010 samples, 0.52%)</title><rect x="928.5" y="837" width="6.0" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="931.45" y="847.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="904.1" y="517" width="6.1" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="907.12" y="527.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="472.3" y="517" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="475.27" y="527.5" ></text>
</g>
<g >
<title>arena_sdalloc (10,101,010 samples, 0.52%)</title><rect x="34.3" y="197" width="6.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="37.33" y="207.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;::~immutable_ptr (10,101,010 samples, 0.52%)</title><rect x="393.2" y="709" width="6.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="396.20" y="719.5" ></text>
</g>
<g >
<title>tsdn_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="344.5" y="485" width="6.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="347.54" y="495.5" ></text>
</g>
<g >
<title>te_next_event_compute (10,101,010 samples, 0.52%)</title><rect x="910.2" y="85" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="913.21" y="95.5" ></text>
</g>
<g >
<title>extent_recycle (10,101,010 samples, 0.52%)</title><rect x="302.0" y="485" width="6.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="304.96" y="495.5" ></text>
</g>
<g >
<title>DB::ExecutionThreadContext::executeTask (797,979,790 samples, 40.72%)</title><rect x="308.0" y="917" width="480.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="311.04" y="927.5" >DB::ExecutionThreadContext::executeTask</text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="259.4" y="821" width="6.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="262.38" y="831.5" ></text>
</g>
<g >
<title>DB::Port::~Port (20,202,020 samples, 1.03%)</title><rect x="892.0" y="453" width="12.1" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="894.96" y="463.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="782.5" y="341" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="785.47" y="351.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init_copy_ctor_external (10,101,010 samples, 0.52%)</title><rect x="174.2" y="709" width="6.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="177.23" y="719.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="770.3" y="453" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="773.31" y="463.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="520.9" y="517" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="523.93" y="527.5" ></text>
</g>
<g >
<title>void DB::PODArray&lt;long, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::push_back&lt;long const&amp;&gt; (10,101,010 samples, 0.52%)</title><rect x="435.8" y="757" width="6.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="438.77" y="767.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="904.1" y="501" width="6.1" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="907.12" y="511.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="673.0" y="629" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="675.99" y="639.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="910.2" y="229" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="913.21" y="239.5" ></text>
</g>
<g >
<title>DB::(anonymous namespace)::updateJemallocEpoch (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1173" width="12.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="13.00" y="1183.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="910.2" y="261" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="913.21" y="271.5" ></text>
</g>
<g >
<title>DB::ColumnsDescription::tryGetColumn (20,202,020 samples, 1.03%)</title><rect x="691.2" y="773" width="12.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="694.24" y="783.5" ></text>
</g>
<g >
<title>malloc_mutex_lock (10,101,010 samples, 0.52%)</title><rect x="344.5" y="501" width="6.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="347.54" y="511.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="309" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1059.19" y="319.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="873.7" y="309" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="876.71" y="319.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="125.6" y="757" width="6.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="128.57" y="767.5" ></text>
</g>
<g >
<title>atomic_load_b (10,101,010 samples, 0.52%)</title><rect x="368.9" y="565" width="6.0" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="371.87" y="575.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="958.9" y="789" width="6.0" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="961.87" y="799.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB19PullingOutputFormatETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="916.3" y="661" width="6.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="919.29" y="671.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__deallocate_node (10,101,010 samples, 0.52%)</title><rect x="892.0" y="389" width="6.0" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="894.96" y="399.5" ></text>
</g>
<g >
<title>emap_alloc_ctx_lookup (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="405" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1065.27" y="415.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="466.2" y="757" width="6.1" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="469.19" y="767.5" ></text>
</g>
<g >
<title>std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt;::operator++[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="229.0" y="885" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="231.97" y="895.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::NullSource, std::__1::allocator&lt;DB::NullSource&gt; &gt;::__on_zero_shared (10,101,010 samples, 0.52%)</title><rect x="910.2" y="693" width="6.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="913.21" y="703.5" ></text>
</g>
<g >
<title>free_fastpath (10,101,010 samples, 0.52%)</title><rect x="490.5" y="645" width="6.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="493.52" y="655.5" ></text>
</g>
<g >
<title>DB::IColumn::mutate (30,303,030 samples, 1.55%)</title><rect x="83.0" y="917" width="18.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="85.99" y="927.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="533" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1095.68" y="543.5" ></text>
</g>
<g >
<title>rtree_leaf_elm_read (10,101,010 samples, 0.52%)</title><rect x="1147.4" y="309" width="6.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1150.42" y="319.5" ></text>
</g>
<g >
<title>arena_slab_reg_alloc_batch (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="629" width="6.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1168.67" y="639.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="581.8" y="741" width="6.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="584.75" y="751.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::~VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="661" width="6.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1120.01" y="671.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="837.2" y="149" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="840.22" y="159.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::~Var (10,101,010 samples, 0.52%)</title><rect x="1086.6" y="805" width="6.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1089.60" y="815.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="563.5" y="597" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="566.51" y="607.5" ></text>
</g>
<g >
<title>std::__1::unique_ptr&lt;DB::IMergeTreeReader, std::__1::default_delete&lt;DB::IMergeTreeReader&gt; &gt;::reset[abi:v15000] (50,505,050 samples, 2.58%)</title><rect x="758.1" y="821" width="30.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="761.14" y="831.5" >st..</text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;::destroy[abi:v15000]&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="441.9" y="789" width="6.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="444.86" y="799.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::push_back[abi:v15000] (40,404,040 samples, 2.06%)</title><rect x="1062.3" y="901" width="24.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1065.27" y="911.5" >s..</text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="855.5" y="309" width="6.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="858.46" y="319.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="247.2" y="757" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="250.22" y="767.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="289.8" y="885" width="6.1" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="292.79" y="895.5" ></text>
</g>
<g >
<title>pac_maybe_decay_purge (10,101,010 samples, 0.52%)</title><rect x="326.3" y="293" width="6.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="329.29" y="303.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt;::construct[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; const&amp;, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="613" width="12.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1010.53" y="623.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB25MergeTreeSequentialSourceETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (40,404,040 samples, 2.06%)</title><rect x="867.6" y="661" width="24.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="870.63" y="671.5" >_..</text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="892.0" y="261" width="6.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="894.96" y="271.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init_copy_ctor_external (20,202,020 samples, 1.03%)</title><rect x="606.1" y="741" width="12.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="609.08" y="751.5" ></text>
</g>
<g >
<title>sdallocx_default (30,303,030 samples, 1.55%)</title><rect x="107.3" y="757" width="18.3" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="110.32" y="767.5" ></text>
</g>
<g >
<title>DB::ColumnWithTypeAndName::ColumnWithTypeAndName (10,101,010 samples, 0.52%)</title><rect x="289.8" y="949" width="6.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="292.79" y="959.5" ></text>
</g>
<g >
<title>DB::IHashingBuffer&lt;DB::WriteBuffer&gt;::append (20,202,020 samples, 1.03%)</title><rect x="180.3" y="853" width="12.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="183.31" y="863.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (20,202,020 samples, 1.03%)</title><rect x="837.2" y="357" width="12.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="840.22" y="367.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="295.9" y="757" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="298.88" y="767.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="855.5" y="293" width="6.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="858.46" y="303.5" ></text>
</g>
<g >
<title>void DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::push_back&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="593.9" y="725" width="6.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="596.92" y="735.5" ></text>
</g>
<g >
<title>arena_sdalloc (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="629" width="6.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1138.26" y="639.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="527.0" y="677" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="530.01" y="687.5" ></text>
</g>
<g >
<title>std::__1::operator!=[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="241.1" y="901" width="6.1" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="244.13" y="911.5" ></text>
</g>
<g >
<title>sz_size2index_lookup (10,101,010 samples, 0.52%)</title><rect x="782.5" y="309" width="6.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="785.47" y="319.5" ></text>
</g>
<g >
<title>std::__1::__split_buffer&lt;DB::ISerialization::Substream, std::__1::allocator&lt;DB::ISerialization::Substream&gt;&amp;&gt;::~__split_buffer (10,101,010 samples, 0.52%)</title><rect x="673.0" y="741" width="6.1" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="675.99" y="751.5" ></text>
</g>
<g >
<title>DB::IDataType::getSerialization (10,101,010 samples, 0.52%)</title><rect x="600.0" y="757" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="603.00" y="767.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;DB::InputPort, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;DB::InputPort, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="837.2" y="533" width="12.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="840.22" y="543.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (30,303,030 samples, 1.55%)</title><rect x="107.3" y="805" width="18.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="110.32" y="815.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="277.6" y="741" width="12.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="280.63" y="751.5" ></text>
</g>
<g >
<title>boost::intrusive_ptr&lt;DB::IColumn const&gt;::operator= (10,101,010 samples, 0.52%)</title><rect x="393.2" y="805" width="6.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="396.20" y="815.5" ></text>
</g>
<g >
<title>DB::SerializationInfo::getKind (10,101,010 samples, 0.52%)</title><rect x="709.5" y="757" width="6.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="712.48" y="767.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt; &gt; &gt;::~map[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="770.3" y="725" width="12.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="773.31" y="735.5" ></text>
</g>
<g >
<title>ivsalloc (10,101,010 samples, 0.52%)</title><rect x="484.4" y="645" width="6.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="487.43" y="655.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="789" width="6.0" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1174.75" y="799.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="971.0" y="677" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="974.03" y="687.5" ></text>
</g>
<g >
<title>bool std::__1::operator&lt;[abi:v15000]&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="1001.4" y="789" width="6.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1004.44" y="799.5" ></text>
</g>
<g >
<title>std::__1::default_delete&lt;DB::IMergeTreeReader&gt;::operator (50,505,050 samples, 2.58%)</title><rect x="758.1" y="805" width="30.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="761.14" y="815.5" >st..</text>
</g>
<g >
<title>malloc_default (20,202,020 samples, 1.03%)</title><rect x="423.6" y="661" width="12.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="426.61" y="671.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="758.1" y="597" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="761.14" y="607.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__base_destruct_at_end[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="800.7" y="405" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="803.72" y="415.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="508.8" y="549" width="6.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="511.76" y="559.5" ></text>
</g>
<g >
<title>Poco::JSON::Object::stringify (20,202,020 samples, 1.03%)</title><rect x="1153.5" y="821" width="12.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1156.51" y="831.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="125.6" y="869" width="6.0" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="128.57" y="879.5" ></text>
</g>
<g >
<title>ThreadPoolImpl&lt;std::__1::thread&gt;::worker (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1397" width="12.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="13.00" y="1407.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="125.6" y="741" width="6.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="128.57" y="751.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN3COWIN2DB7IColumnEE13immutable_ptrIS3_EETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS8_ (10,101,010 samples, 0.52%)</title><rect x="308.0" y="757" width="6.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="311.04" y="767.5" ></text>
</g>
<g >
<title>ThreadPoolImpl&lt;std::__1::thread&gt;::scheduleImpl&lt;void&gt; (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1413" width="1161.7" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="25.16" y="1423.5" >ThreadPoolImpl&lt;std::__1::thread&gt;::scheduleImpl&lt;void&gt;</text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="557.4" y="661" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="560.42" y="671.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="739.9" y="661" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="742.90" y="671.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="587.8" y="565" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="590.84" y="575.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::~vector[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="693" width="12.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1144.34" y="703.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="901" width="6.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1174.75" y="911.5" ></text>
</g>
<g >
<title>witness_assert_depth (10,101,010 samples, 0.52%)</title><rect x="174.2" y="533" width="6.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="177.23" y="543.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Array&gt;::~VarHolderImpl (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="677" width="12.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1053.10" y="687.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="618.2" y="709" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="621.25" y="719.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="648.7" y="725" width="6.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="651.66" y="735.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="357" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1059.19" y="367.5" ></text>
</g>
<g >
<title>inallocx (10,101,010 samples, 0.52%)</title><rect x="642.6" y="629" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="645.58" y="639.5" ></text>
</g>
<g >
<title>tcache_dalloc_small (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="389" width="6.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1120.01" y="399.5" ></text>
</g>
<g >
<title>do_futex (10,101,010 samples, 0.52%)</title><rect x="1177.8" y="917" width="6.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1180.84" y="927.5" ></text>
</g>
<g >
<title>DB::ColumnWithTypeAndName::~ColumnWithTypeAndName (10,101,010 samples, 0.52%)</title><rect x="971.0" y="805" width="6.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="974.03" y="815.5" ></text>
</g>
<g >
<title>sz_s2u (10,101,010 samples, 0.52%)</title><rect x="648.7" y="613" width="6.0" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="651.66" y="623.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (20,202,020 samples, 1.03%)</title><rect x="40.4" y="869" width="12.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="43.41" y="879.5" ></text>
</g>
<g >
<title>std::__1::__shared_weak_count::__release_shared[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="782.5" y="613" width="6.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="785.47" y="623.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::free (20,202,020 samples, 1.03%)</title><rect x="326.3" y="517" width="12.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="329.29" y="527.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__clear[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="545.3" y="789" width="6.0" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="548.26" y="799.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="174.2" y="613" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="177.23" y="623.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="812.9" y="357" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="815.89" y="367.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="421" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1059.19" y="431.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (10,101,010 samples, 0.52%)</title><rect x="1177.8" y="853" width="6.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1180.84" y="863.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::cloneResized (10,101,010 samples, 0.52%)</title><rect x="70.8" y="885" width="6.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="73.82" y="895.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="472.3" y="501" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="475.27" y="511.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="545.3" y="677" width="6.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="548.26" y="687.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__emplace_hint_unique_key_args&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; const&amp;&gt; (10,101,010 samples, 0.52%)</title><rect x="1098.8" y="485" width="6.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1101.76" y="495.5" ></text>
</g>
<g >
<title>std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::write (10,101,010 samples, 0.52%)</title><rect x="1153.5" y="725" width="6.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1156.51" y="735.5" ></text>
</g>
<g >
<title>void std::__1::__invoke_void_return_wrapper&lt;void, true&gt;::__call&lt;ThreadFromGlobalPoolImpl&lt;true&gt;::ThreadFromGlobalPoolImpl&lt;DB::AsynchronousMetrics::start (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1317" width="12.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="13.00" y="1327.5" ></text>
</g>
<g >
<title>pac_alloc_impl (10,101,010 samples, 0.52%)</title><rect x="593.9" y="405" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="596.92" y="415.5" ></text>
</g>
<g >
<title>DB::IProcessor::~IProcessor (10,101,010 samples, 0.52%)</title><rect x="910.2" y="597" width="6.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="913.21" y="607.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB10OutputPortETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (40,404,040 samples, 2.06%)</title><rect x="867.6" y="517" width="24.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="870.63" y="527.5" >_..</text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__insert_unique[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1001.4" y="869" width="6.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1004.44" y="879.5" ></text>
</g>
<g >
<title>LZ4_compress_fast (10,101,010 samples, 0.52%)</title><rect x="192.5" y="789" width="6.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="195.47" y="799.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;::~immutable_ptr (20,202,020 samples, 1.03%)</title><rect x="58.7" y="853" width="12.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="61.66" y="863.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB19PullingOutputFormatETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="916.3" y="645" width="6.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="919.29" y="655.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="131.6" y="757" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="134.65" y="767.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::Var&lt;Poco::JSON::Object&gt; (30,303,030 samples, 1.55%)</title><rect x="1019.7" y="917" width="18.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1022.69" y="927.5" ></text>
</g>
<g >
<title>sz_size2index_compute (10,101,010 samples, 0.52%)</title><rect x="466.2" y="533" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="469.19" y="543.5" ></text>
</g>
<g >
<title>std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::~unordered_map[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="788.6" y="437" width="12.1" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="791.56" y="447.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init_copy_ctor_external (20,202,020 samples, 1.03%)</title><rect x="551.3" y="741" width="12.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="554.34" y="751.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::~__hash_table (20,202,020 samples, 1.03%)</title><rect x="40.4" y="949" width="12.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="43.41" y="959.5" ></text>
</g>
<g >
<title>DB::ColumnWithTypeAndName::~ColumnWithTypeAndName (10,101,010 samples, 0.52%)</title><rect x="545.3" y="709" width="6.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="548.26" y="719.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;::~pair (10,101,010 samples, 0.52%)</title><rect x="28.2" y="293" width="6.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="31.25" y="303.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="1050.1" y="405" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1053.10" y="415.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::clone (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="613" width="12.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1101.76" y="623.5" ></text>
</g>
<g >
<title>DB::SerializationSparse::serializeBinaryBulkWithMultipleStreams (10,101,010 samples, 0.52%)</title><rect x="983.2" y="869" width="6.1" height="15.0" fill="rgb(209,20,5)" rx="2" ry="2" />
<text  x="986.20" y="879.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="277.6" y="773" width="12.2" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="280.63" y="783.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__base_destruct_at_end[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="131.6" y="885" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="134.65" y="895.5" ></text>
</g>
<g >
<title>decltype  (20,202,020 samples, 1.03%)</title><rect x="168.1" y="789" width="12.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="171.14" y="799.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10,101,010 samples, 0.52%)</title><rect x="472.3" y="485" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="475.27" y="495.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__base_destruct_at_end[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="861.5" y="405" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="864.55" y="415.5" ></text>
</g>
<g >
<title>arena_dalloc (10,101,010 samples, 0.52%)</title><rect x="326.3" y="437" width="6.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="329.29" y="447.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="837" width="6.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1174.75" y="847.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::SerializationNumber&lt;unsigned long&gt;, std::__1::allocator&lt;DB::SerializationNumber&lt;unsigned long&gt; &gt; &gt;::__on_zero_shared_weak (10,101,010 samples, 0.52%)</title><rect x="527.0" y="741" width="6.1" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="530.01" y="751.5" ></text>
</g>
<g >
<title>bool std::__1::__tree_is_left_child[abi:v15000]&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt; (10,101,010 samples, 0.52%)</title><rect x="1068.4" y="661" width="6.0" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1071.35" y="671.5" ></text>
</g>
<g >
<title>DB::SerializationSparse::serializeBinaryBulkWithMultipleStreams (40,404,040 samples, 2.06%)</title><rect x="156.0" y="885" width="24.3" height="15.0" fill="rgb(209,20,5)" rx="2" ry="2" />
<text  x="158.98" y="895.5" >D..</text>
</g>
<g >
<title>DB::Block::cloneWithColumns (10,101,010 samples, 0.52%)</title><rect x="76.9" y="933" width="6.1" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="79.91" y="943.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="520.9" y="645" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="523.93" y="655.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;::~pair (10,101,010 samples, 0.52%)</title><rect x="466.2" y="709" width="6.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="469.19" y="719.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::insert[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="1019.7" y="837" width="18.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1022.69" y="847.5" ></text>
</g>
<g >
<title>std::__1::__optional_copy_assign_base&lt;DB::StatisticDescription, false&gt;::__optional_copy_assign_base[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="934.5" y="693" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="937.54" y="703.5" ></text>
</g>
<g >
<title>std::__1::function&lt;DB::WriteBuffer*  (10,101,010 samples, 0.52%)</title><rect x="143.8" y="869" width="6.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="146.81" y="879.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="28.2" y="277" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="31.25" y="287.5" ></text>
</g>
<g >
<title>DB::IProcessor::~IProcessor (50,505,050 samples, 2.58%)</title><rect x="788.6" y="597" width="30.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="791.56" y="607.5" >DB..</text>
</g>
<g >
<title>AllocationTrace::AllocationTrace (10,101,010 samples, 0.52%)</title><rect x="259.4" y="773" width="6.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="262.38" y="783.5" ></text>
</g>
<g >
<title>rtree_leaf_elm_bits_decode (10,101,010 samples, 0.52%)</title><rect x="873.7" y="85" width="6.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="876.71" y="95.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="837.2" y="165" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="840.22" y="175.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::InputPort, std::__1::allocator&lt;DB::InputPort&gt; &gt;::~__list_imp (20,202,020 samples, 1.03%)</title><rect x="892.0" y="549" width="12.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="894.96" y="559.5" ></text>
</g>
<g >
<title>te_next_event_compute (10,101,010 samples, 0.52%)</title><rect x="520.9" y="501" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="523.93" y="511.5" ></text>
</g>
<g >
<title>ecache_dalloc (10,101,010 samples, 0.52%)</title><rect x="52.6" y="677" width="6.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="55.58" y="687.5" ></text>
</g>
<g >
<title>Poco::SharedPtr&lt;Poco::Dynamic::Struct&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, Poco::ReferenceCounter, Poco::ReleasePolicy&lt;Poco::Dynamic::Struct&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~SharedPtr (10,101,010 samples, 0.52%)</title><rect x="1050.1" y="469" width="6.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1053.10" y="479.5" ></text>
</g>
<g >
<title>DB::Nested::collect (10,101,010 samples, 0.52%)</title><rect x="946.7" y="933" width="6.1" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="949.70" y="943.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="940.6" y="757" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="943.62" y="767.5" ></text>
</g>
<g >
<title>emap_full_alloc_ctx_try_lookup (10,101,010 samples, 0.52%)</title><rect x="867.6" y="245" width="6.1" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="870.63" y="255.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="28.2" y="229" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="31.25" y="239.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="873.7" y="213" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="876.71" y="223.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="70.8" y="853" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="73.82" y="863.5" ></text>
</g>
<g >
<title>sdallocx_default (20,202,020 samples, 1.03%)</title><rect x="879.8" y="197" width="12.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="882.79" y="207.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var* std::__1::__uninitialized_allocator_copy[abi:v15000]&lt;std::__1::allocator&lt;Poco::Dynamic::Var&gt;, Poco::Dynamic::Var*, Poco::Dynamic::Var*, Poco::Dynamic::Var*&gt; (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="837" width="12.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1010.53" y="847.5" ></text>
</g>
<g >
<title>arena_cache_bin_fill_small (10,101,010 samples, 0.52%)</title><rect x="344.5" y="629" width="6.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="347.54" y="639.5" ></text>
</g>
<g >
<title>DB::Block::erase (10,101,010 samples, 0.52%)</title><rect x="447.9" y="821" width="6.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="450.94" y="831.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string (30,303,030 samples, 1.55%)</title><rect x="715.6" y="757" width="18.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="718.57" y="767.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;::~pair (10,101,010 samples, 0.52%)</title><rect x="916.3" y="341" width="6.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="919.29" y="351.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__deallocate_node (20,202,020 samples, 1.03%)</title><rect x="40.4" y="933" width="12.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="43.41" y="943.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="485" width="12.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1144.34" y="495.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1159.6" y="741" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1162.59" y="751.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4Poco7Dynamic3VarEEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPSE_ (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="565" width="6.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1065.27" y="575.5" ></text>
</g>
<g >
<title>cache_bin_assert_earlier (10,101,010 samples, 0.52%)</title><rect x="563.5" y="405" width="6.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="566.51" y="415.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__emplace_hint_unique_key_args&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; const&amp;&gt; (20,202,020 samples, 1.03%)</title><rect x="1074.4" y="661" width="12.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1077.43" y="671.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="89.1" y="853" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="92.07" y="863.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="618.2" y="741" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="621.25" y="751.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="52.6" y="917" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="55.58" y="927.5" ></text>
</g>
<g >
<title>DB::PODArray&lt;long, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::~PODArray (10,101,010 samples, 0.52%)</title><rect x="58.7" y="773" width="6.0" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="61.66" y="783.5" ></text>
</g>
<g >
<title>std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;::operator (10,101,010 samples, 0.52%)</title><rect x="952.8" y="837" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="955.78" y="847.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::clone (30,303,030 samples, 1.55%)</title><rect x="1068.4" y="789" width="18.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1071.35" y="799.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="131.6" y="741" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="134.65" y="751.5" ></text>
</g>
<g >
<title>DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::~PODArrayBase (10,101,010 samples, 0.52%)</title><rect x="441.9" y="645" width="6.0" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="444.86" y="655.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__insert_unique[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1031.9" y="437" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1034.86" y="447.5" ></text>
</g>
<g >
<title>tsdn_rtree_ctx (10,101,010 samples, 0.52%)</title><rect x="429.7" y="565" width="6.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="432.69" y="575.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Array&gt;::clone (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="869" width="6.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1095.68" y="879.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="879.8" y="277" width="12.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="882.79" y="287.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="733.8" y="677" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="736.81" y="687.5" ></text>
</g>
<g >
<title>std::__1::__shared_weak_count::__release_shared[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="776.4" y="469" width="6.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="779.39" y="479.5" ></text>
</g>
<g >
<title>DB::Block::~Block (30,303,030 samples, 1.55%)</title><rect x="788.6" y="453" width="18.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="791.56" y="463.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPSB_ (10,101,010 samples, 0.52%)</title><rect x="539.2" y="741" width="6.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="542.18" y="751.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolder* Poco::Dynamic::VarHolder::cloneHolder&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="1013.6" y="533" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1016.61" y="543.5" ></text>
</g>
<g >
<title>DB::IDataType::getSerialization (10,101,010 samples, 0.52%)</title><rect x="703.4" y="757" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="706.40" y="767.5" ></text>
</g>
<g >
<title>DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::dealloc (10,101,010 samples, 0.52%)</title><rect x="58.7" y="741" width="6.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="61.66" y="751.5" ></text>
</g>
<g >
<title>DB::QueryPipeline::~QueryPipeline (222,222,220 samples, 11.34%)</title><rect x="788.6" y="965" width="133.8" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="791.56" y="975.5" >DB::QueryPipelin..</text>
</g>
<g >
<title>std::__1::deque&lt;unsigned long, std::__1::allocator&lt;unsigned long&gt; &gt;::__add_back_capacity (10,101,010 samples, 0.52%)</title><rect x="302.0" y="869" width="6.0" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="304.96" y="879.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB9InputPortETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (30,303,030 samples, 1.55%)</title><rect x="788.6" y="501" width="18.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="791.56" y="511.5" ></text>
</g>
<g >
<title>CityHash_v1_0_2::Hash128to64 (10,101,010 samples, 0.52%)</title><rect x="630.4" y="645" width="6.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="633.41" y="655.5" ></text>
</g>
<g >
<title>DB::ColumnFixedSizeHelper::ColumnFixedSizeHelper (10,101,010 samples, 0.52%)</title><rect x="983.2" y="789" width="6.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="986.20" y="799.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__deallocate_node (10,101,010 samples, 0.52%)</title><rect x="539.2" y="773" width="6.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="542.18" y="783.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="325" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1059.19" y="335.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="660.8" y="709" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="663.82" y="719.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate_at_least[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="691.2" y="677" width="12.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="694.24" y="687.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolder* Poco::Dynamic::VarHolder::cloneHolder&lt;Poco::JSON::Object&gt; (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="693" width="6.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1095.68" y="703.5" ></text>
</g>
<g >
<title>tsd_reentrancy_level_get (20,202,020 samples, 1.03%)</title><rect x="356.7" y="709" width="12.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="359.70" y="719.5" ></text>
</g>
<g >
<title>DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::PODArray (10,101,010 samples, 0.52%)</title><rect x="83.0" y="853" width="6.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="85.99" y="863.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;std::__1::vector&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::vector&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt; &gt; &gt; &gt; &gt;::__on_zero_shared (222,222,220 samples, 11.34%)</title><rect x="788.6" y="901" width="133.8" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="791.56" y="911.5" >std::__1::__shar..</text>
</g>
<g >
<title>Poco::Dynamic::Var::destruct (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="709" width="12.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1053.10" y="719.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__clear[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="861.5" y="421" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="864.55" y="431.5" ></text>
</g>
<g >
<title>std::__1::__function::__policy_func&lt;DB::WriteBuffer*  (10,101,010 samples, 0.52%)</title><rect x="989.3" y="869" width="6.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="992.28" y="879.5" ></text>
</g>
<g >
<title>isalloc (20,202,020 samples, 1.03%)</title><rect x="423.6" y="613" width="12.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="426.61" y="623.5" ></text>
</g>
<g >
<title>realloc (10,101,010 samples, 0.52%)</title><rect x="137.7" y="853" width="6.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="140.73" y="863.5" ></text>
</g>
<g >
<title>DB::MergeTask::ExecuteAndFinalizeHorizontalPart::executeImpl (1,464,646,450 samples, 74.74%)</title><rect x="40.4" y="997" width="882.0" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="43.41" y="1007.5" >DB::MergeTask::ExecuteAndFinalizeHorizontalPart::executeImpl</text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::realloc&lt;&gt; (20,202,020 samples, 1.03%)</title><rect x="423.6" y="757" width="12.2" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="426.61" y="767.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;DB::ISerialization::Substream&gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="660.8" y="677" width="6.1" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="663.82" y="687.5" ></text>
</g>
<g >
<title>rtree_read (10,101,010 samples, 0.52%)</title><rect x="1141.3" y="373" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1144.34" y="383.5" ></text>
</g>
<g >
<title>tcache_bin_flush_small (10,101,010 samples, 0.52%)</title><rect x="971.0" y="581" width="6.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="974.03" y="591.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="812.9" y="293" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="815.89" y="303.5" ></text>
</g>
<g >
<title>arena_decay_dirty (10,101,010 samples, 0.52%)</title><rect x="326.3" y="325" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="329.29" y="335.5" ></text>
</g>
<g >
<title>DB::ColumnConst::~ColumnConst (20,202,020 samples, 1.03%)</title><rect x="399.3" y="741" width="12.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="402.28" y="751.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::insert[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="453" width="12.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1028.77" y="463.5" ></text>
</g>
<g >
<title>emap_edata_lookup (10,101,010 samples, 0.52%)</title><rect x="1141.3" y="389" width="6.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1144.34" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive_ptr&lt;DB::IColumn const&gt;::~intrusive_ptr (10,101,010 samples, 0.52%)</title><rect x="308.0" y="725" width="6.1" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="311.04" y="735.5" ></text>
</g>
<g >
<title>ifree (20,202,020 samples, 1.03%)</title><rect x="326.3" y="469" width="12.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="329.29" y="479.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="253.3" y="725" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="256.30" y="735.5" ></text>
</g>
<g >
<title>decltype  (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1301" width="12.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="13.00" y="1311.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="1104.8" y="581" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1107.85" y="591.5" ></text>
</g>
<g >
<title>malloc_mutex_unlock (10,101,010 samples, 0.52%)</title><rect x="326.3" y="117" width="6.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="329.29" y="127.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Array&gt;::~VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="837" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1120.01" y="847.5" ></text>
</g>
<g >
<title>cache_bin_ncached_get_local (10,101,010 samples, 0.52%)</title><rect x="612.2" y="405" width="6.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="615.16" y="415.5" ></text>
</g>
<g >
<title>void* (anonymous namespace)::allocNoTrack&lt;false, false&gt; (10,101,010 samples, 0.52%)</title><rect x="587.8" y="645" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="590.84" y="655.5" ></text>
</g>
<g >
<title>tcache_dalloc_small (10,101,010 samples, 0.52%)</title><rect x="46.5" y="741" width="6.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="49.49" y="751.5" ></text>
</g>
<g >
<title>std::__1::function&lt;void  (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1189" width="1161.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="25.16" y="1199.5" >std::__1::function&lt;void </text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::__base_destruct_at_end[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="661" width="12.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1144.34" y="671.5" ></text>
</g>
<g >
<title>std::__1::enable_if&lt;__can_extract_map_key&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;::value, std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt;, bool&gt; &gt;::type std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__emplace_unique[abi:v15000]&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="958.9" y="917" width="6.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="961.87" y="927.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="776.4" y="309" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="779.39" y="319.5" ></text>
</g>
<g >
<title>DB::IDataType::forEachSubcolumn (10,101,010 samples, 0.52%)</title><rect x="940.6" y="933" width="6.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="943.62" y="943.5" ></text>
</g>
<g >
<title>arena_cache_bin_fill_small (10,101,010 samples, 0.52%)</title><rect x="302.0" y="613" width="6.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="304.96" y="623.5" ></text>
</g>
<g >
<title>std::__1::__function::__policy_func&lt;void  (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1365" width="1161.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="25.16" y="1375.5" >std::__1::__function::__policy_func&lt;void </text>
</g>
<g >
<title>Poco::JSON::Stringifier::stringify (20,202,020 samples, 1.03%)</title><rect x="1153.5" y="789" width="12.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1156.51" y="799.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="642.6" y="741" width="6.1" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="645.58" y="751.5" ></text>
</g>
<g >
<title>std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::~unordered_map[abi:v15000] (50,505,050 samples, 2.58%)</title><rect x="101.2" y="917" width="30.4" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="104.24" y="927.5" >st..</text>
</g>
<g >
<title>rtree_leaf_elm_bits_decode (10,101,010 samples, 0.52%)</title><rect x="1141.3" y="341" width="6.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1144.34" y="351.5" ></text>
</g>
<g >
<title>DB::IDataType::getSerialization (20,202,020 samples, 1.03%)</title><rect x="703.4" y="789" width="12.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="706.40" y="799.5" ></text>
</g>
<g >
<title>pa_alloc (10,101,010 samples, 0.52%)</title><rect x="344.5" y="597" width="6.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="347.54" y="607.5" ></text>
</g>
<g >
<title>void std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::insert[abi:v15000]&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="469" width="12.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1028.77" y="479.5" ></text>
</g>
<g >
<title>void DB::PODArray&lt;long, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::push_back&lt;long&gt; (10,101,010 samples, 0.52%)</title><rect x="587.8" y="725" width="6.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="590.84" y="735.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="898.0" y="245" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="901.04" y="255.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="569.6" y="597" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="572.59" y="607.5" ></text>
</g>
<g >
<title>arena_ralloc_move_helper (10,101,010 samples, 0.52%)</title><rect x="344.5" y="693" width="6.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="347.54" y="703.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="946.7" y="853" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="949.70" y="863.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="131.6" y="693" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="134.65" y="703.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4Poco7Dynamic3VarEEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPSE_ (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="805" width="12.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1144.34" y="815.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="289.8" y="821" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="292.79" y="831.5" ></text>
</g>
<g >
<title>DB::MergeTreeBackgroundExecutor&lt;DB::DynamicRuntimeQueue&gt;::routine (10,101,010 samples, 0.52%)</title><rect x="1177.8" y="1045" width="6.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1180.84" y="1055.5" ></text>
</g>
<g >
<title>CurrentMemoryTracker::allocNoThrow (10,101,010 samples, 0.52%)</title><rect x="995.4" y="869" width="6.0" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="998.36" y="879.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::~vector[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="837.2" y="437" width="12.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="840.22" y="447.5" ></text>
</g>
<g >
<title>auto DB::MergingSortedAlgorithm::merge (50,505,050 samples, 2.58%)</title><rect x="314.1" y="709" width="30.4" height="15.0" fill="rgb(249,204,49)" rx="2" ry="2" />
<text  x="317.12" y="719.5" >au..</text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="466.2" y="661" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="469.19" y="671.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="691.2" y="581" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="694.24" y="591.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="831.1" y="293" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="834.13" y="303.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="764.2" y="613" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="767.23" y="623.5" ></text>
</g>
<g >
<title>sz_size2index_lookup_impl (10,101,010 samples, 0.52%)</title><rect x="946.7" y="677" width="6.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="949.70" y="687.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::OutputPort, std::__1::allocator&lt;DB::OutputPort&gt; &gt;::~__list_imp (30,303,030 samples, 1.55%)</title><rect x="849.4" y="565" width="18.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="852.38" y="575.5" ></text>
</g>
<g >
<title>tsdn_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="916.3" y="149" width="6.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="919.29" y="159.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="490.5" y="661" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="493.52" y="671.5" ></text>
</g>
<g >
<title>DB::(anonymous namespace)::writeColumnSingleGranule (60,606,060 samples, 3.09%)</title><rect x="143.8" y="901" width="36.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="146.81" y="911.5" >DB:..</text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::MergedBlockOutputStream&gt; &gt;::destroy[abi:v15000]&lt;DB::MergedBlockOutputStream, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="28.2" y="565" width="12.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="31.25" y="575.5" ></text>
</g>
<g >
<title>pac_stash_decayed (10,101,010 samples, 0.52%)</title><rect x="326.3" y="245" width="6.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="329.29" y="255.5" ></text>
</g>
<g >
<title>DB::(anonymous namespace)::convertRequiredExpressions (10,101,010 samples, 0.52%)</title><rect x="581.8" y="805" width="6.0" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="584.75" y="815.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN4Poco7Dynamic3VarETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS5_ (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="741" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1120.01" y="751.5" ></text>
</g>
<g >
<title>DB::NameAndTypePair::getNameInStorage (10,101,010 samples, 0.52%)</title><rect x="174.2" y="741" width="6.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="177.23" y="751.5" ></text>
</g>
<g >
<title>clone3 (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1493" width="1161.7" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="25.16" y="1503.5" >clone3</text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="764.2" y="677" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="767.23" y="687.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::ColumnVector&lt;unsigned long&gt; &gt; COWHelper&lt;DB::IColumnHelper&lt;DB::ColumnVector&lt;unsigned long&gt;, DB::ColumnFixedSizeHelper&gt;, DB::ColumnVector&lt;unsigned long&gt; &gt;::create&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="983.2" y="837" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="986.20" y="847.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt; &gt; &gt;::destroy (20,202,020 samples, 1.03%)</title><rect x="770.3" y="677" width="12.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="773.31" y="687.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__insert_unique[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="1019.7" y="821" width="18.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1022.69" y="831.5" ></text>
</g>
<g >
<title>DB::ColumnWithTypeAndName::~ColumnWithTypeAndName (10,101,010 samples, 0.52%)</title><rect x="910.2" y="341" width="6.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="913.21" y="351.5" ></text>
</g>
<g >
<title>isdalloct (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="421" width="12.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1144.34" y="431.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;::pair (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="741" width="12.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1028.77" y="751.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::~VarHolderImpl (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="549" width="12.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1144.34" y="559.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::vector (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="709" width="12.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1101.76" y="719.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="885.9" y="117" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="888.88" y="127.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="764.2" y="693" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="767.23" y="703.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::MergeTask&gt; &gt;::destroy[abi:v15000]&lt;DB::MergeTask, void, void&gt; (30,303,030 samples, 1.55%)</title><rect x="22.2" y="821" width="18.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="25.16" y="831.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.52%)</title><rect x="83.0" y="645" width="6.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="85.99" y="655.5" ></text>
</g>
<g >
<title>free_fastpath (10,101,010 samples, 0.52%)</title><rect x="855.5" y="197" width="6.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="858.46" y="207.5" ></text>
</g>
<g >
<title>pac_decay_to_limit (10,101,010 samples, 0.52%)</title><rect x="326.3" y="261" width="6.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="329.29" y="271.5" ></text>
</g>
<g >
<title>rtree_metadata_read (10,101,010 samples, 0.52%)</title><rect x="545.3" y="501" width="6.0" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="548.26" y="511.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="691.2" y="645" width="12.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="694.24" y="655.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="764.2" y="661" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="767.23" y="671.5" ></text>
</g>
<g >
<title>tcache_dalloc_small (10,101,010 samples, 0.52%)</title><rect x="34.3" y="181" width="6.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="37.33" y="191.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::~map[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="1044.0" y="837" width="18.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1047.02" y="847.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="946.7" y="837" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="949.70" y="847.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="40.4" y="917" width="12.2" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="43.41" y="927.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__get_long_pointer[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="685.2" y="645" width="6.0" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="688.15" y="655.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="435.8" y="629" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="438.77" y="639.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="618.2" y="645" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="621.25" y="655.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::realloc (10,101,010 samples, 0.52%)</title><rect x="344.5" y="773" width="6.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="347.54" y="783.5" ></text>
</g>
<g >
<title>DB::performRequiredConversions (10,101,010 samples, 0.52%)</title><rect x="581.8" y="821" width="6.0" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="584.75" y="831.5" ></text>
</g>
<g >
<title>tcache_bin_flush_impl (10,101,010 samples, 0.52%)</title><rect x="338.5" y="437" width="6.0" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="341.45" y="447.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::InputPort, std::__1::allocator&lt;DB::InputPort&gt; &gt;::~list (10,101,010 samples, 0.52%)</title><rect x="916.3" y="581" width="6.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="919.29" y="591.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="587.8" y="629" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="590.84" y="639.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::realloc (10,101,010 samples, 0.52%)</title><rect x="137.7" y="869" width="6.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="140.73" y="879.5" ></text>
</g>
<g >
<title>arena_salloc (10,101,010 samples, 0.52%)</title><rect x="715.6" y="517" width="6.0" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="718.57" y="527.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="606.1" y="709" width="12.1" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="609.08" y="719.5" ></text>
</g>
<g >
<title>rtree_leaf_maskbits (10,101,010 samples, 0.52%)</title><rect x="1050.1" y="293" width="6.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1053.10" y="303.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="253.3" y="757" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="256.30" y="767.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::~vector[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="52.6" y="965" width="18.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="55.58" y="975.5" ></text>
</g>
<g >
<title>AsyncMetrics (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1509" width="12.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="13.00" y="1519.5" ></text>
</g>
<g >
<title>fls_u64 (10,101,010 samples, 0.52%)</title><rect x="977.1" y="581" width="6.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="980.11" y="591.5" ></text>
</g>
<g >
<title>tsd_fast (10,101,010 samples, 0.52%)</title><rect x="508.8" y="501" width="6.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="511.76" y="511.5" ></text>
</g>
<g >
<title>DB::MergeTreeBackgroundExecutor&lt;DB::DynamicRuntimeQueue&gt;::routine (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1061" width="1161.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="25.16" y="1071.5" >DB::MergeTreeBackgroundExecutor&lt;DB::DynamicRuntimeQueue&gt;::routine</text>
</g>
<g >
<title>peak_alloc_event_wait_get (10,101,010 samples, 0.52%)</title><rect x="22.2" y="325" width="6.0" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="25.16" y="335.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Array&gt;::~VarHolderImpl (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="693" width="12.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1053.10" y="703.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="125.6" y="773" width="6.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="128.57" y="783.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt; &gt; &gt;::__base_destruct_at_end[abi:v15000] (222,222,220 samples, 11.34%)</title><rect x="788.6" y="805" width="133.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="791.56" y="815.5" >std::__1::vector..</text>
</g>
<g >
<title>Poco::Dynamic::Var::~Var (40,404,040 samples, 2.06%)</title><rect x="1037.9" y="917" width="24.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1040.94" y="927.5" >P..</text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="581.8" y="709" width="6.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="584.75" y="719.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="569.6" y="725" width="12.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="572.59" y="735.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="174.2" y="565" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="177.23" y="575.5" ></text>
</g>
<g >
<title>tcache_bin_flush_small (10,101,010 samples, 0.52%)</title><rect x="34.3" y="165" width="6.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="37.33" y="175.5" ></text>
</g>
<g >
<title>inallocx (10,101,010 samples, 0.52%)</title><rect x="253.3" y="741" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="256.30" y="751.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::MergingSortedTransform, std::__1::allocator&lt;DB::MergingSortedTransform&gt; &gt;::__on_zero_shared (30,303,030 samples, 1.55%)</title><rect x="892.0" y="693" width="18.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="894.96" y="703.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="293" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1010.53" y="303.5" ></text>
</g>
<g >
<title>void std::__1::list&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::__emplace_back[abi:v15000]&lt;DB::NameAndTypePair const&amp;&gt; (20,202,020 samples, 1.03%)</title><rect x="472.3" y="789" width="12.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="475.27" y="799.5" ></text>
</g>
<g >
<title>DB::MergeTreeReaderCompact::~MergeTreeReaderCompact (50,505,050 samples, 2.58%)</title><rect x="758.1" y="757" width="30.5" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="761.14" y="767.5" >DB..</text>
</g>
<g >
<title>asm_exc_page_fault (10,101,010 samples, 0.52%)</title><rect x="83.0" y="677" width="6.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="85.99" y="687.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::chameleon_ptr&lt;DB::IColumn&gt;::~chameleon_ptr (10,101,010 samples, 0.52%)</title><rect x="399.3" y="709" width="6.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="402.28" y="719.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="885.9" y="101" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="888.88" y="111.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var* std::__1::construct_at[abi:v15000]&lt;Poco::Dynamic::Var, Poco::Dynamic::Var&amp;, Poco::Dynamic::Var*&gt; (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="581" width="12.1" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="1028.77" y="591.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="624.3" y="741" width="6.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="627.33" y="751.5" ></text>
</g>
<g >
<title>std::__1::deque&lt;DB::ExecutingGraph::Node*, AllocatorWithMemoryTracking&lt;DB::ExecutingGraph::Node*&gt; &gt;::__add_back_capacity (10,101,010 samples, 0.52%)</title><rect x="295.9" y="869" width="6.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="298.88" y="879.5" ></text>
</g>
<g >
<title>std::__1::__function::__default_alloc_func&lt;DB::MergePlainMergeTreeTask::prepare (30,303,030 samples, 1.55%)</title><rect x="22.2" y="965" width="18.2" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="25.16" y="975.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::vector (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="805" width="6.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1095.68" y="815.5" ></text>
</g>
<g >
<title>pac_alloc_real (10,101,010 samples, 0.52%)</title><rect x="593.9" y="389" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="596.92" y="399.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="40.4" y="885" width="12.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="43.41" y="895.5" ></text>
</g>
<g >
<title>decltype  (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1429" width="1161.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="25.16" y="1439.5" >decltype </text>
</g>
<g >
<title>tcache_dalloc_small (10,101,010 samples, 0.52%)</title><rect x="1147.4" y="389" width="6.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1150.42" y="399.5" ></text>
</g>
<g >
<title>arena_malloc (10,101,010 samples, 0.52%)</title><rect x="563.5" y="533" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="566.51" y="543.5" ></text>
</g>
<g >
<title>DB::ISource::tryGenerate (525,252,520 samples, 26.80%)</title><rect x="472.3" y="869" width="316.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="475.27" y="879.5" >DB::ISource::tryGenerate</text>
</g>
<g >
<title>DB::Block::cloneWithColumns (30,303,030 samples, 1.55%)</title><rect x="277.6" y="965" width="18.3" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="280.63" y="975.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;boost::multi_index::detail::sequenced_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;DB::ColumnDescription, std::__1::allocator&lt;DB::ColumnDescription&gt; &gt; &gt; &gt; &gt; &gt;::construct[abi:v15000]&lt;DB::ColumnDescription, DB::ColumnDescription, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="934.5" y="773" width="6.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="937.54" y="783.5" ></text>
</g>
<g >
<title>tcache_alloc_small_hard (10,101,010 samples, 0.52%)</title><rect x="563.5" y="501" width="6.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="566.51" y="511.5" ></text>
</g>
<g >
<title>Poco::JSON::Array::add (40,404,040 samples, 2.06%)</title><rect x="1062.3" y="917" width="24.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1065.27" y="927.5" >P..</text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="302.0" y="789" width="6.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="304.96" y="799.5" ></text>
</g>
<g >
<title>std::__1::deque&lt;DB::ExecutingGraph::Node*, AllocatorWithMemoryTracking&lt;DB::ExecutingGraph::Node*&gt; &gt;::push_back (10,101,010 samples, 0.52%)</title><rect x="295.9" y="885" width="6.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="298.88" y="895.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="460.1" y="565" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="463.10" y="575.5" ></text>
</g>
<g >
<title>tcache_get_from_ind (10,101,010 samples, 0.52%)</title><rect x="320.2" y="533" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="323.21" y="543.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::~list (10,101,010 samples, 0.52%)</title><rect x="22.2" y="613" width="6.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="25.16" y="623.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="898.0" y="357" width="6.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="901.04" y="367.5" ></text>
</g>
<g >
<title>std::__1::optional&lt;DB::StatisticDescription&gt;::optional[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="934.5" y="725" width="6.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="937.54" y="735.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="624.3" y="501" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="627.33" y="511.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="673.0" y="677" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="675.99" y="687.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="725" width="6.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1174.75" y="735.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="916.3" y="293" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="919.29" y="303.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="861.5" y="373" width="6.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="864.55" y="383.5" ></text>
</g>
<g >
<title>tsd_thread_deallocatedp_get (10,101,010 samples, 0.52%)</title><rect x="794.6" y="101" width="6.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="797.64" y="111.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4Poco7Dynamic3VarEEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPSE_ (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="805" width="6.0" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1138.26" y="815.5" ></text>
</g>
<g >
<title>te_event_trigger (10,101,010 samples, 0.52%)</title><rect x="587.8" y="517" width="6.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="590.84" y="527.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="107.3" y="837" width="18.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="110.32" y="847.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::~__tree (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="661" width="6.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1065.27" y="671.5" ></text>
</g>
<g >
<title>DB::ColumnsDescription::addSubcolumns (20,202,020 samples, 1.03%)</title><rect x="922.4" y="901" width="12.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="925.37" y="911.5" ></text>
</g>
<g >
<title>std::__1::unique_ptr&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;, std::__1::__tree_node_destructor&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt; &gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__construct_node&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="853" width="12.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1101.76" y="863.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="1123.1" y="693" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1126.09" y="703.5" ></text>
</g>
<g >
<title>rtree_read_independent (10,101,010 samples, 0.52%)</title><rect x="867.6" y="229" width="6.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="870.63" y="239.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="472.3" y="677" width="12.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="475.27" y="687.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::__clear[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="789" width="6.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1120.01" y="799.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="437" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1059.19" y="447.5" ></text>
</g>
<g >
<title>DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::dealloc (10,101,010 samples, 0.52%)</title><rect x="819.0" y="405" width="6.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="821.97" y="415.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::destruct (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="725" width="6.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1040.94" y="735.5" ></text>
</g>
<g >
<title>arena_salloc (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="357" width="6.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1120.01" y="367.5" ></text>
</g>
<g >
<title>std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::~unordered_map[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="892.0" y="421" width="6.0" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="894.96" y="431.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::InputPort, std::__1::allocator&lt;DB::InputPort&gt; &gt;::clear (30,303,030 samples, 1.55%)</title><rect x="788.6" y="549" width="18.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="791.56" y="559.5" ></text>
</g>
<g >
<title>thread_alloc_event (10,101,010 samples, 0.52%)</title><rect x="1074.4" y="469" width="6.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1077.43" y="479.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::~Var (10,101,010 samples, 0.52%)</title><rect x="1044.0" y="709" width="6.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1047.02" y="719.5" ></text>
</g>
<g >
<title>boost::multi_index::detail::index_base&lt;DB::ColumnDescription, boost::multi_index::indexed_by&lt;boost::multi_index::sequenced&lt;boost::multi_index::tag&lt;mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt; &gt;, boost::multi_index::ordered_unique&lt;boost::multi_index::member&lt;DB::ColumnDescription, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, &amp;DB::ColumnDescription::name&gt;, mpl_::na, mpl_::na&gt;, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt;, std::__1::allocator&lt;DB::ColumnDescription&gt; &gt;::final_insert_rv_ (10,101,010 samples, 0.52%)</title><rect x="934.5" y="885" width="6.1" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="937.54" y="895.5" ></text>
</g>
<g >
<title>std::__1::__shared_count::__add_shared[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="502.7" y="677" width="6.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="505.68" y="687.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="1044.0" y="645" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1047.02" y="655.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="454.0" y="709" width="12.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="457.02" y="719.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="624.3" y="693" width="6.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="627.33" y="703.5" ></text>
</g>
<g >
<title>tcache_alloc_small_hard (10,101,010 samples, 0.52%)</title><rect x="302.0" y="629" width="6.0" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="304.96" y="639.5" ></text>
</g>
<g >
<title>CurrentMemoryTracker::allocImpl (10,101,010 samples, 0.52%)</title><rect x="995.4" y="853" width="6.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="998.36" y="863.5" ></text>
</g>
<g >
<title>tsdn_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="776.4" y="277" width="6.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="779.39" y="287.5" ></text>
</g>
<g >
<title>tsd_state_get (10,101,010 samples, 0.52%)</title><rect x="776.4" y="261" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="779.39" y="271.5" ></text>
</g>
<g >
<title>std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::__hash_len_16 (10,101,010 samples, 0.52%)</title><rect x="533.1" y="693" width="6.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="536.09" y="703.5" ></text>
</g>
<g >
<title>thread_dalloc_event (20,202,020 samples, 1.03%)</title><rect x="569.6" y="645" width="12.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="572.59" y="655.5" ></text>
</g>
<g >
<title>Poco::JSON::Stringifier::formatString (10,101,010 samples, 0.52%)</title><rect x="1153.5" y="773" width="6.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1156.51" y="783.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="22.2" y="501" width="6.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="25.16" y="511.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="557.4" y="597" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="560.42" y="607.5" ></text>
</g>
<g >
<title>void std::__1::__function::__policy_invoker&lt;void  (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1349" width="1161.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="25.16" y="1359.5" >void std::__1::__function::__policy_invoker&lt;void </text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::clear (30,303,030 samples, 1.55%)</title><rect x="484.4" y="773" width="18.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="487.43" y="783.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="898.0" y="341" width="6.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="901.04" y="351.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;unsigned long&gt; &gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="302.0" y="853" width="6.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="304.96" y="863.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="879.8" y="245" width="12.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="882.79" y="255.5" ></text>
</g>
<g >
<title>tsd_fetch_slow (10,101,010 samples, 0.52%)</title><rect x="283.7" y="629" width="6.1" height="15.0" fill="rgb(249,204,49)" rx="2" ry="2" />
<text  x="286.71" y="639.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="22.2" y="485" width="6.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="25.16" y="495.5" ></text>
</g>
<g >
<title>DB::ColumnWithTypeAndName::cloneEmpty (10,101,010 samples, 0.52%)</title><rect x="70.8" y="917" width="6.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="73.82" y="927.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="898.0" y="309" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="901.04" y="319.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="213" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1059.19" y="223.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="867.6" y="309" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="870.63" y="319.5" ></text>
</g>
<g >
<title>tsd_peak_alloc_event_wait_get (10,101,010 samples, 0.52%)</title><rect x="22.2" y="309" width="6.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="25.16" y="319.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="904.1" y="437" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="907.12" y="447.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB10OutputPortETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (20,202,020 samples, 1.03%)</title><rect x="806.8" y="517" width="12.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="809.80" y="527.5" ></text>
</g>
<g >
<title>start_thread (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1477" width="1161.7" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="25.16" y="1487.5" >start_thread</text>
</g>
<g >
<title>thread_alloc_event (10,101,010 samples, 0.52%)</title><rect x="721.6" y="533" width="6.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="724.65" y="543.5" ></text>
</g>
<g >
<title>arena_slab_alloc (20,202,020 samples, 1.03%)</title><rect x="368.9" y="613" width="12.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="371.87" y="623.5" ></text>
</g>
<g >
<title>std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::end[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="265.5" y="917" width="6.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="268.46" y="927.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="496.6" y="629" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="499.60" y="639.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="782.5" y="389" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="785.47" y="399.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="733.8" y="517" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="736.81" y="527.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="758.1" y="517" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="761.14" y="527.5" ></text>
</g>
<g >
<title>void std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::insert[abi:v15000]&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt; &gt; (30,303,030 samples, 1.55%)</title><rect x="1068.4" y="709" width="18.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1071.35" y="719.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="764.2" y="485" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="767.23" y="495.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="613" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1065.27" y="623.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="1050.1" y="437" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1053.10" y="447.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="837.2" y="245" width="12.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="840.22" y="255.5" ></text>
</g>
<g >
<title>void (anonymous namespace)::writeString&lt;std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;, long&gt; (10,101,010 samples, 0.52%)</title><rect x="1153.5" y="741" width="6.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1156.51" y="751.5" ></text>
</g>
<g >
<title>DB::IDataType::getSerialization (10,101,010 samples, 0.52%)</title><rect x="600.0" y="773" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="603.00" y="783.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init_copy_ctor_external (10,101,010 samples, 0.52%)</title><rect x="964.9" y="869" width="6.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="967.95" y="879.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;DB::ISerialization::Substream&gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="514.8" y="661" width="6.1" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="517.85" y="671.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="922.4" y="741" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="925.37" y="751.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="764.2" y="469" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="767.23" y="479.5" ></text>
</g>
<g >
<title>_ZNSt3__110__function13__policy_funcIFPN2DB10ReadBufferERKNS2_14ISerialization13SubstreamPathEEEC2B6v15000IZNS2_34MergeTreeReaderCompactSingleBuffer8readRowsEmmbmRNS_6vectorIN3COWINS2_7IColumnEE13immutable_ptrISF_EENS_9allocatorISI_EEEEE3$_0vEEOT_ (10,101,010 samples, 0.52%)</title><rect x="752.1" y="805" width="6.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="755.06" y="815.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="1013.6" y="485" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1016.61" y="495.5" ></text>
</g>
<g >
<title>std::__1::__split_buffer&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt;&amp;&gt;::clear[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="853" width="6.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1065.27" y="863.5" ></text>
</g>
<g >
<title>te_ctx_get (10,101,010 samples, 0.52%)</title><rect x="764.2" y="357" width="6.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="767.23" y="367.5" ></text>
</g>
<g >
<title>extent_split_interior (10,101,010 samples, 0.52%)</title><rect x="302.0" y="453" width="6.0" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="304.96" y="463.5" ></text>
</g>
<g >
<title>std::__1::__builtin_new_allocator::__deallocate_bytes (10,101,010 samples, 0.52%)</title><rect x="928.5" y="821" width="6.0" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="931.45" y="831.5" ></text>
</g>
<g >
<title>Poco::JSON::Stringifier::stringify (20,202,020 samples, 1.03%)</title><rect x="1153.5" y="837" width="12.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1156.51" y="847.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="496.6" y="565" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="499.60" y="575.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::__clear[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="629" width="12.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1053.10" y="639.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="131.6" y="789" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="134.65" y="799.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="28.2" y="261" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="31.25" y="271.5" ></text>
</g>
<g >
<title>sz_psz2ind (10,101,010 samples, 0.52%)</title><rect x="593.9" y="261" width="6.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="596.92" y="271.5" ></text>
</g>
<g >
<title>DB::MergedData::insertChunk (40,404,040 samples, 2.06%)</title><rect x="320.2" y="677" width="24.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="323.21" y="687.5" >D..</text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="910.2" y="181" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="913.21" y="191.5" ></text>
</g>
<g >
<title>DB::permuteBlockIfNeeded (121,212,120 samples, 6.19%)</title><rect x="198.6" y="933" width="72.9" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="201.56" y="943.5" >DB::perm..</text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__emplace_unique_key_args&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, unsigned long&amp;&gt; (20,202,020 samples, 1.03%)</title><rect x="247.2" y="869" width="12.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="250.22" y="879.5" ></text>
</g>
<g >
<title>std::__1::__split_buffer&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt;&amp;&gt;::__destruct_at_end[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="837" width="6.1" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1065.27" y="847.5" ></text>
</g>
<g >
<title>rtree_metadata_try_read_fast (10,101,010 samples, 0.52%)</title><rect x="441.9" y="549" width="6.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="444.86" y="559.5" ></text>
</g>
<g >
<title>emap_alloc_ctx_lookup (10,101,010 samples, 0.52%)</title><rect x="429.7" y="581" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="432.69" y="591.5" ></text>
</g>
<g >
<title>DB::Block::insert (20,202,020 samples, 1.03%)</title><rect x="454.0" y="821" width="12.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="457.02" y="831.5" ></text>
</g>
<g >
<title>tsd_reentrancy_level_get (10,101,010 samples, 0.52%)</title><rect x="843.3" y="181" width="6.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="846.30" y="191.5" ></text>
</g>
<g >
<title>DB::ColumnWithTypeAndName::~ColumnWithTypeAndName (10,101,010 samples, 0.52%)</title><rect x="898.0" y="325" width="6.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="901.04" y="335.5" ></text>
</g>
<g >
<title>sz_size2index_compute (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="581" width="6.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1138.26" y="591.5" ></text>
</g>
<g >
<title>std::__1::__shared_weak_count::__release_weak (10,101,010 samples, 0.52%)</title><rect x="782.5" y="469" width="6.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="785.47" y="479.5" ></text>
</g>
<g >
<title>tsdn_tsd (10,101,010 samples, 0.52%)</title><rect x="916.3" y="133" width="6.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="919.29" y="143.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="916.3" y="213" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="919.29" y="223.5" ></text>
</g>
<g >
<title>tsd_rtree_ctxp_get (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="197" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1010.53" y="207.5" ></text>
</g>
<g >
<title>ifree (20,202,020 samples, 1.03%)</title><rect x="825.1" y="341" width="12.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="828.05" y="351.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="293" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1059.19" y="303.5" ></text>
</g>
<g >
<title>CityHash_v1_0_2::CityHash128 (10,101,010 samples, 0.52%)</title><rect x="630.4" y="725" width="6.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="633.41" y="735.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="606.1" y="725" width="12.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="609.08" y="735.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="520.9" y="581" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="523.93" y="591.5" ></text>
</g>
<g >
<title>tcache_bin_flush_small (10,101,010 samples, 0.52%)</title><rect x="326.3" y="405" width="6.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="329.29" y="415.5" ></text>
</g>
<g >
<title>DB::IMergingAlgorithm::Status DB::MergingSortedAlgorithm::mergeImpl&lt;DB::SortingQueueImpl&lt;DB::SortCursor,  (50,505,050 samples, 2.58%)</title><rect x="314.1" y="693" width="30.4" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="317.12" y="703.5" >DB..</text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="885.9" y="165" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="888.88" y="175.5" ></text>
</g>
<g >
<title>tcache_dalloc_small (10,101,010 samples, 0.52%)</title><rect x="496.6" y="501" width="6.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="499.60" y="511.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10,101,010 samples, 0.52%)</title><rect x="606.1" y="533" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="609.08" y="543.5" ></text>
</g>
<g >
<title>tcache_salloc (10,101,010 samples, 0.52%)</title><rect x="1147.4" y="373" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1150.42" y="383.5" ></text>
</g>
<g >
<title>malloc_mutex_prof_accum (10,101,010 samples, 0.52%)</title><rect x="16.1" y="1029" width="6.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="19.08" y="1039.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="928.5" y="789" width="6.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="931.45" y="799.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="855.5" y="229" width="6.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="858.46" y="239.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="533" width="6.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1174.75" y="543.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="758.1" y="485" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="761.14" y="495.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="569.6" y="789" width="12.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="572.59" y="799.5" ></text>
</g>
<g >
<title>DB::InputPort::~InputPort (30,303,030 samples, 1.55%)</title><rect x="788.6" y="485" width="18.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="791.56" y="495.5" ></text>
</g>
<g >
<title>sz_size2index_compute (10,101,010 samples, 0.52%)</title><rect x="855.5" y="165" width="6.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="858.46" y="175.5" ></text>
</g>
<g >
<title>_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm25EEE10__dispatchB6v15000IONS1_9__variant15__value_visitorIRZN2DB22MergingSortedAlgorithm5mergeEvE3$_0EEJRNS0_6__baseILNS0_6_TraitE1EJNS8_16SortingQueueImplINS8_33SpecializedSingleColumnSortCursorINS8_12ColumnVectorIDuEEEELNS8_20SortingQueueStrategyE0EEENSG_INSH_INSI_ItEEEELSL_0EEENSG_INSH_INSI_IjEEEELSL_0EEENSG_INSH_INSI_ImEEEELSL_0EEENSG_INSH_INSI_IN4wide7integerILm128EjEEEEEELSL_0EEENSG_INSH_INSI_INSX_ILm256EjEEEEEELSL_0EEENSG_INSH_INSI_IDB8_EEEELSL_0EEENSG_INSH_INSI_IsEEEELSL_0EEENSG_INSH_INSI_IiEEEELSL_0EEENSG_INSH_INSI_IlEEEELSL_0EEENSG_INSH_INSI_INSX_ILm128EiEEEEEELSL_0EEENSG_INSH_INSI_INSX_ILm256EiEEEEEELSL_0EEENSG_INSH_INSI_IfEEEELSL_0EEENSG_INSH_INSI_IdEEEELSL_0EEENSG_INSH_INS8_13ColumnDecimalINS8_7DecimalIiEEEEEELSL_0EEENSG_INSH_INS1X_INS1Y_IlEEEEEELSL_0EEENSG_INSH_INS1X_INS1Y_IS1J_EEEEEELSL_0EEENSG_INSH_INS1X_INS1Y_IS1N_EEEEEELSL_0EEENSG_INSH_INS1X_INS8_10DateTime64EEEEELSL_0EEENSG_INSH_INSI_I13StrongTypedefISY_NS8_7UUIDTagEEEEEELSL_0EEENSG_INSH_INSI_INS8_4IPv4EEEEELSL_0EEENSG_INSH_INSI_INS8_4IPv6EEEEELSL_0EEENSG_INSH_INS8_12ColumnStringEEELSL_0EEENSG_INSH_INS8_17ColumnFixedStringEEELSL_0EEENSG_INS8_16SimpleSortCursorELSL_0EEENSG_INS8_10SortCursorELSL_0EEENSG_INS8_23SortCursorWithCollationELSL_0EEEEEEEEEDcT_DpT0_ (50,505,050 samples, 2.58%)</title><rect x="314.1" y="773" width="30.4" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="317.12" y="783.5" >_Z..</text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="22.2" y="437" width="6.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="25.16" y="447.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="174.2" y="645" width="6.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="177.23" y="655.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="466.2" y="645" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="469.19" y="655.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::Var (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="725" width="6.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1095.68" y="735.5" ></text>
</g>
<g >
<title>boost::intrusive_ptr&lt;DB::IColumn&gt;::operator= (40,404,040 samples, 2.06%)</title><rect x="320.2" y="645" width="24.3" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="323.21" y="655.5" >b..</text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt;::deallocate[abi:v15000] (40,404,040 samples, 2.06%)</title><rect x="101.2" y="853" width="24.4" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="104.24" y="863.5" >s..</text>
</g>
<g >
<title>Poco::Dynamic::VarHolder* Poco::Dynamic::VarHolder::cloneHolder&lt;Poco::JSON::Array&gt; (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="853" width="6.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1095.68" y="863.5" ></text>
</g>
<g >
<title>pai_alloc (10,101,010 samples, 0.52%)</title><rect x="593.9" y="421" width="6.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="596.92" y="431.5" ></text>
</g>
<g >
<title>DB::NamesAndTypesList::NamesAndTypesList&lt;std::__1::__wrap_iter&lt;DB::NameAndTypePair const*&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="472.3" y="821" width="12.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="475.27" y="831.5" ></text>
</g>
<g >
<title>emap_alloc_ctx_lookup (10,101,010 samples, 0.52%)</title><rect x="1147.4" y="341" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1150.42" y="351.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::destroy[abi:v15000]&lt;DB::ColumnWithTypeAndName, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="910.2" y="389" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="913.21" y="399.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="693" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1138.26" y="703.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.03%)</title><rect x="454.0" y="677" width="12.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="457.02" y="687.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="940.6" y="837" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="943.62" y="847.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (20,202,020 samples, 1.03%)</title><rect x="837.2" y="325" width="12.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="840.22" y="335.5" ></text>
</g>
<g >
<title>free_fastpath (10,101,010 samples, 0.52%)</title><rect x="782.5" y="325" width="6.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="785.47" y="335.5" ></text>
</g>
<g >
<title>aligned_usize_get (10,101,010 samples, 0.52%)</title><rect x="940.6" y="725" width="6.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="943.62" y="735.5" ></text>
</g>
<g >
<title>tcache_bin_flush_impl (10,101,010 samples, 0.52%)</title><rect x="58.7" y="533" width="6.0" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="61.66" y="543.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="174.2" y="693" width="6.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="177.23" y="703.5" ></text>
</g>
<g >
<title>boost::intrusive_ptr&lt;DB::IColumn const&gt;::~intrusive_ptr (20,202,020 samples, 1.03%)</title><rect x="58.7" y="837" width="12.1" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="61.66" y="847.5" ></text>
</g>
<g >
<title>Poco::JSON::Object::~Object (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="693" width="6.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1065.27" y="703.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="946.7" y="789" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="949.70" y="799.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;DB::OutputPort, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;DB::OutputPort, void, void&gt; (30,303,030 samples, 1.55%)</title><rect x="849.4" y="533" width="18.2" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="852.38" y="543.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB23MergedBlockOutputStreamETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (20,202,020 samples, 1.03%)</title><rect x="28.2" y="549" width="12.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="31.25" y="559.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="89.1" y="821" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="92.07" y="831.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="873.7" y="277" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="876.71" y="287.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="673.0" y="645" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="675.99" y="655.5" ></text>
</g>
<g >
<title>inallocx (10,101,010 samples, 0.52%)</title><rect x="977.1" y="693" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="980.11" y="703.5" ></text>
</g>
<g >
<title>boost::intrusive_ptr&lt;DB::IColumn const&gt;::~intrusive_ptr (10,101,010 samples, 0.52%)</title><rect x="393.2" y="693" width="6.1" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="396.20" y="703.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="131.6" y="853" width="6.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="134.65" y="863.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::destroy[abi:v15000]&lt;DB::ColumnWithTypeAndName, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="879.8" y="389" width="12.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="882.79" y="399.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="971.0" y="773" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="974.03" y="783.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::list (10,101,010 samples, 0.52%)</title><rect x="502.7" y="789" width="6.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="505.68" y="799.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::destroy[abi:v15000]&lt;Poco::Dynamic::Var, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="597" width="12.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1053.10" y="607.5" ></text>
</g>
<g >
<title>tsdn_rtree_ctx (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="229" width="6.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1010.53" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_futex (10,101,010 samples, 0.52%)</title><rect x="1177.8" y="933" width="6.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1180.84" y="943.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;* std::__1::construct_at[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;*&gt; (10,101,010 samples, 0.52%)</title><rect x="958.9" y="853" width="6.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="961.87" y="863.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="46.5" y="821" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="49.49" y="831.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="733.8" y="741" width="6.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="736.81" y="751.5" ></text>
</g>
<g >
<title>inallocx (10,101,010 samples, 0.52%)</title><rect x="1031.9" y="293" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1034.86" y="303.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="812.9" y="309" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="815.89" y="319.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="812.9" y="197" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="815.89" y="207.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="259.4" y="869" width="6.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="262.38" y="879.5" ></text>
</g>
<g >
<title>std::__1::basic_streambuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::sputn[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1153.5" y="709" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1156.51" y="719.5" ></text>
</g>
<g >
<title>DB::Block::~Block (20,202,020 samples, 1.03%)</title><rect x="837.2" y="453" width="12.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="840.22" y="463.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="557.4" y="677" width="6.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="560.42" y="687.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="581.8" y="773" width="6.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="584.75" y="783.5" ></text>
</g>
<g >
<title>clone3 (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1493" width="12.2" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="13.00" y="1503.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::size[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1001.4" y="741" width="6.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1004.44" y="751.5" ></text>
</g>
<g >
<title>sallocx (10,101,010 samples, 0.52%)</title><rect x="484.4" y="661" width="6.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="487.43" y="671.5" ></text>
</g>
<g >
<title>ThreadFromGlobalPoolImpl&lt;true&gt;::ThreadFromGlobalPoolImpl&lt;DB::AsynchronousMetrics::start (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1285" width="12.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="13.00" y="1295.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB9InputPortETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (20,202,020 samples, 1.03%)</title><rect x="837.2" y="517" width="12.2" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="840.22" y="527.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__shared_ptr_emplace&lt;DB::SerializationNumber&lt;long&gt;, std::__1::allocator&lt;DB::SerializationNumber&lt;long&gt; &gt; &gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="520.9" y="725" width="6.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="523.93" y="735.5" ></text>
</g>
<g >
<title>std::__1::__tree_node_base&lt;void*&gt;*&amp; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt; &gt; &gt;::__find_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="679.1" y="773" width="12.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="682.07" y="783.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_10shared_ptrIKN2DB14ISerializationEEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS7_ (10,101,010 samples, 0.52%)</title><rect x="782.5" y="661" width="6.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="785.47" y="671.5" ></text>
</g>
<g >
<title>te_ctx_next_event_fast_get (10,101,010 samples, 0.52%)</title><rect x="885.9" y="85" width="6.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="888.88" y="95.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="1098.8" y="373" width="6.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1101.76" y="383.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="624.3" y="677" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="627.33" y="687.5" ></text>
</g>
<g >
<title>DB::IMergeTreeDataPart::setColumns (70,707,070 samples, 3.61%)</title><rect x="922.4" y="949" width="42.5" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="925.37" y="959.5" >DB::..</text>
</g>
<g >
<title>DB::ColumnWithTypeAndName::~ColumnWithTypeAndName (10,101,010 samples, 0.52%)</title><rect x="131.6" y="821" width="6.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="134.65" y="831.5" ></text>
</g>
<g >
<title>void std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::insert[abi:v15000]&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="693" width="12.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1010.53" y="703.5" ></text>
</g>
<g >
<title>arena_ralloc_move_helper (20,202,020 samples, 1.03%)</title><rect x="368.9" y="693" width="12.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="371.87" y="703.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 1.03%)</title><rect x="569.6" y="709" width="12.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="572.59" y="719.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt; &gt; &gt;::destroy (20,202,020 samples, 1.03%)</title><rect x="770.3" y="581" width="12.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="773.31" y="591.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="849.4" y="341" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="852.38" y="351.5" ></text>
</g>
<g >
<title>te_ctx_get (10,101,010 samples, 0.52%)</title><rect x="435.8" y="597" width="6.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="438.77" y="607.5" ></text>
</g>
<g >
<title>bool std::__1::operator&lt;[abi:v15000]&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="952.8" y="805" width="6.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="955.78" y="815.5" ></text>
</g>
<g >
<title>std::__1::__function::__default_alloc_func&lt;ThreadFromGlobalPoolImpl&lt;false&gt;::ThreadFromGlobalPoolImpl&lt;ThreadPoolImpl&lt;ThreadFromGlobalPoolImpl&lt;false&gt; &gt;::scheduleImpl&lt;void&gt; (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1333" width="1161.7" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="25.16" y="1343.5" >std::__1::__function::__default_alloc_func&lt;ThreadFromGlobalPoolImpl&lt;false&gt;::ThreadFromGlobalPoolImpl&lt;ThreadPoolImpl&lt;ThreadFromGlobalPoolImpl&lt;false&gt; &gt;::scheduleImp..</text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__emplace_unique_key_args&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="277.6" y="901" width="12.2" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="280.63" y="911.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__clear[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="898.0" y="405" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="901.04" y="415.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="977.1" y="757" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="980.11" y="767.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (20,202,020 samples, 1.03%)</title><rect x="679.1" y="805" width="12.1" height="15.0" fill="rgb(230,117,27)" rx="2" ry="2" />
<text  x="682.07" y="815.5" ></text>
</g>
<g >
<title>mallocx_tcache_get (10,101,010 samples, 0.52%)</title><rect x="527.0" y="613" width="6.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="530.01" y="623.5" ></text>
</g>
<g >
<title>sz_s2u_lookup (10,101,010 samples, 0.52%)</title><rect x="977.1" y="645" width="6.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="980.11" y="655.5" ></text>
</g>
<g >
<title>DB::InputPort::~InputPort (10,101,010 samples, 0.52%)</title><rect x="916.3" y="485" width="6.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="919.29" y="495.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::data[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="685.2" y="677" width="6.0" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="688.15" y="687.5" ></text>
</g>
<g >
<title>tsd_tcache_gc_dalloc_event_waitp_get (10,101,010 samples, 0.52%)</title><rect x="910.2" y="37" width="6.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="913.21" y="47.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="496.6" y="661" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="499.60" y="671.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="295.9" y="773" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="298.88" y="783.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="1050.1" y="421" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1053.10" y="431.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::MergingSortedTransform&gt; &gt;::destroy[abi:v15000]&lt;DB::MergingSortedTransform, void, void&gt; (30,303,030 samples, 1.55%)</title><rect x="892.0" y="677" width="18.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="894.96" y="687.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="879.8" y="293" width="12.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="882.79" y="303.5" ></text>
</g>
<g >
<title>atomic_enum_to_builtin (10,101,010 samples, 0.52%)</title><rect x="119.5" y="629" width="6.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="122.48" y="639.5" ></text>
</g>
<g >
<title>sz_index2size (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="341" width="6.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1120.01" y="351.5" ></text>
</g>
<g >
<title>DB::Block::~Block (10,101,010 samples, 0.52%)</title><rect x="971.0" y="917" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="974.03" y="927.5" ></text>
</g>
<g >
<title>inallocx (10,101,010 samples, 0.52%)</title><rect x="879.8" y="181" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="882.79" y="191.5" ></text>
</g>
<g >
<title>void std::__1::__function::__policy_invoker&lt;void  (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1157" width="1161.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="25.16" y="1167.5" >void std::__1::__function::__policy_invoker&lt;void </text>
</g>
<g >
<title>DB::MergedBlockOutputStream::~MergedBlockOutputStream (20,202,020 samples, 1.03%)</title><rect x="28.2" y="517" width="12.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="31.25" y="527.5" ></text>
</g>
<g >
<title>std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::~unordered_map[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="806.8" y="437" width="12.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="809.80" y="447.5" ></text>
</g>
<g >
<title>isdalloct (10,101,010 samples, 0.52%)</title><rect x="873.7" y="165" width="6.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="876.71" y="175.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="910.2" y="357" width="6.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="913.21" y="367.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;DB::NameAndTypePair, void*&gt; &gt; &gt;::construct[abi:v15000]&lt;DB::NameAndTypePair, DB::NameAndTypePair const&amp;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="502.7" y="757" width="6.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="505.68" y="767.5" ></text>
</g>
<g >
<title>std::__1::__shared_count::__release_shared[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="22.2" y="853" width="18.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="25.16" y="863.5" ></text>
</g>
<g >
<title>free_default (10,101,010 samples, 0.52%)</title><rect x="58.7" y="693" width="6.0" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="61.66" y="703.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__clear[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="837.2" y="421" width="12.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="840.22" y="431.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1098.8" y="453" width="6.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1101.76" y="463.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="1129.2" y="821" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1132.18" y="831.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="739.9" y="709" width="12.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="742.90" y="719.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ISerialization::Substream, std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt;::push_back[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="660.8" y="773" width="18.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="663.82" y="783.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;::~pair (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="549" width="6.1" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1065.27" y="559.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="691.2" y="693" width="12.2" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="694.24" y="703.5" ></text>
</g>
<g >
<title>te_next_event_compute (10,101,010 samples, 0.52%)</title><rect x="168.1" y="421" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="171.14" y="431.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;DB::OutputPort, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;DB::OutputPort, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="910.2" y="533" width="6.1" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="913.21" y="543.5" ></text>
</g>
<g >
<title>_ZNSt3__116__thread_executeB6v15000INS_10unique_ptrINS_15__thread_structENS_14default_deleteIS2_EEEEZN14ThreadPoolImplINS_6threadEE12scheduleImplIvEET_NS_8functionIFvvEEE8PriorityNS_8optionalImEEbEUlvE0_JETpTnmJEEEvRNS_5tupleIJSA_T0_DpT1_EEENS_15__tuple_indicesIJXspT2_EEEE (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1445" width="12.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="13.00" y="1455.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var* std::__1::construct_at[abi:v15000]&lt;Poco::Dynamic::Var, Poco::Dynamic::Var&amp;, Poco::Dynamic::Var*&gt; (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="645" width="12.1" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="1101.76" y="655.5" ></text>
</g>
<g >
<title>DB::MergeTask::MergeProjectionsStage::execute (424,242,420 samples, 21.65%)</title><rect x="922.4" y="1013" width="255.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="925.37" y="1023.5" >DB::MergeTask::MergeProjectionsSta..</text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="508.8" y="677" width="6.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="511.76" y="687.5" ></text>
</g>
<g >
<title>DB::IProcessor::~IProcessor (20,202,020 samples, 1.03%)</title><rect x="892.0" y="581" width="12.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="894.96" y="591.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="971.0" y="757" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="974.03" y="767.5" ></text>
</g>
<g >
<title>tcache_alloc_small_hard (10,101,010 samples, 0.52%)</title><rect x="344.5" y="645" width="6.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="347.54" y="655.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="508.8" y="533" width="6.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="511.76" y="543.5" ></text>
</g>
<g >
<title>DB::ISerialization::EnumerateStreamsSettings::~EnumerateStreamsSettings (10,101,010 samples, 0.52%)</title><rect x="508.8" y="773" width="6.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="511.76" y="783.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__shared_ptr_emplace&lt;DB::(anonymous namespace)::DeserializeStateSparse, std::__1::allocator&lt;DB::(anonymous namespace)::DeserializeStateSparse&gt; &gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="776.4" y="421" width="6.1" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="779.39" y="431.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="739.9" y="741" width="12.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="742.90" y="751.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="545.3" y="613" width="6.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="548.26" y="623.5" ></text>
</g>
<g >
<title>lock_vma_under_rcu (10,101,010 samples, 0.52%)</title><rect x="83.0" y="629" width="6.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="85.99" y="639.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1019.7" y="773" width="6.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1022.69" y="783.5" ></text>
</g>
<g >
<title>DB::SerializationInfoByName::writeJSON (282,828,280 samples, 14.43%)</title><rect x="995.4" y="933" width="170.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="998.36" y="943.5" >DB::SerializationInfoB..</text>
</g>
<g >
<title>std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;::clear[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="441.9" y="837" width="6.0" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="444.86" y="847.5" ></text>
</g>
<g >
<title>std::__1::__shared_weak_count::__release_shared[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="28.2" y="613" width="12.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="31.25" y="623.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="484.4" y="725" width="12.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="487.43" y="735.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="770.3" y="501" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="773.31" y="511.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="873.7" y="197" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="876.71" y="207.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__deallocate_node (20,202,020 samples, 1.03%)</title><rect x="849.4" y="405" width="12.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="852.38" y="415.5" ></text>
</g>
<g >
<title>DB::ColumnsDescription::tryGetColumnOrSubcolumn (20,202,020 samples, 1.03%)</title><rect x="691.2" y="789" width="12.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="694.24" y="799.5" ></text>
</g>
<g >
<title>std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;::__get_value[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="235.1" y="869" width="6.0" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="238.05" y="879.5" ></text>
</g>
<g >
<title>malloc_default (20,202,020 samples, 1.03%)</title><rect x="715.6" y="581" width="12.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="718.57" y="591.5" ></text>
</g>
<g >
<title>DB::Nested::concatenateName (20,202,020 samples, 1.03%)</title><rect x="606.1" y="773" width="12.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="609.08" y="783.5" ></text>
</g>
<g >
<title>tsd_thread_allocated_next_event_fastp_get_unsafe (10,101,010 samples, 0.52%)</title><rect x="125.6" y="565" width="6.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="128.57" y="575.5" ></text>
</g>
<g >
<title>aligned_usize_get (10,101,010 samples, 0.52%)</title><rect x="581.8" y="613" width="6.0" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="584.75" y="623.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="873.7" y="293" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="876.71" y="303.5" ></text>
</g>
<g >
<title>witness_assert_depth (10,101,010 samples, 0.52%)</title><rect x="40.4" y="773" width="6.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="43.41" y="783.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="308.0" y="645" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="311.04" y="655.5" ></text>
</g>
<g >
<title>DB::ISimpleTransform::work (212,121,210 samples, 10.82%)</title><rect x="344.5" y="885" width="127.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="347.54" y="895.5" >DB::ISimpleTrans..</text>
</g>
<g >
<title>tsd_fetch (10,101,010 samples, 0.52%)</title><rect x="89.1" y="789" width="6.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="92.07" y="799.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::shallowMutate (30,303,030 samples, 1.55%)</title><rect x="83.0" y="901" width="18.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="85.99" y="911.5" ></text>
</g>
<g >
<title>DB::ReadBuffer::next (10,101,010 samples, 0.52%)</title><rect x="654.7" y="773" width="6.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="657.74" y="783.5" ></text>
</g>
<g >
<title>std::__1::__split_buffer&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt;&amp;&gt;::~__split_buffer (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="869" width="6.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1065.27" y="879.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="417.5" y="725" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="420.53" y="735.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::InputPort, std::__1::allocator&lt;DB::InputPort&gt; &gt;::clear (10,101,010 samples, 0.52%)</title><rect x="916.3" y="549" width="6.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="919.29" y="559.5" ></text>
</g>
<g >
<title>edata_szind_get_maybe_invalid (10,101,010 samples, 0.52%)</title><rect x="393.2" y="469" width="6.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="396.20" y="479.5" ></text>
</g>
<g >
<title>std::__1::__shared_weak_count::__release_shared[abi:v15000] (222,222,220 samples, 11.34%)</title><rect x="788.6" y="725" width="133.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="791.56" y="735.5" >std::__1::__shar..</text>
</g>
<g >
<title>void DB::PODArray&lt;long, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::push_back&lt;long const&amp;&gt; (10,101,010 samples, 0.52%)</title><rect x="344.5" y="821" width="6.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="347.54" y="831.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="417.5" y="741" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="420.53" y="751.5" ></text>
</g>
<g >
<title>tcache_alloc_small (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="677" width="6.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1168.67" y="687.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::~__hash_table (10,101,010 samples, 0.52%)</title><rect x="916.3" y="421" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="919.29" y="431.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="295.9" y="821" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="298.88" y="831.5" ></text>
</g>
<g >
<title>std::__1::shared_ptr&lt;DB::SerializationSparse&gt; std::__1::make_shared[abi:v15000]&lt;DB::SerializationSparse, std::__1::shared_ptr&lt;DB::ISerialization const&gt;, void&gt; (10,101,010 samples, 0.52%)</title><rect x="703.4" y="725" width="6.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="706.40" y="735.5" ></text>
</g>
<g >
<title>realloc (10,101,010 samples, 0.52%)</title><rect x="435.8" y="693" width="6.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="438.77" y="703.5" ></text>
</g>
<g >
<title>void boost::sp_adl_block::intrusive_ptr_release&lt;DB::IColumn, boost::sp_adl_block::thread_safe_counter&gt; (10,101,010 samples, 0.52%)</title><rect x="393.2" y="677" width="6.1" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="396.20" y="687.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="861.5" y="277" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="864.55" y="287.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="861.5" y="293" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="864.55" y="303.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="629" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1065.27" y="639.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="964.9" y="853" width="6.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="967.95" y="863.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;DB::NameAndTypePair, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;DB::NameAndTypePair, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="758.1" y="661" width="6.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="761.14" y="671.5" ></text>
</g>
<g >
<title>std::__1::reverse_iterator&lt;Poco::Dynamic::Var*&gt; std::__1::__uninitialized_allocator_move_if_noexcept[abi:v15000]&lt;std::__1::allocator&lt;Poco::Dynamic::Var&gt;, std::__1::reverse_iterator&lt;Poco::Dynamic::Var*&gt;, std::__1::reverse_iterator&lt;Poco::Dynamic::Var*&gt;, std::__1::reverse_iterator&lt;Poco::Dynamic::Var*&gt; &gt; (30,303,030 samples, 1.55%)</title><rect x="1068.4" y="853" width="18.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1071.35" y="863.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::InputPort, std::__1::allocator&lt;DB::InputPort&gt; &gt;::~__list_imp (10,101,010 samples, 0.52%)</title><rect x="916.3" y="565" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="919.29" y="575.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;long&gt;::~ColumnVector (10,101,010 samples, 0.52%)</title><rect x="320.2" y="597" width="6.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="323.21" y="607.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.03%)</title><rect x="691.2" y="613" width="12.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="694.24" y="623.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::destroy[abi:v15000]&lt;DB::ColumnWithTypeAndName, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="837.2" y="389" width="12.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="840.22" y="399.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="910.2" y="373" width="6.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="913.21" y="383.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_6vectorINS_10shared_ptrIN2DB10IProcessorEEENS_9allocatorIS5_EEEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPSA_ (222,222,220 samples, 11.34%)</title><rect x="788.6" y="869" width="133.8" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="791.56" y="879.5" >_ZNSt3__110destr..</text>
</g>
<g >
<title>DB::ColumnVector&lt;long&gt; const&amp; typeid_cast&lt;DB::ColumnVector&lt;long&gt; const&amp;, DB::IColumn const&gt; (10,101,010 samples, 0.52%)</title><rect x="149.9" y="869" width="6.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="152.90" y="879.5" ></text>
</g>
<g >
<title>decltype  (50,505,050 samples, 2.58%)</title><rect x="314.1" y="725" width="30.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="317.12" y="735.5" >de..</text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string (20,202,020 samples, 1.03%)</title><rect x="472.3" y="709" width="12.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="475.27" y="719.5" ></text>
</g>
<g >
<title>te_next_event_compute (10,101,010 samples, 0.52%)</title><rect x="1129.2" y="693" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1132.18" y="703.5" ></text>
</g>
<g >
<title>std::__1::enable_if&lt;__can_extract_map_key&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;::value, std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt;, bool&gt; &gt;::type std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__emplace_unique[abi:v15000]&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, unsigned long&amp;&gt; (20,202,020 samples, 1.03%)</title><rect x="247.2" y="885" width="12.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="250.22" y="895.5" ></text>
</g>
<g >
<title>DB::WriteBufferFromFileDescriptorDiscardOnFailure::nextImpl (10,101,010 samples, 0.52%)</title><rect x="636.5" y="613" width="6.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="639.49" y="623.5" ></text>
</g>
<g >
<title>DB::executeJob (797,979,790 samples, 40.72%)</title><rect x="308.0" y="901" width="480.6" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="311.04" y="911.5" >DB::executeJob</text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="485" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1065.27" y="495.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;AllocatorWithMemoryTracking&lt;DB::ExecutingGraph::Node*&gt; &gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="295.9" y="853" width="6.1" height="15.0" fill="rgb(249,204,49)" rx="2" ry="2" />
<text  x="298.88" y="863.5" ></text>
</g>
<g >
<title>witness_assert_depth_to_rank (10,101,010 samples, 0.52%)</title><rect x="739.9" y="629" width="6.1" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="742.90" y="639.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="946.7" y="885" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="949.70" y="895.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="539.2" y="629" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="542.18" y="639.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="776.4" y="357" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="779.39" y="367.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (20,202,020 samples, 1.03%)</title><rect x="788.6" y="261" width="12.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="791.56" y="271.5" ></text>
</g>
<g >
<title>Poco::JSON::Object::set (70,707,070 samples, 3.61%)</title><rect x="1092.7" y="917" width="42.6" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1095.68" y="927.5" >Poco..</text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="341" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1059.19" y="351.5" ></text>
</g>
<g >
<title>void std::__1::__invoke_void_return_wrapper&lt;void, true&gt;::__call&lt;ThreadFromGlobalPoolImpl&lt;false&gt;::ThreadFromGlobalPoolImpl&lt;ThreadPoolImpl&lt;ThreadFromGlobalPoolImpl&lt;false&gt; &gt;::scheduleImpl&lt;void&gt; (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1317" width="1161.7" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="25.16" y="1327.5" >void std::__1::__invoke_void_return_wrapper&lt;void, true&gt;::__call&lt;ThreadFromGlobalPoolImpl&lt;false&gt;::ThreadFromGlobalPoolImpl&lt;ThreadPoolImpl&lt;ThreadFromGlobalPoolImpl&lt;..</text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__hash_map_iterator&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt; &gt;, bool&gt; std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::emplace[abi:v15000]&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="454.0" y="805" width="12.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="457.02" y="815.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="892.0" y="373" width="6.0" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="894.96" y="383.5" ></text>
</g>
<g >
<title>void boost::sp_adl_block::intrusive_ptr_release&lt;DB::IColumn, boost::sp_adl_block::thread_safe_counter&gt; (10,101,010 samples, 0.52%)</title><rect x="308.0" y="709" width="6.1" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="311.04" y="719.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="113.4" y="725" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="116.40" y="735.5" ></text>
</g>
<g >
<title>tsd_tcache_gc_event_waitp_get (10,101,010 samples, 0.52%)</title><rect x="624.3" y="421" width="6.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="627.33" y="431.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="1013.6" y="389" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1016.61" y="399.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::construct[abi:v15000]&lt;Poco::Dynamic::Var, Poco::Dynamic::Var&amp;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="757" width="6.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1095.68" y="767.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::ColumnVector (10,101,010 samples, 0.52%)</title><rect x="983.2" y="821" width="6.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="986.20" y="831.5" ></text>
</g>
<g >
<title>arena_decay_ticks (10,101,010 samples, 0.52%)</title><rect x="971.0" y="533" width="6.1" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="974.03" y="543.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;DB::ISerialization::Substream&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="940.6" y="853" width="6.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="943.62" y="863.5" ></text>
</g>
<g >
<title>tcache_alloc_small_hard (10,101,010 samples, 0.52%)</title><rect x="593.9" y="485" width="6.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="596.92" y="495.5" ></text>
</g>
<g >
<title>DB::IMergeTreeReader::getColumnInPart (30,303,030 samples, 1.55%)</title><rect x="551.3" y="821" width="18.3" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="554.34" y="831.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;long&gt;::isDefaultAt (10,101,010 samples, 0.52%)</title><rect x="162.1" y="853" width="6.0" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="165.06" y="863.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::alloc&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="83.0" y="821" width="6.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="85.99" y="831.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="821" width="6.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1174.75" y="831.5" ></text>
</g>
<g >
<title>pac_alloc_impl (10,101,010 samples, 0.52%)</title><rect x="374.9" y="565" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="377.95" y="575.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB9InputPortETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="916.3" y="517" width="6.1" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="919.29" y="527.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="910.2" y="133" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="913.21" y="143.5" ></text>
</g>
<g >
<title>arena_bin_slabs_nonfull_insert (10,101,010 samples, 0.52%)</title><rect x="338.5" y="373" width="6.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="341.45" y="383.5" ></text>
</g>
<g >
<title>arena_sdalloc (10,101,010 samples, 0.52%)</title><rect x="46.5" y="757" width="6.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="49.49" y="767.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__insert_unique[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="885" width="12.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1101.76" y="895.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB9InputPortETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (20,202,020 samples, 1.03%)</title><rect x="892.0" y="485" width="12.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="894.96" y="495.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::alloc (20,202,020 samples, 1.03%)</title><rect x="423.6" y="725" width="12.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="426.61" y="735.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="168.1" y="533" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="171.14" y="543.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="469" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1095.68" y="479.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="1159.6" y="661" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1162.59" y="671.5" ></text>
</g>
<g >
<title>tcache_gc_dalloc_event_wait_get (10,101,010 samples, 0.52%)</title><rect x="168.1" y="405" width="6.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="171.14" y="415.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init_copy_ctor_external (10,101,010 samples, 0.52%)</title><rect x="733.8" y="757" width="6.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="736.81" y="767.5" ></text>
</g>
<g >
<title>DB::IMergeTreeReader::getColumnNameInPart (30,303,030 samples, 1.55%)</title><rect x="606.1" y="789" width="18.2" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="609.08" y="799.5" ></text>
</g>
<g >
<title>Poco::JSON::Array::Array (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="661" width="12.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1028.77" y="671.5" ></text>
</g>
<g >
<title>std::__1::__function::__policy_func&lt;void  (10,101,010 samples, 0.52%)</title><rect x="928.5" y="869" width="6.0" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="931.45" y="879.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::ColumnVector&lt;long&gt; &gt; COWHelper&lt;DB::IColumnHelper&lt;DB::ColumnVector&lt;long&gt;, DB::ColumnFixedSizeHelper&gt;, DB::ColumnVector&lt;long&gt; &gt;::create&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="411.4" y="773" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="414.44" y="783.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="125.6" y="693" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="128.57" y="703.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;std::__1::shared_ptr&lt;DB::ISerialization const&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;DB::ISerialization const&gt; &gt; &gt;::__base_destruct_at_end[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="782.5" y="693" width="6.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="785.47" y="703.5" ></text>
</g>
<g >
<title>witness_assert_owner (10,101,010 samples, 0.52%)</title><rect x="16.1" y="997" width="6.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="19.08" y="1007.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="892.0" y="277" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="894.96" y="287.5" ></text>
</g>
<g >
<title>std::__1::enable_if&lt;__can_be_converted_to_string_view&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt;::value, int&gt;::type std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::compare&lt;std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="679.1" y="693" width="12.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="682.07" y="703.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="837.2" y="117" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="840.22" y="127.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="916.3" y="309" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="919.29" y="319.5" ></text>
</g>
<g >
<title>DB::Port::~Port (30,303,030 samples, 1.55%)</title><rect x="788.6" y="469" width="18.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="791.56" y="479.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::compare[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="271.5" y="837" width="6.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="274.55" y="847.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::alloc&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="587.8" y="677" width="6.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="590.84" y="687.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="776.4" y="325" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="779.39" y="335.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::SerializationSparse&gt; &gt;::destroy[abi:v15000]&lt;DB::SerializationSparse, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="782.5" y="565" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="785.47" y="575.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__emplace_hint_unique_key_args&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; const&amp;&gt; (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="581" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1095.68" y="591.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="898.0" y="277" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="901.04" y="287.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::Var&lt;Poco::JSON::Array&gt; (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="917" width="12.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1010.53" y="927.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN4Poco7Dynamic3VarETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS5_ (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="629" width="12.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1144.34" y="639.5" ></text>
</g>
<g >
<title>std::__1::shared_ptr&lt;DB::SerializationNumber&lt;long&gt; &gt; std::__1::allocate_shared[abi:v15000]&lt;DB::SerializationNumber&lt;long&gt;, std::__1::allocator&lt;DB::SerializationNumber&lt;long&gt; &gt;, , void&gt; (10,101,010 samples, 0.52%)</title><rect x="922.4" y="837" width="6.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="925.37" y="847.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="508.8" y="725" width="6.0" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="511.76" y="735.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="849.4" y="357" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="852.38" y="367.5" ></text>
</g>
<g >
<title>DB::ColumnWithTypeAndName::ColumnWithTypeAndName (10,101,010 samples, 0.52%)</title><rect x="964.9" y="901" width="6.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="967.95" y="911.5" ></text>
</g>
<g >
<title>pac_alloc_impl (10,101,010 samples, 0.52%)</title><rect x="344.5" y="565" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="347.54" y="575.5" ></text>
</g>
<g >
<title>void boost::sp_adl_block::intrusive_ptr_release&lt;DB::IColumn, boost::sp_adl_block::thread_safe_counter&gt; (10,101,010 samples, 0.52%)</title><rect x="441.9" y="709" width="6.0" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="444.86" y="719.5" ></text>
</g>
<g >
<title>DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::~PODArrayBase (20,202,020 samples, 1.03%)</title><rect x="326.3" y="549" width="12.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="329.29" y="559.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="861.5" y="357" width="6.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="864.55" y="367.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="551.3" y="725" width="12.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="554.34" y="735.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB15NameAndTypePairETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="758.1" y="629" width="6.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="761.14" y="639.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::Var (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="789" width="12.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1010.53" y="799.5" ></text>
</g>
<g >
<title>tcache_bin_flush_small (10,101,010 samples, 0.52%)</title><rect x="58.7" y="565" width="6.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="61.66" y="575.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="673.0" y="613" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="675.99" y="623.5" ></text>
</g>
<g >
<title>DB::SerializationInfoByName::add (10,101,010 samples, 0.52%)</title><rect x="271.5" y="949" width="6.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="274.55" y="959.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::construct[abi:v15000]&lt;Poco::Dynamic::Var, Poco::Dynamic::Var const&amp;, void, void&gt; (30,303,030 samples, 1.55%)</title><rect x="1068.4" y="837" width="18.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1071.35" y="847.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__base_destruct_at_end[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="898.0" y="389" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="901.04" y="399.5" ></text>
</g>
<g >
<title>thread_alloc_event (10,101,010 samples, 0.52%)</title><rect x="435.8" y="661" width="6.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="438.77" y="671.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="89.1" y="837" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="92.07" y="847.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="289.8" y="789" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="292.79" y="799.5" ></text>
</g>
<g >
<title>isdalloct (10,101,010 samples, 0.52%)</title><rect x="1050.1" y="373" width="6.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1053.10" y="383.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::deallocate[abi:v15000] (40,404,040 samples, 2.06%)</title><rect x="101.2" y="869" width="24.4" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="104.24" y="879.5" >s..</text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::~VarHolderImpl (30,303,030 samples, 1.55%)</title><rect x="1044.0" y="869" width="18.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1047.02" y="879.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__shared_ptr_emplace&lt;DB::SerializationNumber&lt;long&gt;, std::__1::allocator&lt;DB::SerializationNumber&lt;long&gt; &gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="520.9" y="709" width="6.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="523.93" y="719.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.52%)</title><rect x="964.9" y="885" width="6.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="967.95" y="895.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="563.5" y="629" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="566.51" y="639.5" ></text>
</g>
<g >
<title>iallocztm (10,101,010 samples, 0.52%)</title><rect x="563.5" y="549" width="6.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="566.51" y="559.5" ></text>
</g>
<g >
<title>DB::OutputPort::~OutputPort (20,202,020 samples, 1.03%)</title><rect x="806.8" y="485" width="12.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="809.80" y="495.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="168.1" y="645" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="171.14" y="655.5" ></text>
</g>
<g >
<title>std::__1::__builtin_new_allocator::__deallocate_bytes (10,101,010 samples, 0.52%)</title><rect x="143.8" y="805" width="6.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="146.81" y="815.5" ></text>
</g>
<g >
<title>DB::MergeTreeSequentialSource::generate (525,252,520 samples, 26.80%)</title><rect x="472.3" y="853" width="316.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="475.27" y="863.5" >DB::MergeTreeSequentialSource::generate</text>
</g>
<g >
<title>aligned_usize_get (10,101,010 samples, 0.52%)</title><rect x="648.7" y="629" width="6.0" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="651.66" y="639.5" ></text>
</g>
<g >
<title>std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;::operator (10,101,010 samples, 0.52%)</title><rect x="1001.4" y="805" width="6.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1004.44" y="815.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="569.6" y="773" width="12.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="572.59" y="783.5" ></text>
</g>
<g >
<title>isfree (20,202,020 samples, 1.03%)</title><rect x="113.4" y="741" width="12.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="116.40" y="751.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="1013.6" y="357" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1016.61" y="367.5" ></text>
</g>
<g >
<title>DB::DataTypeNumber&lt;long&gt;::doGetDefaultSerialization (10,101,010 samples, 0.52%)</title><rect x="922.4" y="869" width="6.1" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="925.37" y="879.5" ></text>
</g>
<g >
<title>std::__1::unique_ptr&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;, std::__1::__hash_node_destructor&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt; &gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__construct_node_hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="958.9" y="885" width="6.0" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="961.87" y="895.5" ></text>
</g>
<g >
<title>std::__1::__shared_count::__release_shared[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="28.2" y="597" width="12.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="31.25" y="607.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPSB_ (10,101,010 samples, 0.52%)</title><rect x="28.2" y="325" width="6.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="31.25" y="335.5" ></text>
</g>
<g >
<title>DB::MergePlainMergeTreeTask::prepare (30,303,030 samples, 1.55%)</title><rect x="22.2" y="917" width="18.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="25.16" y="927.5" ></text>
</g>
<g >
<title>witness_owner (10,101,010 samples, 0.52%)</title><rect x="16.1" y="981" width="6.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="19.08" y="991.5" ></text>
</g>
<g >
<title>std::__1::shared_ptr&lt;DB::IProcessor&gt;::~shared_ptr[abi:v15000] (222,222,220 samples, 11.34%)</title><rect x="788.6" y="741" width="133.8" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="791.56" y="751.5" >std::__1::shared..</text>
</g>
<g >
<title>free_fastpath (10,101,010 samples, 0.52%)</title><rect x="441.9" y="581" width="6.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="444.86" y="591.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt;::allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="247.2" y="821" width="12.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="250.22" y="831.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="259.4" y="853" width="6.1" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="262.38" y="863.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::~__hash_table (10,101,010 samples, 0.52%)</title><rect x="466.2" y="789" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="469.19" y="799.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt;::allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1074.4" y="613" width="12.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1077.43" y="623.5" ></text>
</g>
<g >
<title>cache_bin_assert_empty (10,101,010 samples, 0.52%)</title><rect x="563.5" y="453" width="6.1" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="566.51" y="463.5" ></text>
</g>
<g >
<title>std::__1::operator!=[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="241.1" y="885" width="6.1" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="244.13" y="895.5" ></text>
</g>
<g >
<title>sallocx (10,101,010 samples, 0.52%)</title><rect x="1086.6" y="741" width="6.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1089.60" y="751.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::InputPort, std::__1::allocator&lt;DB::InputPort&gt; &gt;::~list (30,303,030 samples, 1.55%)</title><rect x="788.6" y="581" width="18.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="791.56" y="591.5" ></text>
</g>
<g >
<title>DB::(anonymous namespace)::writeColumnSingleGranule (20,202,020 samples, 1.03%)</title><rect x="977.1" y="885" width="12.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="980.11" y="895.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="460.1" y="597" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="463.10" y="607.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_10shared_ptrIN2DB10IProcessorEEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS6_ (222,222,220 samples, 11.34%)</title><rect x="788.6" y="773" width="133.8" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="791.56" y="783.5" >_ZNSt3__110destr..</text>
</g>
<g >
<title>CityHash_v1_0_2::CityMurmur (10,101,010 samples, 0.52%)</title><rect x="630.4" y="693" width="6.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="633.41" y="703.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt; &gt; &gt;::destroy (20,202,020 samples, 1.03%)</title><rect x="770.3" y="645" width="12.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="773.31" y="655.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (20,202,020 samples, 1.03%)</title><rect x="569.6" y="805" width="12.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="572.59" y="815.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::~vector[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="879.8" y="437" width="12.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="882.79" y="447.5" ></text>
</g>
<g >
<title>CityHash_v1_0_2::HashLen16 (10,101,010 samples, 0.52%)</title><rect x="630.4" y="661" width="6.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="633.41" y="671.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB19ExpressionTransformETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (50,505,050 samples, 2.58%)</title><rect x="837.2" y="661" width="30.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="840.22" y="671.5" >_Z..</text>
</g>
<g >
<title>DB::MergeTask::~MergeTask (30,303,030 samples, 1.55%)</title><rect x="22.2" y="773" width="18.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="25.16" y="783.5" ></text>
</g>
<g >
<title>std::__1::unique_ptr&lt;DB::IMergeTreeDataPartWriter, std::__1::default_delete&lt;DB::IMergeTreeDataPartWriter&gt; &gt;::~unique_ptr[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="28.2" y="485" width="6.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="31.25" y="495.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__shared_ptr_emplace&lt;DB::SerializationNumber&lt;unsigned long&gt;, std::__1::allocator&lt;DB::SerializationNumber&lt;unsigned long&gt; &gt; &gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="782.5" y="437" width="6.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="785.47" y="447.5" ></text>
</g>
<g >
<title>arena_salloc (10,101,010 samples, 0.52%)</title><rect x="247.2" y="661" width="6.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="250.22" y="671.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="520.9" y="549" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="523.93" y="559.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::~VarHolderImpl (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="517" width="12.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1053.10" y="527.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10,101,010 samples, 0.52%)</title><rect x="819.0" y="325" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="821.97" y="335.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::~Var (40,404,040 samples, 2.06%)</title><rect x="1110.9" y="885" width="24.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1113.93" y="895.5" >P..</text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="28.2" y="245" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="31.25" y="255.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="469" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1065.27" y="479.5" ></text>
</g>
<g >
<title>imalloc (20,202,020 samples, 1.03%)</title><rect x="715.6" y="565" width="12.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="718.57" y="575.5" ></text>
</g>
<g >
<title>decltype  (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1301" width="1161.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="25.16" y="1311.5" >decltype </text>
</g>
<g >
<title>arena_malloc (10,101,010 samples, 0.52%)</title><rect x="302.0" y="661" width="6.0" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="304.96" y="671.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB10OutputPortETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (20,202,020 samples, 1.03%)</title><rect x="806.8" y="501" width="12.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="809.80" y="511.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="764.2" y="453" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="767.23" y="463.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::alloc (10,101,010 samples, 0.52%)</title><rect x="593.9" y="661" width="6.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="596.92" y="671.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN3COWIN2DB7IColumnEE13immutable_ptrIS3_EETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS8_ (10,101,010 samples, 0.52%)</title><rect x="441.9" y="773" width="6.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="444.86" y="783.5" ></text>
</g>
<g >
<title>tcache_bin_flush_small (10,101,010 samples, 0.52%)</title><rect x="587.8" y="453" width="6.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="590.84" y="463.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="496.6" y="645" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="499.60" y="655.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;DB::NameAndTypePair, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;DB::NameAndTypePair, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="496.6" y="757" width="6.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="499.60" y="767.5" ></text>
</g>
<g >
<title>DB::NameAndTypePair::NameAndTypePair (20,202,020 samples, 1.03%)</title><rect x="551.3" y="773" width="12.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="554.34" y="783.5" ></text>
</g>
<g >
<title>std::__1::__split_buffer&lt;DB::ISerialization::Substream, std::__1::allocator&lt;DB::ISerialization::Substream&gt;&amp;&gt;::__split_buffer (20,202,020 samples, 1.03%)</title><rect x="660.8" y="741" width="12.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="663.82" y="751.5" ></text>
</g>
<g >
<title>auto std::__1::__unwrap_range[abi:v15000]&lt;char const*, char const*&gt; (10,101,010 samples, 0.52%)</title><rect x="1153.5" y="613" width="6.1" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1156.51" y="623.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string (20,202,020 samples, 1.03%)</title><rect x="277.6" y="821" width="12.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="280.63" y="831.5" ></text>
</g>
<g >
<title>DB::fillMissingColumns (40,404,040 samples, 2.06%)</title><rect x="508.8" y="821" width="24.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="511.76" y="831.5" >D..</text>
</g>
<g >
<title>realloc (10,101,010 samples, 0.52%)</title><rect x="344.5" y="757" width="6.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="347.54" y="767.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__list_node&lt;DB::NameAndTypePair, void*&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="22.2" y="549" width="6.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="25.16" y="559.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="869" width="6.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1174.75" y="879.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (10,101,010 samples, 0.52%)</title><rect x="271.5" y="805" width="6.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="274.55" y="815.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;DB::ISerialization::Substream&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="508.8" y="709" width="6.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="511.76" y="719.5" ></text>
</g>
<g >
<title>DB::IMergeTreeReader::getSerializationInPart (101,010,100 samples, 5.15%)</title><rect x="691.2" y="805" width="60.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="694.24" y="815.5" >DB::IM..</text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="460.1" y="533" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="463.10" y="543.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="466.2" y="677" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="469.19" y="687.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolder* Poco::Dynamic::VarHolder::cloneHolder&lt;Poco::JSON::Object&gt; (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="757" width="12.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1010.53" y="767.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::resize&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="636.5" y="773" width="6.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="639.49" y="783.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::map[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="645" width="6.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1095.68" y="655.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__deallocate_node (10,101,010 samples, 0.52%)</title><rect x="904.1" y="533" width="6.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="907.12" y="543.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="563.5" y="581" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="566.51" y="591.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::__clear[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="821" width="6.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1040.94" y="831.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="52.6" y="869" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="55.58" y="879.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1031.9" y="357" width="6.0" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1034.86" y="367.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="302.0" y="725" width="6.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="304.96" y="735.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="855.5" y="245" width="6.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="858.46" y="255.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="46.5" y="789" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="49.49" y="799.5" ></text>
</g>
<g >
<title>arena_slab_alloc (10,101,010 samples, 0.52%)</title><rect x="593.9" y="453" width="6.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="596.92" y="463.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPSB_ (10,101,010 samples, 0.52%)</title><rect x="466.2" y="725" width="6.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="469.19" y="735.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolder* Poco::Dynamic::VarHolder::cloneHolder&lt;Poco::JSON::Array&gt; (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="693" width="12.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1028.77" y="703.5" ></text>
</g>
<g >
<title>DB::CompressedReadBufferBase::readCompressedData (10,101,010 samples, 0.52%)</title><rect x="630.4" y="757" width="6.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="633.41" y="767.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__shared_ptr_emplace&lt;DB::SerializationNumber&lt;unsigned long&gt;, std::__1::allocator&lt;DB::SerializationNumber&lt;unsigned long&gt; &gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="527.0" y="709" width="6.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="530.01" y="719.5" ></text>
</g>
<g >
<title>arena_sdalloc (10,101,010 samples, 0.52%)</title><rect x="52.6" y="789" width="6.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="55.58" y="799.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="437" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1065.27" y="447.5" ></text>
</g>
<g >
<title>std::__1::shared_ptr&lt;std::__1::vector&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt; &gt; &gt; &gt;::~shared_ptr[abi:v15000] (222,222,220 samples, 11.34%)</title><rect x="788.6" y="949" width="133.8" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="791.56" y="959.5" >std::__1::shared..</text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;unsigned long&gt;::~VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="501" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1065.27" y="511.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::~VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="693" width="6.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1040.94" y="703.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="812.9" y="245" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="815.89" y="255.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (20,202,020 samples, 1.03%)</title><rect x="569.6" y="741" width="12.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="572.59" y="751.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="691.2" y="661" width="12.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="694.24" y="671.5" ></text>
</g>
<g >
<title>Poco::JSON::Array::Array (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="821" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1095.68" y="831.5" ></text>
</g>
<g >
<title>Poco::JSON::Object::Object (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="725" width="12.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1010.53" y="735.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::~vector[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="131.6" y="917" width="6.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="134.65" y="927.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.52%)</title><rect x="958.9" y="821" width="6.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="961.87" y="831.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="1019.7" y="693" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1022.69" y="703.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="805" width="6.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1174.75" y="815.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::SerializationNumber&lt;unsigned long&gt;, std::__1::allocator&lt;DB::SerializationNumber&lt;unsigned long&gt; &gt; &gt;::__on_zero_shared_weak (10,101,010 samples, 0.52%)</title><rect x="782.5" y="453" width="6.1" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="785.47" y="463.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="501" width="6.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1010.53" y="511.5" ></text>
</g>
<g >
<title>emap_alloc_ctx_lookup (10,101,010 samples, 0.52%)</title><rect x="545.3" y="517" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="548.26" y="527.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::destroy (30,303,030 samples, 1.55%)</title><rect x="1044.0" y="805" width="18.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1047.02" y="815.5" ></text>
</g>
<g >
<title>DB::SerializationNumber&lt;long&gt;::deserializeBinaryBulk (10,101,010 samples, 0.52%)</title><rect x="630.4" y="789" width="6.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="633.41" y="799.5" ></text>
</g>
<g >
<title>tcache_bin_flush_impl (10,101,010 samples, 0.52%)</title><rect x="34.3" y="133" width="6.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="37.33" y="143.5" ></text>
</g>
<g >
<title>atomic_load_u (10,101,010 samples, 0.52%)</title><rect x="964.9" y="725" width="6.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="967.95" y="735.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="527.0" y="693" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="530.01" y="703.5" ></text>
</g>
<g >
<title>isalloc (10,101,010 samples, 0.52%)</title><rect x="247.2" y="677" width="6.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="250.22" y="687.5" ></text>
</g>
<g >
<title>te_ctx_get (10,101,010 samples, 0.52%)</title><rect x="125.6" y="581" width="6.0" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="128.57" y="591.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::InputPort, std::__1::allocator&lt;DB::InputPort&gt; &gt;::~list (20,202,020 samples, 1.03%)</title><rect x="837.2" y="581" width="12.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="840.22" y="591.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::~map[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="629" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1120.01" y="639.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="645" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1065.27" y="655.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;::~VarHolderImpl (20,202,020 samples, 1.03%)</title><rect x="1123.1" y="853" width="12.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1126.09" y="863.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;::~pair (10,101,010 samples, 0.52%)</title><rect x="125.6" y="821" width="6.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="128.57" y="831.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="508.8" y="661" width="6.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="511.76" y="671.5" ></text>
</g>
<g >
<title>std::__1::__shared_count::__release_shared[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="782.5" y="597" width="6.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="785.47" y="607.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="520.9" y="693" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="523.93" y="703.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;unsigned long&gt;::clone (10,101,010 samples, 0.52%)</title><rect x="1013.6" y="549" width="6.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1016.61" y="559.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="168.1" y="549" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="171.14" y="559.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="733.8" y="661" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="736.81" y="671.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="904.1" y="421" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="907.12" y="431.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1123.1" y="773" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1126.09" y="783.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__list_node&lt;DB::NameAndTypePair, void*&gt; &gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="869" width="6.1" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="1168.67" y="879.5" ></text>
</g>
<g >
<title>tcache_alloc_small (10,101,010 samples, 0.52%)</title><rect x="344.5" y="661" width="6.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="347.54" y="671.5" ></text>
</g>
<g >
<title>std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;::operator (10,101,010 samples, 0.52%)</title><rect x="533.1" y="757" width="6.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="536.09" y="767.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1123.1" y="789" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1126.09" y="799.5" ></text>
</g>
<g >
<title>sdallocx (20,202,020 samples, 1.03%)</title><rect x="879.8" y="213" width="12.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="882.79" y="223.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::Var (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="565" width="12.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1028.77" y="575.5" ></text>
</g>
<g >
<title>isalloc (10,101,010 samples, 0.52%)</title><rect x="715.6" y="533" width="6.0" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="718.57" y="543.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="551.3" y="709" width="12.2" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="554.34" y="719.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="794.6" y="165" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="797.64" y="175.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__deallocate_node (10,101,010 samples, 0.52%)</title><rect x="466.2" y="773" width="6.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="469.19" y="783.5" ></text>
</g>
<g >
<title>ThreadPoolImpl&lt;std::__1::thread&gt;::worker (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1397" width="1161.7" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="25.16" y="1407.5" >ThreadPoolImpl&lt;std::__1::thread&gt;::worker</text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPSB_ (10,101,010 samples, 0.52%)</title><rect x="855.5" y="357" width="6.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="858.46" y="367.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="812.9" y="261" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="815.89" y="271.5" ></text>
</g>
<g >
<title>std::__1::enable_if&lt;__can_extract_map_key&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;::value, std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt;, bool&gt; &gt;::type std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__emplace_unique[abi:v15000]&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="454.0" y="789" width="12.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="457.02" y="799.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="1159.6" y="709" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1162.59" y="719.5" ></text>
</g>
<g >
<title>void std::__1::__invoke_void_return_wrapper&lt;void, true&gt;::__call&lt;DB::MergePlainMergeTreeTask::prepare (30,303,030 samples, 1.55%)</title><rect x="22.2" y="949" width="18.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="25.16" y="959.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="677" width="6.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1174.75" y="687.5" ></text>
</g>
<g >
<title>DB::MergeTreeSequentialSource::~MergeTreeSequentialSource (40,404,040 samples, 2.06%)</title><rect x="867.6" y="629" width="24.4" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="870.63" y="639.5" >D..</text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="837" width="12.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1144.34" y="847.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="904.1" y="309" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="907.12" y="319.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="910.2" y="165" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="913.21" y="175.5" ></text>
</g>
<g >
<title>wake_up_q (10,101,010 samples, 0.52%)</title><rect x="1177.8" y="885" width="6.1" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1180.84" y="895.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="764.2" y="405" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="767.23" y="415.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="977.1" y="773" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="980.11" y="783.5" ></text>
</g>
<g >
<title>arena_sdalloc (10,101,010 samples, 0.52%)</title><rect x="496.6" y="517" width="6.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="499.60" y="527.5" ></text>
</g>
<g >
<title>imalloc_body (20,202,020 samples, 1.03%)</title><rect x="423.6" y="629" width="12.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="426.61" y="639.5" ></text>
</g>
<g >
<title>DB::validateChecksum (10,101,010 samples, 0.52%)</title><rect x="630.4" y="741" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="633.41" y="751.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="837.2" y="181" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="840.22" y="191.5" ></text>
</g>
<g >
<title>rtree_metadata_read (10,101,010 samples, 0.52%)</title><rect x="1147.4" y="325" width="6.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1150.42" y="335.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="593.9" y="613" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="596.92" y="623.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="131.6" y="677" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="134.65" y="687.5" ></text>
</g>
<g >
<title>DB::ExpressionTransform::transform (40,404,040 samples, 2.06%)</title><rect x="447.9" y="853" width="24.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="450.94" y="863.5" >D..</text>
</g>
<g >
<title>DB::NamesAndTypesList::~NamesAndTypesList (10,101,010 samples, 0.52%)</title><rect x="34.3" y="501" width="6.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="37.33" y="511.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (30,303,030 samples, 1.55%)</title><rect x="107.3" y="821" width="18.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="110.32" y="831.5" ></text>
</g>
<g >
<title>ThreadFromGlobalPoolImpl&lt;false&gt;::ThreadFromGlobalPoolImpl&lt;ThreadPoolImpl&lt;ThreadFromGlobalPoolImpl&lt;false&gt; &gt;::scheduleImpl&lt;void&gt; (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1285" width="1161.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="25.16" y="1295.5" >ThreadFromGlobalPoolImpl&lt;false&gt;::ThreadFromGlobalPoolImpl&lt;ThreadPoolImpl&lt;ThreadFromGlobalPoolImpl&lt;false&gt; &gt;::scheduleImpl&lt;void&gt;</text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="1129.2" y="805" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1132.18" y="815.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::InputPort, std::__1::allocator&lt;DB::InputPort&gt; &gt;::clear (20,202,020 samples, 1.03%)</title><rect x="837.2" y="549" width="12.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="840.22" y="559.5" ></text>
</g>
<g >
<title>arena_slab_alloc (10,101,010 samples, 0.52%)</title><rect x="344.5" y="613" width="6.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="347.54" y="623.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="861.5" y="213" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="864.55" y="223.5" ></text>
</g>
<g >
<title>DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::dealloc (20,202,020 samples, 1.03%)</title><rect x="326.3" y="533" width="12.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="329.29" y="543.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="484.4" y="693" width="12.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="487.43" y="703.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="168.1" y="629" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="171.14" y="639.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="606.1" y="645" width="12.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="609.08" y="655.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::destroy[abi:v15000]&lt;Poco::Dynamic::Var, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="645" width="12.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1144.34" y="655.5" ></text>
</g>
<g >
<title>MemoryTracker::allocImpl (10,101,010 samples, 0.52%)</title><rect x="636.5" y="661" width="6.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="639.49" y="671.5" ></text>
</g>
<g >
<title>extent_split_impl (10,101,010 samples, 0.52%)</title><rect x="302.0" y="437" width="6.0" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="304.96" y="447.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="517" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1120.01" y="527.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="168.1" y="469" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="171.14" y="479.5" ></text>
</g>
<g >
<title>Poco::SharedPtr&lt;Poco::Dynamic::Struct&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, Poco::ReferenceCounter, Poco::ReleasePolicy&lt;Poco::Dynamic::Struct&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~SharedPtr (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="517" width="12.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1144.34" y="527.5" ></text>
</g>
<g >
<title>std::__1::function&lt;void  (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1381" width="12.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="13.00" y="1391.5" ></text>
</g>
<g >
<title>tsdn_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="928.5" y="709" width="6.0" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="931.45" y="719.5" ></text>
</g>
<g >
<title>DB::IDataType::getSerialization (10,101,010 samples, 0.52%)</title><rect x="600.0" y="789" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="603.00" y="799.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, void*&gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="770.3" y="533" width="6.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="773.31" y="543.5" ></text>
</g>
<g >
<title>mas_walk (10,101,010 samples, 0.52%)</title><rect x="83.0" y="613" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="85.99" y="623.5" ></text>
</g>
<g >
<title>DB::Block::~Block (20,202,020 samples, 1.03%)</title><rect x="806.8" y="453" width="12.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="809.80" y="463.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::~Var (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="757" width="6.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1065.27" y="767.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::~Var (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="709" width="6.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1120.01" y="719.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_condvar_signal[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1177.8" y="1013" width="6.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1180.84" y="1023.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt;, void, void&gt; (222,222,220 samples, 11.34%)</title><rect x="788.6" y="789" width="133.8" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="791.56" y="799.5" >void std::__1::a..</text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt; &gt; &gt;::destroy (20,202,020 samples, 1.03%)</title><rect x="770.3" y="597" width="12.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="773.31" y="607.5" ></text>
</g>
<g >
<title>std::__1::enable_if&lt;__can_extract_map_key&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;::value, std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt;, bool&gt; &gt;::type std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__emplace_unique[abi:v15000]&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="277.6" y="917" width="12.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="280.63" y="927.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="34.3" y="229" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="37.33" y="239.5" ></text>
</g>
<g >
<title>DB::NameAndTypePair* std::__1::construct_at[abi:v15000]&lt;DB::NameAndTypePair, DB::NameAndTypePair const&amp;, DB::NameAndTypePair*&gt; (10,101,010 samples, 0.52%)</title><rect x="502.7" y="741" width="6.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="505.68" y="751.5" ></text>
</g>
<g >
<title>char* std::__1::copy[abi:v15000]&lt;char const*, char*&gt; (10,101,010 samples, 0.52%)</title><rect x="1153.5" y="645" width="6.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1156.51" y="655.5" ></text>
</g>
<g >
<title>tcache_bin_flush_edatas_lookup (10,101,010 samples, 0.52%)</title><rect x="34.3" y="117" width="6.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="37.33" y="127.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;DB::InputPort, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;DB::InputPort, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="916.3" y="533" width="6.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="919.29" y="543.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="229" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1059.19" y="239.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="174.2" y="581" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="177.23" y="591.5" ></text>
</g>
<g >
<title>DB::MergeTreeReaderCompact::readPrefix (101,010,100 samples, 5.15%)</title><rect x="691.2" y="821" width="60.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="694.24" y="831.5" >DB::Me..</text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="517" width="6.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1174.75" y="527.5" ></text>
</g>
<g >
<title>pipe_write (10,101,010 samples, 0.52%)</title><rect x="636.5" y="485" width="6.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="639.49" y="495.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.52%)</title><rect x="563.5" y="789" width="6.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="566.51" y="799.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB23MergedBlockOutputStreamETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (20,202,020 samples, 1.03%)</title><rect x="28.2" y="533" width="12.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="31.25" y="543.5" ></text>
</g>
<g >
<title>DB::DataTypeNumberBase&lt;unsigned long&gt;::createColumn (10,101,010 samples, 0.52%)</title><rect x="983.2" y="853" width="6.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="986.20" y="863.5" ></text>
</g>
<g >
<title>DB::SerializationSparse::~SerializationSparse (10,101,010 samples, 0.52%)</title><rect x="782.5" y="517" width="6.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="785.47" y="527.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1031.9" y="389" width="6.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1034.86" y="399.5" ></text>
</g>
<g >
<title>ThreadPoolImpl&lt;ThreadFromGlobalPoolImpl&lt;false&gt; &gt;::worker (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1205" width="1161.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="25.16" y="1215.5" >ThreadPoolImpl&lt;ThreadFromGlobalPoolImpl&lt;false&gt; &gt;::worker</text>
</g>
<g >
<title>tsdn_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="107.3" y="725" width="6.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="110.32" y="735.5" ></text>
</g>
<g >
<title>DB::MergeTask::execute (1,888,888,870 samples, 96.39%)</title><rect x="40.4" y="1029" width="1137.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="43.41" y="1039.5" >DB::MergeTask::execute</text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;* std::__1::construct_at[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; const&amp;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;*&gt; (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="597" width="12.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1010.53" y="607.5" ></text>
</g>
<g >
<title>std::__1::__builtin_new_allocator::__deallocate_bytes (10,101,010 samples, 0.52%)</title><rect x="989.3" y="821" width="6.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="992.28" y="831.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="788.6" y="277" width="12.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="791.56" y="287.5" ></text>
</g>
<g >
<title>tcache_gc_dalloc_event_handler (10,101,010 samples, 0.52%)</title><rect x="58.7" y="613" width="6.0" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="61.66" y="623.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ISerialization::Substream, std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt;::push_back[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="514.8" y="757" width="6.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="517.85" y="767.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="1104.8" y="549" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1107.85" y="559.5" ></text>
</g>
<g >
<title>atomic_enum_to_builtin (10,101,010 samples, 0.52%)</title><rect x="849.4" y="165" width="6.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="852.38" y="175.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="453" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1065.27" y="463.5" ></text>
</g>
<g >
<title>DB::MergedBlockOutputStream::finalizePartOnDisk (282,828,280 samples, 14.43%)</title><rect x="995.4" y="949" width="170.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="998.36" y="959.5" >DB::MergedBlockOutputS..</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10,101,010 samples, 0.52%)</title><rect x="770.3" y="389" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="773.31" y="399.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::~__tree (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="613" width="6.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1120.01" y="623.5" ></text>
</g>
<g >
<title>DB::ISerialization::SerializeBinaryBulkSettings::~SerializeBinaryBulkSettings (10,101,010 samples, 0.52%)</title><rect x="977.1" y="869" width="6.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="980.11" y="879.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="1074.4" y="533" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1077.43" y="543.5" ></text>
</g>
<g >
<title>std::__1::unique_ptr&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;, std::__1::__hash_node_destructor&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt; &gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__construct_node_hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="454.0" y="757" width="12.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="457.02" y="767.5" ></text>
</g>
<g >
<title>std::__1::unique_ptr&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;, std::__1::__tree_node_destructor&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt; &gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__construct_node&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; const&amp;&gt; (10,101,010 samples, 0.52%)</title><rect x="1098.8" y="469" width="6.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1101.76" y="479.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt; &gt; &gt;::destroy (20,202,020 samples, 1.03%)</title><rect x="770.3" y="565" width="12.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="773.31" y="575.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="508.8" y="613" width="6.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="511.76" y="623.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::~map[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="933" width="6.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1174.75" y="943.5" ></text>
</g>
<g >
<title>DB::Block::insert (20,202,020 samples, 1.03%)</title><rect x="277.6" y="949" width="12.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="280.63" y="959.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="764.2" y="501" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="767.23" y="511.5" ></text>
</g>
<g >
<title>rtree_leaf_elm_lookup (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="373" width="6.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1065.27" y="383.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::push_back (10,101,010 samples, 0.52%)</title><rect x="502.7" y="773" width="6.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="505.68" y="783.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::free (10,101,010 samples, 0.52%)</title><rect x="58.7" y="725" width="6.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="61.66" y="735.5" ></text>
</g>
<g >
<title>std::__1::unique_ptr&lt;DB::IDataTypeCustomName const, std::__1::default_delete&lt;DB::IDataTypeCustomName const&gt; &gt;::reset[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="156.0" y="805" width="6.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="158.98" y="815.5" ></text>
</g>
<g >
<title>free_fastpath (10,101,010 samples, 0.52%)</title><rect x="746.0" y="661" width="6.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="748.98" y="671.5" ></text>
</g>
<g >
<title>tsd_state_get (10,101,010 samples, 0.52%)</title><rect x="107.3" y="709" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="110.32" y="719.5" ></text>
</g>
<g >
<title>DB::NameAndTypePair::~NameAndTypePair (10,101,010 samples, 0.52%)</title><rect x="758.1" y="613" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="761.14" y="623.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="125.6" y="709" width="6.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="128.57" y="719.5" ></text>
</g>
<g >
<title>tcache_dalloc_small (10,101,010 samples, 0.52%)</title><rect x="338.5" y="485" width="6.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="341.45" y="495.5" ></text>
</g>
<g >
<title>tsd_fetch_min (10,101,010 samples, 0.52%)</title><rect x="1123.1" y="677" width="6.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1126.09" y="687.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="389" width="6.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1059.19" y="399.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="125.6" y="629" width="6.0" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="128.57" y="639.5" ></text>
</g>
<g >
<title>_ZNSt3__15visitB6v15000IRZN2DB22MergingSortedAlgorithm5mergeEvE3$_0JRNS_7variantIJNS1_16SortingQueueImplINS1_33SpecializedSingleColumnSortCursorINS1_12ColumnVectorIDuEEEELNS1_20SortingQueueStrategyE0EEENS6_INS7_INS8_ItEEEELSB_0EEENS6_INS7_INS8_IjEEEELSB_0EEENS6_INS7_INS8_ImEEEELSB_0EEENS6_INS7_INS8_IN4wide7integerILm128EjEEEEEELSB_0EEENS6_INS7_INS8_INSN_ILm256EjEEEEEELSB_0EEENS6_INS7_INS8_IDB8_EEEELSB_0EEENS6_INS7_INS8_IsEEEELSB_0EEENS6_INS7_INS8_IiEEEELSB_0EEENS6_INS7_INS8_IlEEEELSB_0EEENS6_INS7_INS8_INSN_ILm128EiEEEEEELSB_0EEENS6_INS7_INS8_INSN_ILm256EiEEEEEELSB_0EEENS6_INS7_INS8_IfEEEELSB_0EEENS6_INS7_INS8_IdEEEELSB_0EEENS6_INS7_INS1_13ColumnDecimalINS1_7DecimalIiEEEEEELSB_0EEENS6_INS7_INS1N_INS1O_IlEEEEEELSB_0EEENS6_INS7_INS1N_INS1O_IS19_EEEEEELSB_0EEENS6_INS7_INS1N_INS1O_IS1D_EEEEEELSB_0EEENS6_INS7_INS1N_INS1_10DateTime64EEEEELSB_0EEENS6_INS7_INS8_I13StrongTypedefISO_NS1_7UUIDTagEEEEEELSB_0EEENS6_INS7_INS8_INS1_4IPv4EEEEELSB_0EEENS6_INS7_INS8_INS1_4IPv6EEEEELSB_0EEENS6_INS7_INS1_12ColumnStringEEELSB_0EEENS6_INS7_INS1_17ColumnFixedStringEEELSB_0EEENS6_INS1_16SimpleSortCursorELSB_0EEENS6_INS1_10SortCursorELSB_0EEENS6_INS1_23SortCursorWithCollationELSB_0EEEEEEEvEEDcOT_DpOT0_ (50,505,050 samples, 2.58%)</title><rect x="314.1" y="837" width="30.4" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="317.12" y="847.5" >_Z..</text>
</g>
<g >
<title>std::__1::__deque_base&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt;, std::__1::allocator&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt; &gt; &gt;::begin (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="613" width="6.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1040.94" y="623.5" ></text>
</g>
<g >
<title>COWHelper&lt;DB::IColumnHelper&lt;DB::ColumnVector&lt;unsigned long&gt;, DB::ColumnFixedSizeHelper&gt;, DB::ColumnVector&lt;unsigned long&gt; &gt;::clone (30,303,030 samples, 1.55%)</title><rect x="83.0" y="885" width="18.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="85.99" y="895.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt; &gt; &gt;::destroy (20,202,020 samples, 1.03%)</title><rect x="770.3" y="661" width="12.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="773.31" y="671.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__shared_ptr_emplace&lt;DB::SerializationNumber&lt;unsigned long&gt;, std::__1::allocator&lt;DB::SerializationNumber&lt;unsigned long&gt; &gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="782.5" y="421" width="6.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="785.47" y="431.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="34.3" y="245" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="37.33" y="255.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="168.1" y="517" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="171.14" y="527.5" ></text>
</g>
<g >
<title>tcache_get (10,101,010 samples, 0.52%)</title><rect x="28.2" y="117" width="6.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="31.25" y="127.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::~Var (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="773" width="12.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1144.34" y="783.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::map[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="709" width="12.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1010.53" y="719.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::OutputPort, std::__1::allocator&lt;DB::OutputPort&gt; &gt;::clear (30,303,030 samples, 1.55%)</title><rect x="849.4" y="549" width="18.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="852.38" y="559.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="549" width="6.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1095.68" y="559.5" ></text>
</g>
<g >
<title>DB::InputPort::~InputPort (20,202,020 samples, 1.03%)</title><rect x="837.2" y="485" width="12.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="840.22" y="495.5" ></text>
</g>
<g >
<title>cache_bin_ncached_get_internal (10,101,010 samples, 0.52%)</title><rect x="612.2" y="389" width="6.0" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="615.16" y="399.5" ></text>
</g>
<g >
<title>Poco::JSON::Array::Array (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="885" width="12.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1010.53" y="895.5" ></text>
</g>
<g >
<title>x64_sys_call (10,101,010 samples, 0.52%)</title><rect x="636.5" y="549" width="6.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="639.49" y="559.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::~ColumnVector (10,101,010 samples, 0.52%)</title><rect x="441.9" y="693" width="6.0" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="444.86" y="703.5" ></text>
</g>
<g >
<title>std::__1::__optional_move_base&lt;DB::StatisticDescription, false&gt;::__optional_move_base[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="934.5" y="677" width="6.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="937.54" y="687.5" ></text>
</g>
<g >
<title>DB::CompressionCodecLZ4::doCompressData (10,101,010 samples, 0.52%)</title><rect x="192.5" y="821" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="195.47" y="831.5" ></text>
</g>
<g >
<title>void boost::sp_adl_block::intrusive_ptr_release&lt;DB::IColumn, boost::sp_adl_block::thread_safe_counter&gt; (30,303,030 samples, 1.55%)</title><rect x="819.0" y="485" width="18.2" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="821.97" y="495.5" ></text>
</g>
<g >
<title>DB::ColumnSparse::~ColumnSparse (10,101,010 samples, 0.52%)</title><rect x="393.2" y="757" width="6.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="396.20" y="767.5" ></text>
</g>
<g >
<title>do_rallocx (10,101,010 samples, 0.52%)</title><rect x="137.7" y="837" width="6.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="140.73" y="847.5" ></text>
</g>
<g >
<title>DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::~PODArray (10,101,010 samples, 0.52%)</title><rect x="441.9" y="661" width="6.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="444.86" y="671.5" ></text>
</g>
<g >
<title>decltype (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1269" width="1161.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="25.16" y="1279.5" >decltype</text>
</g>
<g >
<title>ThreadPoolImpl&lt;std::__1::thread&gt;::scheduleImpl&lt;void&gt; (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1413" width="12.2" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="13.00" y="1423.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="642.6" y="661" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="645.58" y="671.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;* std::__1::construct_at[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; const&amp;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;*&gt; (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="757" width="12.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1028.77" y="767.5" ></text>
</g>
<g >
<title>decltype  (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1237" width="1161.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="25.16" y="1247.5" >decltype </text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB9InputPortETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (30,303,030 samples, 1.55%)</title><rect x="788.6" y="517" width="18.2" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="791.56" y="527.5" ></text>
</g>
<g >
<title>DB::IMergingTransform&lt;DB::MergingSortedAlgorithm&gt;::work (60,606,060 samples, 3.09%)</title><rect x="308.0" y="885" width="36.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="311.04" y="895.5" >DB:..</text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__clear[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="971.0" y="885" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="974.03" y="895.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::resize&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="137.7" y="901" width="6.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="140.73" y="911.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (20,202,020 samples, 1.03%)</title><rect x="879.8" y="357" width="12.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="882.79" y="367.5" ></text>
</g>
<g >
<title>tsdn_tsd (10,101,010 samples, 0.52%)</title><rect x="344.5" y="469" width="6.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="347.54" y="479.5" ></text>
</g>
<g >
<title>tsdn_fetch (10,101,010 samples, 0.52%)</title><rect x="143.8" y="709" width="6.1" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="146.81" y="719.5" ></text>
</g>
<g >
<title>tcache_gc_dalloc_event_wait_get (10,101,010 samples, 0.52%)</title><rect x="910.2" y="69" width="6.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="913.21" y="79.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="733.8" y="693" width="6.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="736.81" y="703.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::destroy[abi:v15000]&lt;Poco::Dynamic::Var, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="1086.6" y="853" width="6.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1089.60" y="863.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;::destroy[abi:v15000]&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, void, void&gt; (30,303,030 samples, 1.55%)</title><rect x="819.0" y="565" width="18.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="821.97" y="575.5" ></text>
</g>
<g >
<title>DB::ColumnSparse::convertToFullColumnIfSparse (70,707,070 samples, 3.61%)</title><rect x="399.3" y="805" width="42.6" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="402.28" y="815.5" >DB::..</text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="831.1" y="325" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="834.13" y="335.5" ></text>
</g>
<g >
<title>DB::IOutputFormat::~IOutputFormat (10,101,010 samples, 0.52%)</title><rect x="916.3" y="613" width="6.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="919.29" y="623.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="885.9" y="133" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="888.88" y="143.5" ></text>
</g>
<g >
<title>emap_alloc_ctx_lookup (10,101,010 samples, 0.52%)</title><rect x="496.6" y="453" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="499.60" y="463.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="837.2" y="277" width="12.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="840.22" y="287.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::~vector[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="800.7" y="437" width="6.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="803.72" y="447.5" ></text>
</g>
<g >
<title>DB::OutputPort::~OutputPort (30,303,030 samples, 1.55%)</title><rect x="849.4" y="485" width="18.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="852.38" y="495.5" ></text>
</g>
<g >
<title>__GI___libc_write (10,101,010 samples, 0.52%)</title><rect x="636.5" y="597" width="6.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="639.49" y="607.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="83.0" y="725" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="85.99" y="735.5" ></text>
</g>
<g >
<title>extent_try_coalesce_impl (10,101,010 samples, 0.52%)</title><rect x="971.0" y="357" width="6.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="974.03" y="367.5" ></text>
</g>
<g >
<title>bool std::__1::operator&lt;[abi:v15000]&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="679.1" y="725" width="12.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="682.07" y="735.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="277.6" y="661" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="280.63" y="671.5" ></text>
</g>
<g >
<title>sdallocx_default (20,202,020 samples, 1.03%)</title><rect x="837.2" y="197" width="12.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="840.22" y="207.5" ></text>
</g>
<g >
<title>extent_merge_impl (10,101,010 samples, 0.52%)</title><rect x="326.3" y="149" width="6.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="329.29" y="159.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="1031.9" y="309" width="6.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1034.86" y="319.5" ></text>
</g>
<g >
<title>te_ctx_get (10,101,010 samples, 0.52%)</title><rect x="575.7" y="597" width="6.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="578.67" y="607.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="1123.1" y="741" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1126.09" y="751.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__get_short_size[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1001.4" y="725" width="6.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1004.44" y="735.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (20,202,020 samples, 1.03%)</title><rect x="879.8" y="373" width="12.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="882.79" y="383.5" ></text>
</g>
<g >
<title>witness_assert_lockless (10,101,010 samples, 0.52%)</title><rect x="40.4" y="789" width="6.1" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="43.41" y="799.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="277.6" y="789" width="12.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="280.63" y="799.5" ></text>
</g>
<g >
<title>free_default (20,202,020 samples, 1.03%)</title><rect x="825.1" y="357" width="12.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="828.05" y="367.5" ></text>
</g>
<g >
<title>thread_alloc_event (10,101,010 samples, 0.52%)</title><rect x="1013.6" y="421" width="6.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1016.61" y="431.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::SerializationNumber&lt;long&gt;, std::__1::allocator&lt;DB::SerializationNumber&lt;long&gt; &gt; &gt;::__on_zero_shared_weak (10,101,010 samples, 0.52%)</title><rect x="520.9" y="741" width="6.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="523.93" y="751.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="946.7" y="869" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="949.70" y="879.5" ></text>
</g>
<g >
<title>DB::NameAndTypePair::NameAndTypePair (10,101,010 samples, 0.52%)</title><rect x="642.6" y="805" width="6.1" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="645.58" y="815.5" ></text>
</g>
<g >
<title>aligned_usize_get (10,101,010 samples, 0.52%)</title><rect x="977.1" y="677" width="6.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="980.11" y="687.5" ></text>
</g>
<g >
<title>x64_sys_call (10,101,010 samples, 0.52%)</title><rect x="1177.8" y="949" width="6.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1180.84" y="959.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="22.2" y="517" width="6.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="25.16" y="527.5" ></text>
</g>
<g >
<title>DB::IDataType::~IDataType (10,101,010 samples, 0.52%)</title><rect x="156.0" y="837" width="6.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="158.98" y="847.5" ></text>
</g>
<g >
<title>void std::__1::__function::__policy_invoker&lt;void  (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1349" width="12.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="13.00" y="1359.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::~VarHolderImpl (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="565" width="12.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1144.34" y="575.5" ></text>
</g>
<g >
<title>ivsalloc (10,101,010 samples, 0.52%)</title><rect x="867.6" y="277" width="6.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="870.63" y="287.5" ></text>
</g>
<g >
<title>DB::DataTypeNumberBase&lt;unsigned long&gt;::~DataTypeNumberBase (10,101,010 samples, 0.52%)</title><rect x="156.0" y="853" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="158.98" y="863.5" ></text>
</g>
<g >
<title>tcache_gc_event_handler (10,101,010 samples, 0.52%)</title><rect x="587.8" y="501" width="6.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="590.84" y="511.5" ></text>
</g>
<g >
<title>tsdn_tsd (10,101,010 samples, 0.52%)</title><rect x="673.0" y="565" width="6.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="675.99" y="575.5" ></text>
</g>
<g >
<title>thread_alloc_event (10,101,010 samples, 0.52%)</title><rect x="624.3" y="549" width="6.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="627.33" y="559.5" ></text>
</g>
<g >
<title>idalloctm (10,101,010 samples, 0.52%)</title><rect x="825.1" y="325" width="6.0" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="828.05" y="335.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::Var (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="629" width="12.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1101.76" y="639.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="964.9" y="773" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="967.95" y="783.5" ></text>
</g>
<g >
<title>void std::__1::__function::__policy::__large_destroy&lt;std::__1::__function::__default_alloc_func&lt;DB::MergeTreeDataPartWriterCompact::writeDataBlock (10,101,010 samples, 0.52%)</title><rect x="989.3" y="853" width="6.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="992.28" y="863.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt; &gt; &gt;::destroy (20,202,020 samples, 1.03%)</title><rect x="770.3" y="693" width="12.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="773.31" y="703.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="405.4" y="677" width="6.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="408.36" y="687.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::alloc&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="636.5" y="741" width="6.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="639.49" y="751.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::insertDefault (10,101,010 samples, 0.52%)</title><rect x="593.9" y="741" width="6.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="596.92" y="751.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::construct[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="958.9" y="869" width="6.0" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="961.87" y="879.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="338.5" y="533" width="6.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="341.45" y="543.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::vector (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="869" width="12.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1010.53" y="879.5" ></text>
</g>
<g >
<title>DB::ISerialization::serializeBinaryBulkWithMultipleStreams (10,101,010 samples, 0.52%)</title><rect x="149.9" y="885" width="6.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="152.90" y="895.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="812.9" y="229" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="815.89" y="239.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="1031.9" y="277" width="6.0" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1034.86" y="287.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__clear[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="131.6" y="901" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="134.65" y="911.5" ></text>
</g>
<g >
<title>emap_rtree_leaf_elms_lookup (10,101,010 samples, 0.52%)</title><rect x="302.0" y="405" width="6.0" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="304.96" y="415.5" ></text>
</g>
<g >
<title>DB::createColumnConst (10,101,010 samples, 0.52%)</title><rect x="435.8" y="789" width="6.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="438.77" y="799.5" ></text>
</g>
<g >
<title>DB::CheckSortedTransform::~CheckSortedTransform (80,808,080 samples, 4.12%)</title><rect x="788.6" y="629" width="48.6" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="791.56" y="639.5" >DB::..</text>
</g>
<g >
<title>DB::Port::~Port (20,202,020 samples, 1.03%)</title><rect x="806.8" y="469" width="12.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="809.80" y="479.5" ></text>
</g>
<g >
<title>std::__1::__compressed_pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__rep, std::__1::allocator&lt;char&gt; &gt;::first[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1001.4" y="709" width="6.1" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1004.44" y="719.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="660.8" y="613" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="663.82" y="623.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::destroy[abi:v15000]&lt;DB::ColumnWithTypeAndName, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="861.5" y="389" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="864.55" y="399.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="1013.6" y="517" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1016.61" y="527.5" ></text>
</g>
<g >
<title>isdalloct (10,101,010 samples, 0.52%)</title><rect x="946.7" y="741" width="6.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="949.70" y="751.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;::__base_destruct_at_end[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="308.0" y="805" width="6.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="311.04" y="815.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="387.1" y="725" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="390.11" y="735.5" ></text>
</g>
<g >
<title>sz_size2index_compute (10,101,010 samples, 0.52%)</title><rect x="697.3" y="501" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="700.32" y="511.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="28.2" y="149" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="31.25" y="159.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="545.3" y="581" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="548.26" y="591.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="1104.8" y="565" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1107.85" y="575.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (20,202,020 samples, 1.03%)</title><rect x="879.8" y="261" width="12.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="882.79" y="271.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="1123.1" y="757" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1126.09" y="767.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="302.0" y="709" width="6.0" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="304.96" y="719.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="971.0" y="837" width="6.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="974.03" y="847.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="1098.8" y="357" width="6.0" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1101.76" y="367.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var* std::__1::__uninitialized_allocator_copy[abi:v15000]&lt;std::__1::allocator&lt;Poco::Dynamic::Var&gt;, Poco::Dynamic::Var*, Poco::Dynamic::Var*, Poco::Dynamic::Var*&gt; (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="773" width="6.1" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1095.68" y="783.5" ></text>
</g>
<g >
<title>arena_decay_impl (10,101,010 samples, 0.52%)</title><rect x="326.3" y="309" width="6.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="329.29" y="319.5" ></text>
</g>
<g >
<title>inallocx (10,101,010 samples, 0.52%)</title><rect x="1159.6" y="629" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1162.59" y="639.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::~ColumnVector (20,202,020 samples, 1.03%)</title><rect x="326.3" y="581" width="12.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="329.29" y="591.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="971.0" y="709" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="974.03" y="719.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="325" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1010.53" y="335.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="789" width="12.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1053.10" y="799.5" ></text>
</g>
<g >
<title>std::__1::enable_if&lt;__is_cpp17_random_access_iterator&lt;char const*&gt;::value, char*&gt;::type std::__1::copy_n[abi:v15000]&lt;char const*, unsigned long, char*&gt; (10,101,010 samples, 0.52%)</title><rect x="1153.5" y="661" width="6.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1156.51" y="671.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="472.3" y="613" width="12.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="475.27" y="623.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="898.0" y="165" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="901.04" y="175.5" ></text>
</g>
<g >
<title>te_ctx_next_event_fast_get (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="165" width="6.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1059.19" y="175.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="873.7" y="229" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="876.71" y="239.5" ></text>
</g>
<g >
<title>extent_try_delayed_coalesce (10,101,010 samples, 0.52%)</title><rect x="326.3" y="213" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="329.29" y="223.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB15NameAndTypePairETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="496.6" y="725" width="6.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="499.60" y="735.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="849.4" y="309" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="852.38" y="319.5" ></text>
</g>
<g >
<title>rtree_leaf_elm_read (10,101,010 samples, 0.52%)</title><rect x="1141.3" y="357" width="6.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1144.34" y="367.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::destroy[abi:v15000]&lt;DB::ColumnWithTypeAndName, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="971.0" y="853" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="974.03" y="863.5" ></text>
</g>
<g >
<title>DB::NameAndTypePair::~NameAndTypePair (20,202,020 samples, 1.03%)</title><rect x="569.6" y="821" width="12.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="572.59" y="831.5" ></text>
</g>
<g >
<title>_ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEC2B6v15000IRS7_mTnPNS_9enable_ifIXclsr10_CheckArgsE17__enable_implicitIT_T0_EEEvE4typeELPv0EEEOSC_OSD_ (10,101,010 samples, 0.52%)</title><rect x="958.9" y="837" width="6.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="961.87" y="847.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 1.03%)</title><rect x="472.3" y="565" width="12.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="475.27" y="575.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="971.0" y="821" width="6.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="974.03" y="831.5" ></text>
</g>
<g >
<title>emap_edata_is_acquired (10,101,010 samples, 0.52%)</title><rect x="374.9" y="453" width="6.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="377.95" y="463.5" ></text>
</g>
<g >
<title>CurrentMemoryTracker::allocImpl (10,101,010 samples, 0.52%)</title><rect x="636.5" y="693" width="6.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="639.49" y="703.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="837.2" y="293" width="12.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="840.22" y="303.5" ></text>
</g>
<g >
<title>DB::Port::~Port (10,101,010 samples, 0.52%)</title><rect x="910.2" y="469" width="6.1" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="913.21" y="479.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="125.6" y="789" width="6.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="128.57" y="799.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;std::__1::shared_ptr&lt;DB::ISerialization const&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;DB::ISerialization const&gt; &gt; &gt;::~vector[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="782.5" y="725" width="6.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="785.47" y="735.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::realloc&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="344.5" y="789" width="6.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="347.54" y="799.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::__find_leaf_high (10,101,010 samples, 0.52%)</title><rect x="952.8" y="853" width="6.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="955.78" y="863.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::destruct (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="693" width="6.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1120.01" y="703.5" ></text>
</g>
<g >
<title>tsd_peak_alloc_event_waitp_get (10,101,010 samples, 0.52%)</title><rect x="1129.2" y="645" width="6.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1132.18" y="655.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="1159.6" y="645" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1162.59" y="655.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="770.3" y="437" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="773.31" y="447.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="283.7" y="677" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="286.71" y="687.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="581.8" y="725" width="6.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="584.75" y="735.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="527.0" y="645" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="530.01" y="655.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="587.8" y="597" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="590.84" y="607.5" ></text>
</g>
<g >
<title>te_next_event_compute (10,101,010 samples, 0.52%)</title><rect x="1013.6" y="341" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1016.61" y="351.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::~Var (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="725" width="12.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1053.10" y="735.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="435.8" y="613" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="438.77" y="623.5" ></text>
</g>
<g >
<title>emap_rtree_leaf_elms_lookup (10,101,010 samples, 0.52%)</title><rect x="971.0" y="293" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="974.03" y="303.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="22.2" y="533" width="6.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="25.16" y="543.5" ></text>
</g>
<g >
<title>DB::MergeTreeDataPartWriterCompact::fillChecksums (50,505,050 samples, 2.58%)</title><rect x="964.9" y="949" width="30.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="967.95" y="959.5" >DB..</text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="22.2" y="373" width="6.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="25.16" y="383.5" ></text>
</g>
<g >
<title>DB::MergedBlockOutputStream::finalizePart (424,242,420 samples, 21.65%)</title><rect x="922.4" y="981" width="255.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="925.37" y="991.5" >DB::MergedBlockOutputStream::final..</text>
</g>
<g >
<title>Poco::Dynamic::Var::~Var (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="549" width="12.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1053.10" y="559.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="873.7" y="245" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="876.71" y="255.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="855.5" y="277" width="6.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="858.46" y="287.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="545.3" y="629" width="6.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="548.26" y="639.5" ></text>
</g>
<g >
<title>void* (anonymous namespace)::allocNoTrack&lt;false, false&gt; (10,101,010 samples, 0.52%)</title><rect x="593.9" y="645" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="596.92" y="655.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="821" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1168.67" y="831.5" ></text>
</g>
<g >
<title>std::__1::__shared_weak_count::__release_shared[abi:v15000] (222,222,220 samples, 11.34%)</title><rect x="788.6" y="933" width="133.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="791.56" y="943.5" >std::__1::__shar..</text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="1074.4" y="485" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1077.43" y="495.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="1013.6" y="405" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1016.61" y="415.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="1104.8" y="517" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1107.85" y="527.5" ></text>
</g>
<g >
<title>_ZNSt3__116__variant_detail12__visitation9__variant11__visit_altB6v15000INS2_15__value_visitorIRZN2DB22MergingSortedAlgorithm5mergeEvE3$_0EEJRNS_7variantIJNS5_16SortingQueueImplINS5_33SpecializedSingleColumnSortCursorINS5_12ColumnVectorIDuEEEELNS5_20SortingQueueStrategyE0EEENSB_INSC_INSD_ItEEEELSG_0EEENSB_INSC_INSD_IjEEEELSG_0EEENSB_INSC_INSD_ImEEEELSG_0EEENSB_INSC_INSD_IN4wide7integerILm128EjEEEEEELSG_0EEENSB_INSC_INSD_INSS_ILm256EjEEEEEELSG_0EEENSB_INSC_INSD_IDB8_EEEELSG_0EEENSB_INSC_INSD_IsEEEELSG_0EEENSB_INSC_INSD_IiEEEELSG_0EEENSB_INSC_INSD_IlEEEELSG_0EEENSB_INSC_INSD_INSS_ILm128EiEEEEEELSG_0EEENSB_INSC_INSD_INSS_ILm256EiEEEEEELSG_0EEENSB_INSC_INSD_IfEEEELSG_0EEENSB_INSC_INSD_IdEEEELSG_0EEENSB_INSC_INS5_13ColumnDecimalINS5_7DecimalIiEEEEEELSG_0EEENSB_INSC_INS1S_INS1T_IlEEEEEELSG_0EEENSB_INSC_INS1S_INS1T_IS1E_EEEEEELSG_0EEENSB_INSC_INS1S_INS1T_IS1I_EEEEEELSG_0EEENSB_INSC_INS1S_INS5_10DateTime64EEEEELSG_0EEENSB_INSC_INSD_I13StrongTypedefIST_NS5_7UUIDTagEEEEEELSG_0EEENSB_INSC_INSD_INS5_4IPv4EEEEELSG_0EEENSB_INSC_INSD_INS5_4IPv6EEEEELSG_0EEENSB_INSC_INS5_12ColumnStringEEELSG_0EEENSB_INSC_INS5_17ColumnFixedStringEEELSG_0EEENSB_INS5_16SimpleSortCursorELSG_0EEENSB_INS5_10SortCursorELSG_0EEENSB_INS5_23SortCursorWithCollationELSG_0EEEEEEEEEDcOT_DpOT0_ (50,505,050 samples, 2.58%)</title><rect x="314.1" y="805" width="30.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="317.12" y="815.5" >_Z..</text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Array&gt;::VarHolderImpl (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="677" width="12.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1028.77" y="687.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="892.0" y="357" width="6.0" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="894.96" y="367.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="691.2" y="629" width="12.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="694.24" y="639.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="624.3" y="613" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="627.33" y="623.5" ></text>
</g>
<g >
<title>tsd_tsdn (10,101,010 samples, 0.52%)</title><rect x="1044.0" y="613" width="6.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1047.02" y="623.5" ></text>
</g>
<g >
<title>DB::ColumnsDescription::ColumnsDescription (30,303,030 samples, 1.55%)</title><rect x="922.4" y="933" width="18.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="925.37" y="943.5" ></text>
</g>
<g >
<title>maybe_check_alloc_ctx (10,101,010 samples, 0.52%)</title><rect x="119.5" y="725" width="6.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="122.48" y="735.5" ></text>
</g>
<g >
<title>tsd_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="879.8" y="133" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="882.79" y="143.5" ></text>
</g>
<g >
<title>inallocx (10,101,010 samples, 0.52%)</title><rect x="539.2" y="549" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="542.18" y="559.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB20CheckSortedTransformETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (80,808,080 samples, 4.12%)</title><rect x="788.6" y="645" width="48.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="791.56" y="655.5" >_ZNS..</text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="1080.5" y="533" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1083.52" y="543.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="143.8" y="773" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="146.81" y="783.5" ></text>
</g>
<g >
<title>tcache_available (10,101,010 samples, 0.52%)</title><rect x="320.2" y="501" width="6.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="323.21" y="511.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::destruct (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="741" width="6.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1065.27" y="751.5" ></text>
</g>
<g >
<title>free_default (20,202,020 samples, 1.03%)</title><rect x="326.3" y="485" width="12.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="329.29" y="495.5" ></text>
</g>
<g >
<title>void std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::insert[abi:v15000]&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt; &gt; (30,303,030 samples, 1.55%)</title><rect x="1019.7" y="853" width="18.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1022.69" y="863.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="52.6" y="821" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="55.58" y="831.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="40.4" y="853" width="12.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="43.41" y="863.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="770.3" y="549" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="773.31" y="559.5" ></text>
</g>
<g >
<title>DB::NameAndTypePair::getNameInStorage (10,101,010 samples, 0.52%)</title><rect x="624.3" y="789" width="6.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="627.33" y="799.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 1.03%)</title><rect x="837.2" y="229" width="12.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="840.22" y="239.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="788.6" y="309" width="12.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="791.56" y="319.5" ></text>
</g>
<g >
<title>DB::Nested::concatenateName (30,303,030 samples, 1.55%)</title><rect x="715.6" y="773" width="18.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="718.57" y="783.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (30,303,030 samples, 1.55%)</title><rect x="715.6" y="709" width="18.2" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="718.57" y="719.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="472.3" y="629" width="12.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="475.27" y="639.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="837" width="6.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1138.26" y="847.5" ></text>
</g>
<g >
<title>std::__1::unique_ptr&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;, std::__1::__tree_node_destructor&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt; &gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__construct_node&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; const&amp;&gt; (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="629" width="12.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1010.53" y="639.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__shared_ptr_emplace&lt;DB::SerializationNumber&lt;long&gt;, std::__1::allocator&lt;DB::SerializationNumber&lt;long&gt; &gt; &gt; &gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="922.4" y="789" width="6.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="925.37" y="799.5" ></text>
</g>
<g >
<title>DB::NullSource::~NullSource (10,101,010 samples, 0.52%)</title><rect x="910.2" y="629" width="6.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="913.21" y="639.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="645" width="6.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1174.75" y="655.5" ></text>
</g>
<g >
<title>sz_s2u (10,101,010 samples, 0.52%)</title><rect x="581.8" y="597" width="6.0" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="584.75" y="607.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::NullSource&gt; &gt;::destroy[abi:v15000]&lt;DB::NullSource, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="910.2" y="677" width="6.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="913.21" y="687.5" ></text>
</g>
<g >
<title>arena_vsalloc (10,101,010 samples, 0.52%)</title><rect x="867.6" y="261" width="6.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="870.63" y="271.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="660.8" y="549" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="663.82" y="559.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="922.4" y="757" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="925.37" y="767.5" ></text>
</g>
<g >
<title>bool std::__1::operator&lt;[abi:v15000]&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="271.5" y="853" width="6.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="274.55" y="863.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::list (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="933" width="6.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1168.67" y="943.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::Var (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="565" width="12.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1010.53" y="575.5" ></text>
</g>
<g >
<title>void boost::sp_adl_block::intrusive_ptr_release&lt;DB::IColumn, boost::sp_adl_block::thread_safe_counter&gt; (20,202,020 samples, 1.03%)</title><rect x="58.7" y="821" width="12.1" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="61.66" y="831.5" ></text>
</g>
<g >
<title>sdallocx_default (20,202,020 samples, 1.03%)</title><rect x="569.6" y="677" width="12.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="572.59" y="687.5" ></text>
</g>
<g >
<title>DB::IDataType::getSerialization (20,202,020 samples, 1.03%)</title><rect x="703.4" y="773" width="12.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="706.40" y="783.5" ></text>
</g>
<g >
<title>inallocx (10,101,010 samples, 0.52%)</title><rect x="514.8" y="581" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="517.85" y="591.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="411.4" y="725" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="414.44" y="735.5" ></text>
</g>
<g >
<title>DB::IDataType::createColumn (20,202,020 samples, 1.03%)</title><rect x="587.8" y="805" width="12.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="590.84" y="815.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="624.3" y="533" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="627.33" y="543.5" ></text>
</g>
<g >
<title>Poco::JSON::Array::stringify (20,202,020 samples, 1.03%)</title><rect x="1153.5" y="853" width="12.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1156.51" y="863.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::Var&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="995.4" y="901" width="6.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="998.36" y="911.5" ></text>
</g>
<g >
<title>tcache_get (10,101,010 samples, 0.52%)</title><rect x="320.2" y="517" width="6.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="323.21" y="527.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="437" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1120.01" y="447.5" ></text>
</g>
<g >
<title>std::__1::__shared_weak_count::__add_shared[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="502.7" y="693" width="6.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="505.68" y="703.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt;::construct[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="837" width="12.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1101.76" y="847.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN2DB17SerializationInfoEEEEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPSF_ (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="757" width="6.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1174.75" y="767.5" ></text>
</g>
<g >
<title>void boost::sp_adl_block::intrusive_ptr_release&lt;DB::IColumn, boost::sp_adl_block::thread_safe_counter&gt; (10,101,010 samples, 0.52%)</title><rect x="399.3" y="661" width="6.1" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="402.28" y="671.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="739.9" y="773" width="12.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="742.90" y="783.5" ></text>
</g>
<g >
<title>imalloc_fastpath (20,202,020 samples, 1.03%)</title><rect x="606.1" y="597" width="12.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="609.08" y="607.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4Poco7Dynamic3VarEEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPSE_ (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="773" width="12.2" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1053.10" y="783.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="1074.4" y="437" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1077.43" y="447.5" ></text>
</g>
<g >
<title>std::__1::__split_buffer&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt;&amp;&gt;::__destruct_at_end[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="821" width="6.1" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1065.27" y="831.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="853" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1168.67" y="863.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append (10,101,010 samples, 0.52%)</title><rect x="168.1" y="693" width="6.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="171.14" y="703.5" ></text>
</g>
<g >
<title>DB::CompressedReadBufferFromFile::readBig (10,101,010 samples, 0.52%)</title><rect x="630.4" y="773" width="6.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="633.41" y="783.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.52%)</title><rect x="259.4" y="901" width="6.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="262.38" y="911.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::~Var (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="757" width="6.0" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1138.26" y="767.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (30,303,030 samples, 1.55%)</title><rect x="715.6" y="725" width="18.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="718.57" y="735.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::VarHolderImpl (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="517" width="12.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1028.77" y="527.5" ></text>
</g>
<g >
<title>decltype (50,505,050 samples, 2.58%)</title><rect x="314.1" y="741" width="30.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="317.12" y="751.5" >de..</text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="52.6" y="885" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="55.58" y="895.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="469" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1120.01" y="479.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="910.2" y="101" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="913.21" y="111.5" ></text>
</g>
<g >
<title>witness_assert_depth_to_rank (10,101,010 samples, 0.52%)</title><rect x="113.4" y="677" width="6.1" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="116.40" y="687.5" ></text>
</g>
<g >
<title>Poco::JSON::Object::~Object (30,303,030 samples, 1.55%)</title><rect x="1135.3" y="917" width="18.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1138.26" y="927.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="460.1" y="629" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="463.10" y="639.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::InputPort, std::__1::allocator&lt;DB::InputPort&gt; &gt;::clear (20,202,020 samples, 1.03%)</title><rect x="892.0" y="533" width="12.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="894.96" y="543.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::alloc&lt;&gt; (20,202,020 samples, 1.03%)</title><rect x="423.6" y="741" width="12.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="426.61" y="751.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::clear (10,101,010 samples, 0.52%)</title><rect x="758.1" y="677" width="6.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="761.14" y="687.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;DB::ISerialization::Substream&gt;::allocate_at_least[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="660.8" y="693" width="6.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="663.82" y="703.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="520.9" y="661" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="523.93" y="671.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="964.9" y="837" width="6.1" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="967.95" y="847.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 1.03%)</title><rect x="739.9" y="693" width="12.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="742.90" y="703.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="618.2" y="629" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="621.25" y="639.5" ></text>
</g>
<g >
<title>Poco::JSON::Array::~Array (10,101,010 samples, 0.52%)</title><rect x="1086.6" y="917" width="6.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1089.60" y="927.5" ></text>
</g>
<g >
<title>sz_psz_quantize_floor (10,101,010 samples, 0.52%)</title><rect x="593.9" y="277" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="596.92" y="287.5" ></text>
</g>
<g >
<title>std::__1::__split_buffer&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt;*, std::__1::allocator&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt;*&gt; &gt;::begin[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="597" width="6.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1040.94" y="607.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="648.7" y="757" width="6.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="651.66" y="767.5" ></text>
</g>
<g >
<title>inallocx (10,101,010 samples, 0.52%)</title><rect x="289.8" y="773" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="292.79" y="783.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;::~pair (10,101,010 samples, 0.52%)</title><rect x="1044.0" y="725" width="6.1" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1047.02" y="735.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::destroy (30,303,030 samples, 1.55%)</title><rect x="1135.3" y="853" width="18.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1138.26" y="863.5" ></text>
</g>
<g >
<title>thread_alloc_event (10,101,010 samples, 0.52%)</title><rect x="1104.8" y="485" width="6.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1107.85" y="495.5" ></text>
</g>
<g >
<title>std::__1::deque&lt;unsigned long, std::__1::allocator&lt;unsigned long&gt; &gt;::push_back (10,101,010 samples, 0.52%)</title><rect x="302.0" y="885" width="6.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="304.96" y="895.5" ></text>
</g>
<g >
<title>operator delete (30,303,030 samples, 1.55%)</title><rect x="107.3" y="789" width="18.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="110.32" y="799.5" ></text>
</g>
<g >
<title>rtree_read_independent (10,101,010 samples, 0.52%)</title><rect x="484.4" y="597" width="6.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="487.43" y="607.5" ></text>
</g>
<g >
<title>imalloc_body (20,202,020 samples, 1.03%)</title><rect x="715.6" y="549" width="12.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="718.57" y="559.5" ></text>
</g>
<g >
<title>free (20,202,020 samples, 1.03%)</title><rect x="825.1" y="373" width="12.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="828.05" y="383.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1159.6" y="757" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1162.59" y="767.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::realloc&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="435.8" y="725" width="6.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="438.77" y="735.5" ></text>
</g>
<g >
<title>void std::__1::__function::__policy_invoker&lt;void  (30,303,030 samples, 1.55%)</title><rect x="22.2" y="981" width="18.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="25.16" y="991.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::insert[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="677" width="12.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1010.53" y="687.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="910.2" y="245" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="913.21" y="255.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::MergeTreeSequentialSource, std::__1::allocator&lt;DB::MergeTreeSequentialSource&gt; &gt;::__on_zero_shared (40,404,040 samples, 2.06%)</title><rect x="867.6" y="693" width="24.4" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="870.63" y="703.5" >s..</text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.52%)</title><rect x="636.5" y="565" width="6.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="639.49" y="575.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="581.8" y="693" width="6.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="584.75" y="703.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="545.3" y="693" width="6.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="548.26" y="703.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt; &gt;, void*&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="770.3" y="517" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="773.31" y="527.5" ></text>
</g>
<g >
<title>DB::MergingSortedAlgorithm::~MergingSortedAlgorithm (10,101,010 samples, 0.52%)</title><rect x="904.1" y="597" width="6.1" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="907.12" y="607.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="1074.4" y="597" width="12.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1077.43" y="607.5" ></text>
</g>
<g >
<title>pac_alloc_real (10,101,010 samples, 0.52%)</title><rect x="302.0" y="533" width="6.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="304.96" y="543.5" ></text>
</g>
<g >
<title>arena_sdalloc (10,101,010 samples, 0.52%)</title><rect x="1050.1" y="357" width="6.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1053.10" y="367.5" ></text>
</g>
<g >
<title>DB::Block::~Block (10,101,010 samples, 0.52%)</title><rect x="904.1" y="581" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="907.12" y="591.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="642.6" y="709" width="6.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="645.58" y="719.5" ></text>
</g>
<g >
<title>_ZNSt3__116__thread_executeB6v15000INS_10unique_ptrINS_15__thread_structENS_14default_deleteIS2_EEEEZN14ThreadPoolImplINS_6threadEE12scheduleImplIvEET_NS_8functionIFvvEEE8PriorityNS_8optionalImEEbEUlvE0_JETpTnmJEEEvRNS_5tupleIJSA_T0_DpT1_EEENS_15__tuple_indicesIJXspT2_EEEE (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1445" width="1161.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="25.16" y="1455.5" >_ZNSt3__116__thread_executeB6v15000INS_10unique_ptrINS_15__thread_structENS_14default_deleteIS2_EEEEZN14ThreadPoolImplINS_6threadEE12scheduleImplIvEET_NS_8functio..</text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Array&gt;::clone (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="773" width="12.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1101.76" y="783.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="648.7" y="741" width="6.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="651.66" y="751.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt; &gt; &gt;::__clear[abi:v15000] (222,222,220 samples, 11.34%)</title><rect x="788.6" y="821" width="133.8" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="791.56" y="831.5" >std::__1::vector..</text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1098.8" y="581" width="6.0" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1101.76" y="591.5" ></text>
</g>
<g >
<title>large_dalloc (10,101,010 samples, 0.52%)</title><rect x="52.6" y="757" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="55.58" y="767.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="34.3" y="277" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="37.33" y="287.5" ></text>
</g>
<g >
<title>te_ctx_get (10,101,010 samples, 0.52%)</title><rect x="295.9" y="709" width="6.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="298.88" y="719.5" ></text>
</g>
<g >
<title>sz_size2index_compute (10,101,010 samples, 0.52%)</title><rect x="861.5" y="133" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="864.55" y="143.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (30,303,030 samples, 1.55%)</title><rect x="715.6" y="645" width="18.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="718.57" y="655.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init_copy_ctor_external (10,101,010 samples, 0.52%)</title><rect x="624.3" y="757" width="6.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="627.33" y="767.5" ></text>
</g>
<g >
<title>DB::MergeTreeDataPartWriterCompact::write (333,333,330 samples, 17.01%)</title><rect x="70.8" y="949" width="200.7" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="73.82" y="959.5" >DB::MergeTreeDataPartWrite..</text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="1129.2" y="789" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1132.18" y="799.5" ></text>
</g>
<g >
<title>epoch_ctl (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1125" width="12.2" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="13.00" y="1135.5" ></text>
</g>
<g >
<title>Poco::JSON::Object::~Object (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="645" width="6.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1120.01" y="655.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var* std::__1::construct_at[abi:v15000]&lt;Poco::Dynamic::Var, Poco::Dynamic::Var&amp;, Poco::Dynamic::Var*&gt; (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="805" width="12.2" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="1010.53" y="815.5" ></text>
</g>
<g >
<title>sz_size2index_lookup (10,101,010 samples, 0.52%)</title><rect x="855.5" y="181" width="6.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="858.46" y="191.5" ></text>
</g>
<g >
<title>rtree_leaf_elm_bits_decode (10,101,010 samples, 0.52%)</title><rect x="1147.4" y="293" width="6.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1150.42" y="303.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;DB::SerializationNumber&lt;long&gt; &gt; std::__1::__allocation_guard&lt;std::__1::allocator&lt;std::__1::__shared_ptr_emplace&lt;DB::SerializationNumber&lt;long&gt;, std::__1::allocator&lt;DB::SerializationNumber&lt;long&gt; &gt; &gt; &gt; &gt;::__allocation_guard[abi:v15000]&lt;std::__1::allocator&lt;DB::SerializationNumber&lt;long&gt; &gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="922.4" y="821" width="6.1" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="925.37" y="831.5" ></text>
</g>
<g >
<title>std::__1::__shared_weak_count::__release_shared[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="22.2" y="869" width="18.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="25.16" y="879.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="28.2" y="165" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="31.25" y="175.5" ></text>
</g>
<g >
<title>std::__1::shared_ptr&lt;DB::MergedBlockOutputStream&gt;::~shared_ptr[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="28.2" y="629" width="12.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="31.25" y="639.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="1013.6" y="453" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1016.61" y="463.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="715.6" y="661" width="18.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="718.57" y="671.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="821" width="6.0" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1138.26" y="831.5" ></text>
</g>
<g >
<title>std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::~unordered_map[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="867.6" y="437" width="12.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="870.63" y="447.5" ></text>
</g>
<g >
<title>tcache_event (10,101,010 samples, 0.52%)</title><rect x="587.8" y="485" width="6.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="590.84" y="495.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="501" width="6.0" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1174.75" y="511.5" ></text>
</g>
<g >
<title>arena_malloc (20,202,020 samples, 1.03%)</title><rect x="368.9" y="677" width="12.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="371.87" y="687.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="812.9" y="325" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="815.89" y="335.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate_at_least[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="277.6" y="757" width="12.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="280.63" y="767.5" ></text>
</g>
<g >
<title>DB::OutputPort::~OutputPort (40,404,040 samples, 2.06%)</title><rect x="867.6" y="485" width="24.4" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="870.63" y="495.5" >D..</text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="746.0" y="677" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="748.98" y="687.5" ></text>
</g>
<g >
<title>DB::OutputPort::~OutputPort (10,101,010 samples, 0.52%)</title><rect x="910.2" y="485" width="6.1" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="913.21" y="495.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;::~pair (10,101,010 samples, 0.52%)</title><rect x="946.7" y="917" width="6.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="949.70" y="927.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="125.6" y="661" width="6.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="128.57" y="671.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::reserveForNextSize&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="587.8" y="709" width="6.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="590.84" y="719.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="693" width="6.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1174.75" y="703.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::~ColumnVector (30,303,030 samples, 1.55%)</title><rect x="326.3" y="597" width="18.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="329.29" y="607.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;DB::NameAndTypePair, void*&gt; &gt; &gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="885" width="6.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1168.67" y="895.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 1.03%)</title><rect x="40.4" y="837" width="12.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="43.41" y="847.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="940.6" y="773" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="943.62" y="783.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="539.2" y="597" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="542.18" y="607.5" ></text>
</g>
<g >
<title>std::__1::enable_if&lt;__is_cpp17_forward_iterator&lt;Poco::Dynamic::Var*&gt;::value, void&gt;::type std::__1::vector&lt;Poco::Dynamic::Var, std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::__construct_at_end&lt;Poco::Dynamic::Var*&gt; (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="693" width="12.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1101.76" y="703.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate_at_least[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="289.8" y="869" width="6.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="292.79" y="879.5" ></text>
</g>
<g >
<title>std::__1::__function::__default_alloc_func&lt;ThreadFromGlobalPoolImpl&lt;true&gt;::ThreadFromGlobalPoolImpl&lt;DB::AsynchronousMetrics::start (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1333" width="12.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="13.00" y="1343.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="332.4" y="437" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="335.37" y="447.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="131.6" y="709" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="134.65" y="719.5" ></text>
</g>
<g >
<title>std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::~unordered_map[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="916.3" y="437" width="6.1" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="919.29" y="447.5" ></text>
</g>
<g >
<title>witness_assert_depth_to_rank (10,101,010 samples, 0.52%)</title><rect x="922.4" y="661" width="6.1" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="925.37" y="671.5" ></text>
</g>
<g >
<title>DB::MergeTreeReaderCompactSingleBuffer::readRows (282,828,280 samples, 14.43%)</title><rect x="587.8" y="837" width="170.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="590.84" y="847.5" >DB::MergeTreeReaderCom..</text>
</g>
<g >
<title>witness_tsdn_null (10,101,010 samples, 0.52%)</title><rect x="922.4" y="645" width="6.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="925.37" y="655.5" ></text>
</g>
<g >
<title>tsd_thread_allocated_next_event_fastp_get (10,101,010 samples, 0.52%)</title><rect x="1074.4" y="389" width="6.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1077.43" y="399.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="405.4" y="725" width="6.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="408.36" y="735.5" ></text>
</g>
<g >
<title>DB::WriteBuffer::next (30,303,030 samples, 1.55%)</title><rect x="180.3" y="901" width="18.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="183.31" y="911.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="861.5" y="245" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="864.55" y="255.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="168.1" y="613" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="171.14" y="623.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="539.2" y="581" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="542.18" y="591.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;long&gt;::~ColumnVector (10,101,010 samples, 0.52%)</title><rect x="819.0" y="453" width="6.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="821.97" y="463.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="1159.6" y="773" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1162.59" y="783.5" ></text>
</g>
<g >
<title>imalloc (20,202,020 samples, 1.03%)</title><rect x="423.6" y="645" width="12.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="426.61" y="655.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="898.0" y="181" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="901.04" y="191.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="557.4" y="629" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="560.42" y="639.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="302.0" y="821" width="6.0" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="304.96" y="831.5" ></text>
</g>
<g >
<title>tcache_gc_small (10,101,010 samples, 0.52%)</title><rect x="58.7" y="581" width="6.0" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="61.66" y="591.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="34.3" y="325" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="37.33" y="335.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__clear[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="800.7" y="421" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="803.72" y="431.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::~vector[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="910.2" y="437" width="6.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="913.21" y="447.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::~__hash_table (20,202,020 samples, 1.03%)</title><rect x="806.8" y="421" width="12.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="809.80" y="431.5" ></text>
</g>
<g >
<title>void* std::__1::__thread_proxy[abi:v15000]&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, ThreadPoolImpl&lt;std::__1::thread&gt;::scheduleImpl&lt;void&gt; (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1461" width="1161.7" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="25.16" y="1471.5" >void* std::__1::__thread_proxy[abi:v15000]&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, ..</text>
</g>
<g >
<title>arena_dalloc_bin_locked_step (10,101,010 samples, 0.52%)</title><rect x="58.7" y="517" width="6.0" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="61.66" y="527.5" ></text>
</g>
<g >
<title>extent_recycle (10,101,010 samples, 0.52%)</title><rect x="593.9" y="357" width="6.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="596.92" y="367.5" ></text>
</g>
<g >
<title>tsd_witness_tsdp_get (10,101,010 samples, 0.52%)</title><rect x="928.5" y="693" width="6.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="931.45" y="703.5" ></text>
</g>
<g >
<title>DB::Block::~Block (10,101,010 samples, 0.52%)</title><rect x="466.2" y="821" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="469.19" y="831.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="773" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1168.67" y="783.5" ></text>
</g>
<g >
<title>std::__1::shared_ptr&lt;DB::MergeTask::GlobalRuntimeContext&gt;::~shared_ptr[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="22.2" y="757" width="18.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="25.16" y="767.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB9InputPortETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (20,202,020 samples, 1.03%)</title><rect x="837.2" y="501" width="12.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="840.22" y="511.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::destruct (20,202,020 samples, 1.03%)</title><rect x="1141.3" y="757" width="12.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1144.34" y="767.5" ></text>
</g>
<g >
<title>sdallocx (30,303,030 samples, 1.55%)</title><rect x="107.3" y="773" width="18.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="110.32" y="783.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="485" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1095.68" y="495.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="405.4" y="693" width="6.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="408.36" y="703.5" ></text>
</g>
<g >
<title>arena_sdalloc (10,101,010 samples, 0.52%)</title><rect x="873.7" y="149" width="6.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="876.71" y="159.5" ></text>
</g>
<g >
<title>std::__1::shared_ptr&lt;DB::SerializationNumber&lt;long&gt; &gt; std::__1::make_shared[abi:v15000]&lt;DB::SerializationNumber&lt;long&gt;, , void&gt; (10,101,010 samples, 0.52%)</title><rect x="922.4" y="853" width="6.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="925.37" y="863.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::operator= (10,101,010 samples, 0.52%)</title><rect x="952.8" y="901" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="955.78" y="911.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="472.3" y="597" width="12.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="475.27" y="607.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="34.3" y="357" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="37.33" y="367.5" ></text>
</g>
<g >
<title>DB::ColumnDescription* std::__1::construct_at[abi:v15000]&lt;DB::ColumnDescription, DB::ColumnDescription, DB::ColumnDescription*&gt; (10,101,010 samples, 0.52%)</title><rect x="934.5" y="757" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="937.54" y="767.5" ></text>
</g>
<g >
<title>pai_alloc (10,101,010 samples, 0.52%)</title><rect x="374.9" y="581" width="6.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="377.95" y="591.5" ></text>
</g>
<g >
<title>sdallocx (20,202,020 samples, 1.03%)</title><rect x="788.6" y="213" width="12.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="791.56" y="223.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="34.3" y="293" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="37.33" y="303.5" ></text>
</g>
<g >
<title>rtree_read_independent (10,101,010 samples, 0.52%)</title><rect x="849.4" y="229" width="6.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="852.38" y="239.5" ></text>
</g>
<g >
<title>std::__1::function&lt;void  (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1381" width="1161.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="25.16" y="1391.5" >std::__1::function&lt;void </text>
</g>
<g >
<title>std::__1::__function::__default_alloc_func&lt;DB::MergeTreeDataPartWriterCompact::writeDataBlock (20,202,020 samples, 1.03%)</title><rect x="168.1" y="821" width="12.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="171.14" y="831.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB22MergingSortedTransformETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (30,303,030 samples, 1.55%)</title><rect x="892.0" y="645" width="18.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="894.96" y="655.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::createWithOffsets (30,303,030 samples, 1.55%)</title><rect x="417.5" y="789" width="18.3" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="420.53" y="799.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;::__clear[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="308.0" y="821" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="311.04" y="831.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="131.6" y="661" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="134.65" y="671.5" ></text>
</g>
<g >
<title>sz_size2index_lookup (10,101,010 samples, 0.52%)</title><rect x="977.1" y="629" width="6.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="980.11" y="639.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="758.1" y="549" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="761.14" y="559.5" ></text>
</g>
<g >
<title>extent_alloc_retained (10,101,010 samples, 0.52%)</title><rect x="302.0" y="501" width="6.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="304.96" y="511.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="593.9" y="629" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="596.92" y="639.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="435.8" y="645" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="438.77" y="655.5" ></text>
</g>
<g >
<title>DB::ColumnWithTypeAndName::~ColumnWithTypeAndName (20,202,020 samples, 1.03%)</title><rect x="879.8" y="341" width="12.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="882.79" y="351.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="764.2" y="629" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="767.23" y="639.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="520.9" y="565" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="523.93" y="575.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="758.1" y="501" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="761.14" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive_ptr&lt;DB::IColumn const&gt;::~intrusive_ptr (10,101,010 samples, 0.52%)</title><rect x="399.3" y="677" width="6.1" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="402.28" y="687.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPSB_ (10,101,010 samples, 0.52%)</title><rect x="28.2" y="309" width="6.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="31.25" y="319.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::__deallocate_node (50,505,050 samples, 2.58%)</title><rect x="101.2" y="885" width="30.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="104.24" y="895.5" >st..</text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;::operator= (40,404,040 samples, 2.06%)</title><rect x="320.2" y="661" width="24.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="323.21" y="671.5" >C..</text>
</g>
<g >
<title>DB::QueryPipeline::reset (222,222,220 samples, 11.34%)</title><rect x="788.6" y="981" width="133.8" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="791.56" y="991.5" >DB::QueryPipelin..</text>
</g>
<g >
<title>arena_malloc (10,101,010 samples, 0.52%)</title><rect x="344.5" y="677" width="6.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="347.54" y="687.5" ></text>
</g>
<g >
<title>te_ctx_get (10,101,010 samples, 0.52%)</title><rect x="721.6" y="501" width="6.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="724.65" y="511.5" ></text>
</g>
<g >
<title>rtree_read (10,101,010 samples, 0.52%)</title><rect x="1050.1" y="325" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1053.10" y="335.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;::~pair (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="773" width="6.0" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1138.26" y="783.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="520.9" y="597" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="523.93" y="607.5" ></text>
</g>
<g >
<title>imalloc_no_sample (10,101,010 samples, 0.52%)</title><rect x="302.0" y="693" width="6.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="304.96" y="703.5" ></text>
</g>
<g >
<title>imalloc (20,202,020 samples, 1.03%)</title><rect x="606.1" y="565" width="12.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="609.08" y="575.5" ></text>
</g>
<g >
<title>sz_size2index_lookup (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="597" width="6.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1138.26" y="607.5" ></text>
</g>
<g >
<title>arena_decay (10,101,010 samples, 0.52%)</title><rect x="971.0" y="517" width="6.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="974.03" y="527.5" ></text>
</g>
<g >
<title>std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::~unordered_map[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="466.2" y="805" width="6.1" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="469.19" y="815.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="618.2" y="757" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="621.25" y="767.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__shared_ptr_emplace&lt;DB::SerializationNumber&lt;unsigned long&gt;, std::__1::allocator&lt;DB::SerializationNumber&lt;unsigned long&gt; &gt; &gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="527.0" y="725" width="6.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="530.01" y="735.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt;::allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1031.9" y="373" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1034.86" y="383.5" ></text>
</g>
<g >
<title>Allocator&lt;false, false&gt;::alloc (10,101,010 samples, 0.52%)</title><rect x="587.8" y="661" width="6.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="590.84" y="671.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::map[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="1068.4" y="725" width="18.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1071.35" y="735.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::~VarHolderImpl (30,303,030 samples, 1.55%)</title><rect x="1044.0" y="885" width="18.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1047.02" y="895.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::VarHolderImpl (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="741" width="12.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1010.53" y="751.5" ></text>
</g>
<g >
<title>std::__1::__map_iterator&lt;std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt;::__map_iterator[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1025.8" y="437" width="6.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1028.77" y="447.5" ></text>
</g>
<g >
<title>DB::ISerialization::SubstreamPath::~SubstreamPath (10,101,010 samples, 0.52%)</title><rect x="508.8" y="757" width="6.0" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="511.76" y="767.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::~ColumnVector (10,101,010 samples, 0.52%)</title><rect x="393.2" y="645" width="6.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="396.20" y="655.5" ></text>
</g>
<g >
<title>emap_split_prepare (10,101,010 samples, 0.52%)</title><rect x="302.0" y="421" width="6.0" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="304.96" y="431.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="399.3" y="565" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="402.28" y="575.5" ></text>
</g>
<g >
<title>tcache_alloc_small (10,101,010 samples, 0.52%)</title><rect x="302.0" y="645" width="6.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="304.96" y="655.5" ></text>
</g>
<g >
<title>DB::NamesAndTypesList::~NamesAndTypesList (10,101,010 samples, 0.52%)</title><rect x="758.1" y="725" width="6.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="761.14" y="735.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="1031.9" y="341" width="6.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1034.86" y="351.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::OutputPort, std::__1::allocator&lt;DB::OutputPort&gt; &gt;::clear (10,101,010 samples, 0.52%)</title><rect x="910.2" y="549" width="6.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="913.21" y="559.5" ></text>
</g>
<g >
<title>DB::SerializationInfoByName::operator= (10,101,010 samples, 0.52%)</title><rect x="952.8" y="933" width="6.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="955.78" y="943.5" ></text>
</g>
<g >
<title>ksys_write (10,101,010 samples, 0.52%)</title><rect x="636.5" y="517" width="6.1" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="639.49" y="527.5" ></text>
</g>
<g >
<title>malloc_default (20,202,020 samples, 1.03%)</title><rect x="606.1" y="581" width="12.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="609.08" y="591.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPSB_ (10,101,010 samples, 0.52%)</title><rect x="466.2" y="741" width="6.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="469.19" y="751.5" ></text>
</g>
<g >
<title>std::__1::condition_variable::notify_one (10,101,010 samples, 0.52%)</title><rect x="1177.8" y="1029" width="6.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1180.84" y="1039.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::ColumnVector (10,101,010 samples, 0.52%)</title><rect x="83.0" y="869" width="6.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="85.99" y="879.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="466.2" y="597" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="469.19" y="607.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;DB::ISerialization::Substream&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="977.1" y="805" width="6.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="980.11" y="815.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.52%)</title><rect x="733.8" y="773" width="6.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="736.81" y="783.5" ></text>
</g>
<g >
<title>DB::ColumnDescription::ColumnDescription (10,101,010 samples, 0.52%)</title><rect x="934.5" y="741" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="937.54" y="751.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="83.0" y="757" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="85.99" y="767.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="989.3" y="773" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="992.28" y="783.5" ></text>
</g>
<g >
<title>std::__1::__shared_weak_count::__release_weak (20,202,020 samples, 1.03%)</title><rect x="520.9" y="757" width="12.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="523.93" y="767.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::~VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="677" width="6.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1120.01" y="687.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::OutputPort, std::__1::allocator&lt;DB::OutputPort&gt; &gt;::clear (20,202,020 samples, 1.03%)</title><rect x="806.8" y="549" width="12.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="809.80" y="559.5" ></text>
</g>
<g >
<title>idalloctm (10,101,010 samples, 0.52%)</title><rect x="393.2" y="517" width="6.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="396.20" y="527.5" ></text>
</g>
<g >
<title>emap_edata_lookup_batch (10,101,010 samples, 0.52%)</title><rect x="34.3" y="101" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="37.33" y="111.5" ></text>
</g>
<g >
<title>DB::Port::~Port (10,101,010 samples, 0.52%)</title><rect x="916.3" y="469" width="6.1" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="919.29" y="479.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="508.8" y="597" width="6.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="511.76" y="607.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="332.4" y="421" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="335.37" y="431.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.52%)</title><rect x="289.8" y="933" width="6.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="292.79" y="943.5" ></text>
</g>
<g >
<title>cache_bin_init_ptr_array_for_fill (10,101,010 samples, 0.52%)</title><rect x="612.2" y="437" width="6.0" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="615.16" y="447.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate_at_least[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1007.5" y="437" width="6.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1010.53" y="447.5" ></text>
</g>
<g >
<title>Poco::JSON::Array::~Array (20,202,020 samples, 1.03%)</title><rect x="1050.1" y="661" width="12.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1053.10" y="671.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::compare[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="679.1" y="709" width="12.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="682.07" y="719.5" ></text>
</g>
<g >
<title>DB::Block::~Block (40,404,040 samples, 2.06%)</title><rect x="867.6" y="453" width="24.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="870.63" y="463.5" >D..</text>
</g>
<g >
<title>DB::Block::~Block (50,505,050 samples, 2.58%)</title><rect x="40.4" y="981" width="30.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="43.41" y="991.5" >DB..</text>
</g>
<g >
<title>DB::MergingSortedTransform::~MergingSortedTransform (30,303,030 samples, 1.55%)</title><rect x="892.0" y="629" width="18.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="894.96" y="639.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="677" width="6.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1138.26" y="687.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="618.2" y="725" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="621.25" y="735.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var* std::__1::construct_at[abi:v15000]&lt;Poco::Dynamic::Var, Poco::Dynamic::Var&amp;, Poco::Dynamic::Var*&gt; (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="741" width="6.1" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="1095.68" y="751.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="496.6" y="613" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="499.60" y="623.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="539.2" y="565" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="542.18" y="575.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="143.8" y="741" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="146.81" y="751.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::SerializationSparse, std::__1::allocator&lt;DB::SerializationSparse&gt; &gt;::__get_elem[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="703.4" y="693" width="6.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="706.40" y="703.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="563.5" y="677" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="566.51" y="687.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string (20,202,020 samples, 1.03%)</title><rect x="691.2" y="741" width="12.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="694.24" y="751.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate_at_least[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="563.5" y="725" width="6.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="566.51" y="735.5" ></text>
</g>
<g >
<title>extent_coalesce (10,101,010 samples, 0.52%)</title><rect x="971.0" y="341" width="6.1" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="974.03" y="351.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB9InputPortETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (20,202,020 samples, 1.03%)</title><rect x="892.0" y="501" width="12.1" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="894.96" y="511.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var* std::__1::__uninitialized_allocator_copy[abi:v15000]&lt;std::__1::allocator&lt;Poco::Dynamic::Var&gt;, Poco::Dynamic::Var*, Poco::Dynamic::Var*, Poco::Dynamic::Var*&gt; (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="613" width="12.1" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1028.77" y="623.5" ></text>
</g>
<g >
<title>thread_alloc_event (10,101,010 samples, 0.52%)</title><rect x="460.1" y="581" width="6.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="463.10" y="591.5" ></text>
</g>
<g >
<title>tcache_gc_small (10,101,010 samples, 0.52%)</title><rect x="587.8" y="469" width="6.1" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="590.84" y="479.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="174.2" y="677" width="6.1" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="177.23" y="687.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="261" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1059.19" y="271.5" ></text>
</g>
<g >
<title>arena_ralloc (10,101,010 samples, 0.52%)</title><rect x="344.5" y="709" width="6.1" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="347.54" y="719.5" ></text>
</g>
<g >
<title>std::__1::__shared_ptr_emplace&lt;DB::MergedBlockOutputStream, std::__1::allocator&lt;DB::MergedBlockOutputStream&gt; &gt;::__on_zero_shared (20,202,020 samples, 1.03%)</title><rect x="28.2" y="581" width="12.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="31.25" y="591.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, double&gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="764.2" y="597" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="767.23" y="607.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="1104.8" y="437" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1107.85" y="447.5" ></text>
</g>
<g >
<title>arena_malloc (10,101,010 samples, 0.52%)</title><rect x="612.2" y="501" width="6.0" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="615.16" y="511.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;* std::__1::construct_at[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt;*&gt; (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="821" width="12.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1101.76" y="831.5" ></text>
</g>
<g >
<title>DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::~PODArrayBase (10,101,010 samples, 0.52%)</title><rect x="819.0" y="421" width="6.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="821.97" y="431.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="861.5" y="261" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="864.55" y="271.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="565" width="6.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1120.01" y="575.5" ></text>
</g>
<g >
<title>tcache_gc_event_wait_get (10,101,010 samples, 0.52%)</title><rect x="624.3" y="453" width="6.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="627.33" y="463.5" ></text>
</g>
<g >
<title>DB::IDataType::getSparseSerialization (10,101,010 samples, 0.52%)</title><rect x="703.4" y="741" width="6.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="706.40" y="751.5" ></text>
</g>
<g >
<title>std::__1::__unwrap_range_impl&lt;char const*, char const*&gt;::__unwrap[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1153.5" y="597" width="6.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1156.51" y="607.5" ></text>
</g>
<g >
<title>Poco::JSON::Object::set (10,101,010 samples, 0.52%)</title><rect x="1001.4" y="901" width="6.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1004.44" y="911.5" ></text>
</g>
<g >
<title>te_assert_invariants_impl (10,101,010 samples, 0.52%)</title><rect x="812.9" y="181" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="815.89" y="191.5" ></text>
</g>
<g >
<title>DB::ISerialization::deserializeBinaryBulkWithMultipleStreams (30,303,030 samples, 1.55%)</title><rect x="660.8" y="789" width="18.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="663.82" y="799.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="527.0" y="661" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="530.01" y="671.5" ></text>
</g>
<g >
<title>std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::~__hash_table (10,101,010 samples, 0.52%)</title><rect x="904.1" y="549" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="907.12" y="559.5" ></text>
</g>
<g >
<title>Poco::SharedPtr&lt;Poco::Dynamic::Struct&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, Poco::ReferenceCounter, Poco::ReleasePolicy&lt;Poco::Dynamic::Struct&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::release (10,101,010 samples, 0.52%)</title><rect x="1050.1" y="453" width="6.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1053.10" y="463.5" ></text>
</g>
<g >
<title>tcache_dalloc_small (10,101,010 samples, 0.52%)</title><rect x="326.3" y="421" width="6.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="329.29" y="431.5" ></text>
</g>
<g >
<title>std::__1::__shared_weak_count::__release_shared[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="782.5" y="485" width="6.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="785.47" y="495.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="539.2" y="661" width="6.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="542.18" y="671.5" ></text>
</g>
<g >
<title>libunwind::CFI_Parser&lt;libunwind::LocalAddressSpace&gt;::decodeFDE (10,101,010 samples, 0.52%)</title><rect x="1183.9" y="1493" width="6.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1186.92" y="1503.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="898.0" y="293" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="901.04" y="303.5" ></text>
</g>
<g >
<title>inallocx (10,101,010 samples, 0.52%)</title><rect x="697.3" y="581" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="700.32" y="591.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="417.5" y="757" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="420.53" y="767.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::destroy (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="885" width="6.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1174.75" y="895.5" ></text>
</g>
<g >
<title>lg_floor (10,101,010 samples, 0.52%)</title><rect x="466.2" y="517" width="6.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="469.19" y="527.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="259.4" y="789" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="262.38" y="799.5" ></text>
</g>
<g >
<title>DB::Block::insert (10,101,010 samples, 0.52%)</title><rect x="76.9" y="917" width="6.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="79.91" y="927.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::insertFrom (70,707,070 samples, 3.61%)</title><rect x="350.6" y="837" width="42.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="353.62" y="847.5" >DB::..</text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::~ColumnVector (10,101,010 samples, 0.52%)</title><rect x="308.0" y="693" width="6.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="311.04" y="703.5" ></text>
</g>
<g >
<title>Poco::JSON::Object::Object (20,202,020 samples, 1.03%)</title><rect x="1025.8" y="501" width="12.1" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1028.77" y="511.5" ></text>
</g>
<g >
<title>boost::multi_index::multi_index_container&lt;DB::ColumnDescription, boost::multi_index::indexed_by&lt;boost::multi_index::sequenced&lt;boost::multi_index::tag&lt;mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt; &gt;, boost::multi_index::ordered_unique&lt;boost::multi_index::member&lt;DB::ColumnDescription, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, &amp;DB::ColumnDescription::name&gt;, mpl_::na, mpl_::na&gt;, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt;, std::__1::allocator&lt;DB::ColumnDescription&gt; &gt;::construct_value (10,101,010 samples, 0.52%)</title><rect x="934.5" y="789" width="6.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="937.54" y="799.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (20,202,020 samples, 1.03%)</title><rect x="739.9" y="725" width="12.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="742.90" y="735.5" ></text>
</g>
<g >
<title>arena_dalloc_large (10,101,010 samples, 0.52%)</title><rect x="52.6" y="773" width="6.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="55.58" y="783.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="131.6" y="805" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="134.65" y="815.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="593.9" y="597" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="596.92" y="607.5" ></text>
</g>
<g >
<title>DB::IMergingAlgorithm::Status::~Status (10,101,010 samples, 0.52%)</title><rect x="308.0" y="869" width="6.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="311.04" y="879.5" ></text>
</g>
<g >
<title>arena_dalloc_bin_locked_handle_newly_nonempty (10,101,010 samples, 0.52%)</title><rect x="338.5" y="405" width="6.0" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="341.45" y="415.5" ></text>
</g>
<g >
<title>std::__1::__shared_weak_count::__release_shared[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="520.9" y="773" width="12.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="523.93" y="783.5" ></text>
</g>
<g >
<title>DB::ISerialization::SubstreamPath::~SubstreamPath (10,101,010 samples, 0.52%)</title><rect x="940.6" y="901" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="943.62" y="911.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::MergeTask::GlobalRuntimeContext&gt; &gt;::destroy[abi:v15000]&lt;DB::MergeTask::GlobalRuntimeContext, void, void&gt; (30,303,030 samples, 1.55%)</title><rect x="22.2" y="693" width="18.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="25.16" y="703.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="83.0" y="709" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="85.99" y="719.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__clear[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="58.7" y="949" width="12.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="61.66" y="959.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="916.3" y="325" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="919.29" y="335.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="545.3" y="565" width="6.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="548.26" y="575.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="794.6" y="149" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="797.64" y="159.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="648.7" y="677" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="651.66" y="687.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;::~immutable_ptr (30,303,030 samples, 1.55%)</title><rect x="819.0" y="517" width="18.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="821.97" y="527.5" ></text>
</g>
<g >
<title>decltype  (20,202,020 samples, 1.03%)</title><rect x="10.0" y="1237" width="12.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="13.00" y="1247.5" ></text>
</g>
<g >
<title>_ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4Poco7Dynamic3VarEEC2B6v15000ILb1ETnPNS_9enable_ifIXclsr13_CheckArgsDepIXT_EEE17__enable_implicitIRS7_RKSA_EEEvE4typeELPv0EEESE_SG_ (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="901" width="6.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1095.68" y="911.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Object&gt;::VarHolderImpl (30,303,030 samples, 1.55%)</title><rect x="1019.7" y="901" width="18.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1022.69" y="911.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init_copy_ctor_external (20,202,020 samples, 1.03%)</title><rect x="691.2" y="725" width="12.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="694.24" y="735.5" ></text>
</g>
<g >
<title>sz_size2index_compute (10,101,010 samples, 0.52%)</title><rect x="308.0" y="581" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="311.04" y="591.5" ></text>
</g>
<g >
<title>arena_cache_bin_fill_small (20,202,020 samples, 1.03%)</title><rect x="368.9" y="629" width="12.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="371.87" y="639.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::shared_ptr&lt;DB::SerializationInfo&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, std::__1::shared_ptr&lt;DB::SerializationInfo&gt; &gt; &gt; &gt;::find[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="271.5" y="933" width="6.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="274.55" y="943.5" ></text>
</g>
<g >
<title>DB::MergeTreeDataPartWriterCompact::writeDataBlock (30,303,030 samples, 1.55%)</title><rect x="977.1" y="901" width="18.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="980.11" y="911.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::realloc&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="593.9" y="693" width="6.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="596.92" y="703.5" ></text>
</g>
<g >
<title>te_next_event_compute (10,101,010 samples, 0.52%)</title><rect x="22.2" y="341" width="6.0" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="25.16" y="351.5" ></text>
</g>
<g >
<title>arena_cache_bin_fill_small (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="645" width="6.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1168.67" y="655.5" ></text>
</g>
<g >
<title>tsd_thread_allocated_next_eventp_get (10,101,010 samples, 0.52%)</title><rect x="460.1" y="501" width="6.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="463.10" y="511.5" ></text>
</g>
<g >
<title>boost::multi_index::detail::sequenced_index&lt;boost::multi_index::detail::nth_layer&lt;1, DB::ColumnDescription, boost::multi_index::indexed_by&lt;boost::multi_index::sequenced&lt;boost::multi_index::tag&lt;mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt; &gt;, boost::multi_index::ordered_unique&lt;boost::multi_index::member&lt;DB::ColumnDescription, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, &amp;DB::ColumnDescription::name&gt;, mpl_::na, mpl_::na&gt;, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt;, std::__1::allocator&lt;DB::ColumnDescription&gt; &gt;, boost::mpl::vector0&lt;mpl_::na&gt; &gt;::insert (10,101,010 samples, 0.52%)</title><rect x="934.5" y="901" width="6.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="937.54" y="911.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="733.8" y="629" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="736.81" y="639.5" ></text>
</g>
<g >
<title>maybe_check_alloc_ctx (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="421" width="6.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1065.27" y="431.5" ></text>
</g>
<g >
<title>extent_try_coalesce (10,101,010 samples, 0.52%)</title><rect x="971.0" y="373" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="974.03" y="383.5" ></text>
</g>
<g >
<title>sz_size2index_lookup (10,101,010 samples, 0.52%)</title><rect x="308.0" y="597" width="6.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="311.04" y="607.5" ></text>
</g>
<g >
<title>DB::MergeTreeReaderCompactSingleBuffer::~MergeTreeReaderCompactSingleBuffer (50,505,050 samples, 2.58%)</title><rect x="758.1" y="789" width="30.5" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="761.14" y="799.5" >DB..</text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="916.3" y="245" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="919.29" y="255.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt;::deallocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="40.4" y="901" width="12.2" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="43.41" y="911.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 1.03%)</title><rect x="715.6" y="613" width="12.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="718.57" y="623.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;boost::multi_index::detail::sequenced_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;DB::ColumnDescription, std::__1::allocator&lt;DB::ColumnDescription&gt; &gt; &gt; &gt;*, bool&gt; boost::multi_index::multi_index_container&lt;DB::ColumnDescription, boost::multi_index::indexed_by&lt;boost::multi_index::sequenced&lt;boost::multi_index::tag&lt;mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt; &gt;, boost::multi_index::ordered_unique&lt;boost::multi_index::member&lt;DB::ColumnDescription, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, &amp;DB::ColumnDescription::name&gt;, mpl_::na, mpl_::na&gt;, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt;, std::__1::allocator&lt;DB::ColumnDescription&gt; &gt;::insert_&lt;boost::multi_index::detail::rvalue_tag&gt; (10,101,010 samples, 0.52%)</title><rect x="934.5" y="853" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="937.54" y="863.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Array&gt;::VarHolderImpl (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="901" width="12.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1010.53" y="911.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB10OutputPortETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="910.2" y="501" width="6.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="913.21" y="511.5" ></text>
</g>
<g >
<title>DB::NameAndTypePair::NameAndTypePair (10,101,010 samples, 0.52%)</title><rect x="563.5" y="805" width="6.1" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="566.51" y="815.5" ></text>
</g>
<g >
<title>imalloc_body (20,202,020 samples, 1.03%)</title><rect x="606.1" y="549" width="12.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="609.08" y="559.5" ></text>
</g>
<g >
<title>imalloc_no_sample (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="725" width="6.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1168.67" y="735.5" ></text>
</g>
<g >
<title>DB::MergedData::hasEnoughRows (10,101,010 samples, 0.52%)</title><rect x="314.1" y="677" width="6.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="317.12" y="687.5" ></text>
</g>
<g >
<title>std::__1::__split_buffer&lt;DB::ISerialization::Substream, std::__1::allocator&lt;DB::ISerialization::Substream&gt;&amp;&gt;::__alloc[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="666.9" y="725" width="6.1" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="669.91" y="735.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="302.0" y="757" width="6.0" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="304.96" y="767.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;::__base_destruct_at_end[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="819.0" y="581" width="18.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="821.97" y="591.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="557.4" y="645" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="560.42" y="655.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string (20,202,020 samples, 1.03%)</title><rect x="551.3" y="757" width="12.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="554.34" y="767.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;char&gt;::allocate_at_least[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="551.3" y="693" width="12.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="554.34" y="703.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::clear (10,101,010 samples, 0.52%)</title><rect x="22.2" y="581" width="6.0" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="25.16" y="591.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="466.2" y="629" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="469.19" y="639.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="892.0" y="341" width="6.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="894.96" y="351.5" ></text>
</g>
<g >
<title>std::__1::basic_streambuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.52%)</title><rect x="1153.5" y="693" width="6.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1156.51" y="703.5" ></text>
</g>
<g >
<title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::realloc&lt;&gt; (70,707,070 samples, 3.61%)</title><rect x="350.6" y="789" width="42.6" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="353.62" y="799.5" >void..</text>
</g>
<g >
<title>imalloc_no_sample (10,101,010 samples, 0.52%)</title><rect x="612.2" y="533" width="6.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="615.16" y="543.5" ></text>
</g>
<g >
<title>std::__1::__split_buffer&lt;DB::ISerialization::Substream, std::__1::allocator&lt;DB::ISerialization::Substream&gt;&amp;&gt;::__split_buffer (10,101,010 samples, 0.52%)</title><rect x="514.8" y="725" width="6.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="517.85" y="735.5" ></text>
</g>
<g >
<title>DB::IMergedBlockOutputStream::~IMergedBlockOutputStream (10,101,010 samples, 0.52%)</title><rect x="28.2" y="501" width="6.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="31.25" y="511.5" ></text>
</g>
<g >
<title>arena_salloc (10,101,010 samples, 0.52%)</title><rect x="1147.4" y="357" width="6.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1150.42" y="367.5" ></text>
</g>
<g >
<title>std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::~unordered_map[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="28.2" y="389" width="6.1" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="31.25" y="399.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::OutputPort, std::__1::allocator&lt;DB::OutputPort&gt; &gt;::~list (40,404,040 samples, 2.06%)</title><rect x="867.6" y="581" width="24.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="870.63" y="591.5" >s..</text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB25MergeTreeSequentialSourceETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (40,404,040 samples, 2.06%)</title><rect x="867.6" y="645" width="24.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="870.63" y="655.5" >_..</text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="910.2" y="149" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="913.21" y="159.5" ></text>
</g>
<g >
<title>free_fastpath_nonfast_aligned (10,101,010 samples, 0.52%)</title><rect x="758.1" y="453" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="761.14" y="463.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::OutputPort, std::__1::allocator&lt;DB::OutputPort&gt; &gt;::~__list_imp (20,202,020 samples, 1.03%)</title><rect x="806.8" y="565" width="12.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="809.80" y="575.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="660.8" y="597" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="663.82" y="607.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="867.6" y="389" width="6.1" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="870.63" y="399.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB10OutputPortETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (30,303,030 samples, 1.55%)</title><rect x="849.4" y="501" width="18.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="852.38" y="511.5" ></text>
</g>
<g >
<title>te_ctx_get (10,101,010 samples, 0.52%)</title><rect x="831.1" y="261" width="6.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="834.13" y="271.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB9MergeTaskETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (30,303,030 samples, 1.55%)</title><rect x="22.2" y="805" width="18.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="25.16" y="815.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="131.6" y="725" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="134.65" y="735.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB15NameAndTypePairETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="496.6" y="741" width="6.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="499.60" y="751.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::~Var (10,101,010 samples, 0.52%)</title><rect x="1037.9" y="741" width="6.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1040.94" y="751.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="289.8" y="757" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="292.79" y="767.5" ></text>
</g>
<g >
<title>DB::Block::mutateColumns (30,303,030 samples, 1.55%)</title><rect x="83.0" y="933" width="18.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="85.99" y="943.5" ></text>
</g>
<g >
<title>DB::ISerialization::getFileNameForStream (10,101,010 samples, 0.52%)</title><rect x="168.1" y="741" width="6.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="171.14" y="751.5" ></text>
</g>
<g >
<title>[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="235.1" y="885" width="6.0" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="238.05" y="895.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::__tree_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__emplace_hint_unique_key_args&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; const&amp;&gt; (10,101,010 samples, 0.52%)</title><rect x="1031.9" y="421" width="6.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1034.86" y="431.5" ></text>
</g>
<g >
<title>void std::__1::__function::__policy::__large_destroy&lt;std::__1::__function::__default_alloc_func&lt;DB::MergeTreeDataPartWriterCompact::writeDataBlock (10,101,010 samples, 0.52%)</title><rect x="143.8" y="837" width="6.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="146.81" y="847.5" ></text>
</g>
<g >
<title>std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;*, long&gt; &gt;::operator++[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1068.4" y="693" width="6.0" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="1071.35" y="703.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__list_node&lt;DB::InputPort, void*&gt; &gt; &gt;::destroy[abi:v15000]&lt;DB::InputPort, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="892.0" y="517" width="12.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="894.96" y="527.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="64.7" y="789" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="67.74" y="799.5" ></text>
</g>
<g >
<title>DB::NameAndTypePair::~NameAndTypePair (10,101,010 samples, 0.52%)</title><rect x="34.3" y="389" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="37.33" y="399.5" ></text>
</g>
<g >
<title>DB::MergeTreeDataPartWriterCompact::writeDataBlockPrimaryIndexAndSkipIndices (30,303,030 samples, 1.55%)</title><rect x="977.1" y="917" width="18.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="980.11" y="927.5" ></text>
</g>
<g >
<title>isfree (10,101,010 samples, 0.52%)</title><rect x="946.7" y="757" width="6.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="949.70" y="767.5" ></text>
</g>
<g >
<title>DB::Chunk::~Chunk (10,101,010 samples, 0.52%)</title><rect x="308.0" y="853" width="6.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="311.04" y="863.5" ></text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="332.4" y="453" width="6.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="335.37" y="463.5" ></text>
</g>
<g >
<title>std::__1::unique_ptr&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt;, std::__1::__tree_node_destructor&lt;std::__1::allocator&lt;std::__1::__tree_node&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, void*&gt; &gt; &gt; &gt; std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::__construct_node&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; const&amp;&gt; (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="565" width="6.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1095.68" y="575.5" ></text>
</g>
<g >
<title>isdalloct (10,101,010 samples, 0.52%)</title><rect x="34.3" y="213" width="6.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="37.33" y="223.5" ></text>
</g>
<g >
<title>sz_size2index_lookup (10,101,010 samples, 0.52%)</title><rect x="466.2" y="549" width="6.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="469.19" y="559.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::OutputPort, std::__1::allocator&lt;DB::OutputPort&gt; &gt;::~list (10,101,010 samples, 0.52%)</title><rect x="910.2" y="581" width="6.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="913.21" y="591.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="131.6" y="629" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="134.65" y="639.5" ></text>
</g>
<g >
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.52%)</title><rect x="618.2" y="773" width="6.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="621.25" y="783.5" ></text>
</g>
<g >
<title>std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="812.9" y="373" width="6.1" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="815.89" y="383.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="399.3" y="613" width="6.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="402.28" y="623.5" ></text>
</g>
<g >
<title>tcache_bin_flush_bottom (10,101,010 samples, 0.52%)</title><rect x="971.0" y="565" width="6.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="974.03" y="575.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="946.7" y="805" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="949.70" y="815.5" ></text>
</g>
<g >
<title>DB::SerializationInfo::toJSON (20,202,020 samples, 1.03%)</title><rect x="995.4" y="917" width="12.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="998.36" y="927.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 1.03%)</title><rect x="606.1" y="613" width="12.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="609.08" y="623.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="629" width="6.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1174.75" y="639.5" ></text>
</g>
<g >
<title>Poco::Dynamic::Var::destruct (10,101,010 samples, 0.52%)</title><rect x="1086.6" y="789" width="6.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1089.60" y="799.5" ></text>
</g>
<g >
<title>void Poco::JSON::Object::doStringify&lt;std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt; &gt; (20,202,020 samples, 1.03%)</title><rect x="1153.5" y="805" width="12.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1156.51" y="815.5" ></text>
</g>
<g >
<title>MergeMutate (1,939,393,920 samples, 98.97%)</title><rect x="22.2" y="1509" width="1167.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="25.16" y="1519.5" >MergeMutate</text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::PullingOutputFormat&gt; &gt;::destroy[abi:v15000]&lt;DB::PullingOutputFormat, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="916.3" y="677" width="6.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="919.29" y="687.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="861.5" y="309" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="864.55" y="319.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="277.6" y="645" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="280.63" y="655.5" ></text>
</g>
<g >
<title>tsd_state_get (10,101,010 samples, 0.52%)</title><rect x="1074.4" y="373" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1077.43" y="383.5" ></text>
</g>
<g >
<title>std::__1::__tree&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::__map_value_compare&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var&gt; &gt; &gt;::~__tree (30,303,030 samples, 1.55%)</title><rect x="1135.3" y="885" width="18.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1138.26" y="895.5" ></text>
</g>
<g >
<title>edata_heap_insert (10,101,010 samples, 0.52%)</title><rect x="338.5" y="357" width="6.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="341.45" y="367.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="70.8" y="773" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="73.82" y="783.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="788.6" y="181" width="6.0" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="791.56" y="191.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (20,202,020 samples, 1.03%)</title><rect x="484.4" y="709" width="12.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="487.43" y="719.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="1031.9" y="325" width="6.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1034.86" y="335.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="338.5" y="549" width="6.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="341.45" y="559.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="892.0" y="309" width="6.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="894.96" y="319.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="898.0" y="261" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="901.04" y="271.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="83.0" y="741" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="85.99" y="751.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="971.0" y="661" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="974.03" y="671.5" ></text>
</g>
<g >
<title>tcache_get_from_ind (10,101,010 samples, 0.52%)</title><rect x="28.2" y="133" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="31.25" y="143.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt; &gt; &gt;::construct[abi:v15000]&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, unsigned long, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="277.6" y="869" width="12.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="280.63" y="879.5" ></text>
</g>
<g >
<title>tcache_salloc (10,101,010 samples, 0.52%)</title><rect x="496.6" y="485" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="499.60" y="495.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="247.2" y="805" width="12.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="250.22" y="815.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;::~immutable_ptr (10,101,010 samples, 0.52%)</title><rect x="399.3" y="693" width="6.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="402.28" y="703.5" ></text>
</g>
<g >
<title>sdallocx (10,101,010 samples, 0.52%)</title><rect x="855.5" y="213" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="858.46" y="223.5" ></text>
</g>
<g >
<title>void std::__1::__libcpp_operator_delete[abi:v15000]&lt;void*, unsigned long&gt; (10,101,010 samples, 0.52%)</title><rect x="168.1" y="581" width="6.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="171.14" y="591.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;::~VarHolderImpl (10,101,010 samples, 0.52%)</title><rect x="1123.1" y="837" width="6.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1126.09" y="847.5" ></text>
</g>
<g >
<title>rtree_leaf_elm_read (10,101,010 samples, 0.52%)</title><rect x="119.5" y="677" width="6.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="122.48" y="687.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="563.5" y="741" width="6.1" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="566.51" y="751.5" ></text>
</g>
<g >
<title>auto std::__1::__allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="660.8" y="725" width="6.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="663.82" y="735.5" ></text>
</g>
<g >
<title>unsigned long std::__1::__do_string_hash[abi:v15000]&lt;char const*&gt; (10,101,010 samples, 0.52%)</title><rect x="533.1" y="741" width="6.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="536.09" y="751.5" ></text>
</g>
<g >
<title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;::~immutable_ptr (10,101,010 samples, 0.52%)</title><rect x="308.0" y="741" width="6.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="311.04" y="751.5" ></text>
</g>
<g >
<title>emap_edata_lookup (10,101,010 samples, 0.52%)</title><rect x="873.7" y="133" width="6.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="876.71" y="143.5" ></text>
</g>
<g >
<title>te_next_event_compute (10,101,010 samples, 0.52%)</title><rect x="624.3" y="469" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="627.33" y="479.5" ></text>
</g>
<g >
<title>malloc_default (10,101,010 samples, 0.52%)</title><rect x="295.9" y="789" width="6.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="298.88" y="799.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.52%)</title><rect x="624.3" y="629" width="6.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="627.33" y="639.5" ></text>
</g>
<g >
<title>DB::ColumnVector&lt;unsigned long&gt;::~ColumnVector (10,101,010 samples, 0.52%)</title><rect x="393.2" y="661" width="6.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="396.20" y="671.5" ></text>
</g>
<g >
<title>sallocx (10,101,010 samples, 0.52%)</title><rect x="849.4" y="293" width="6.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="852.38" y="303.5" ></text>
</g>
<g >
<title>void std::__1::__do_deallocate_handle_size[abi:v15000]&lt;&gt; (10,101,010 samples, 0.52%)</title><rect x="892.0" y="325" width="6.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="894.96" y="335.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB21ColumnWithTypeAndNameETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS4_ (10,101,010 samples, 0.52%)</title><rect x="545.3" y="741" width="6.0" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="548.26" y="751.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1171.8" y="709" width="6.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1174.75" y="719.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_6vectorINS_10shared_ptrIN2DB10IProcessorEEENS_9allocatorIS5_EEEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPSA_ (222,222,220 samples, 11.34%)</title><rect x="788.6" y="853" width="133.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="791.56" y="863.5" >_ZNSt3__112__des..</text>
</g>
<g >
<title>boost::intrusive_ptr&lt;DB::IColumn const&gt;::~intrusive_ptr (10,101,010 samples, 0.52%)</title><rect x="441.9" y="725" width="6.0" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="444.86" y="735.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::__base_destruct_at_end[abi:v15000] (20,202,020 samples, 1.03%)</title><rect x="58.7" y="933" width="12.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="61.66" y="943.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000IN2DB10OutputPortETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPS4_ (40,404,040 samples, 2.06%)</title><rect x="867.6" y="501" width="24.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="870.63" y="511.5" >_..</text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;::destroy[abi:v15000]&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, void, void&gt; (10,101,010 samples, 0.52%)</title><rect x="308.0" y="789" width="6.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="311.04" y="799.5" ></text>
</g>
<g >
<title>tsd_fetch_impl (10,101,010 samples, 0.52%)</title><rect x="283.7" y="645" width="6.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="286.71" y="655.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="673.0" y="693" width="6.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="675.99" y="703.5" ></text>
</g>
<g >
<title>imalloc_fastpath (10,101,010 samples, 0.52%)</title><rect x="1092.7" y="453" width="6.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1095.68" y="463.5" ></text>
</g>
<g >
<title>decltype  (30,303,030 samples, 1.55%)</title><rect x="22.2" y="933" width="18.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="25.16" y="943.5" ></text>
</g>
<g >
<title>std::__1::function&lt;DB::WriteBuffer*  (10,101,010 samples, 0.52%)</title><rect x="989.3" y="885" width="6.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="992.28" y="895.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="563.5" y="661" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="566.51" y="671.5" ></text>
</g>
<g >
<title>std::__1::list&lt;DB::NameAndTypePair, std::__1::allocator&lt;DB::NameAndTypePair&gt; &gt;::~list (10,101,010 samples, 0.52%)</title><rect x="758.1" y="709" width="6.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="761.14" y="719.5" ></text>
</g>
<g >
<title>tcache_alloc_small (20,202,020 samples, 1.03%)</title><rect x="368.9" y="661" width="12.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="371.87" y="671.5" ></text>
</g>
<g >
<title>tsd_tcache_gc_event_wait_get (10,101,010 samples, 0.52%)</title><rect x="624.3" y="437" width="6.1" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="627.33" y="447.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="898.0" y="117" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="901.04" y="127.5" ></text>
</g>
<g >
<title>extent_coalesce (10,101,010 samples, 0.52%)</title><rect x="326.3" y="165" width="6.1" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="329.29" y="175.5" ></text>
</g>
<g >
<title>peak_alloc_event_wait_get (10,101,010 samples, 0.52%)</title><rect x="332.4" y="357" width="6.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="335.37" y="367.5" ></text>
</g>
<g >
<title>std::__1::__function::__policy_func&lt;void  (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1173" width="1161.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="25.16" y="1183.5" >std::__1::__function::__policy_func&lt;void </text>
</g>
<g >
<title>thread_dalloc_event (10,101,010 samples, 0.52%)</title><rect x="508.8" y="581" width="6.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="511.76" y="591.5" ></text>
</g>
<g >
<title>witness_tsdn_null (10,101,010 samples, 0.52%)</title><rect x="825.1" y="293" width="6.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="828.05" y="303.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4Poco7Dynamic3VarEEETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPSE_ (10,101,010 samples, 0.52%)</title><rect x="1062.3" y="581" width="6.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1065.27" y="591.5" ></text>
</g>
<g >
<title>ecache_alloc (10,101,010 samples, 0.52%)</title><rect x="374.9" y="533" width="6.1" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="377.95" y="543.5" ></text>
</g>
<g >
<title>decltype  (50,505,050 samples, 2.58%)</title><rect x="314.1" y="757" width="30.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="317.12" y="767.5" >de..</text>
</g>
<g >
<title>do_rallocx (10,101,010 samples, 0.52%)</title><rect x="344.5" y="741" width="6.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="347.54" y="751.5" ></text>
</g>
<g >
<title>DB::MergeTreeBackgroundExecutor&lt;DB::DynamicRuntimeQueue&gt;::threadFunction (1,929,292,910 samples, 98.45%)</title><rect x="22.2" y="1077" width="1161.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="25.16" y="1087.5" >DB::MergeTreeBackgroundExecutor&lt;DB::DynamicRuntimeQueue&gt;::threadFunction</text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="1074.4" y="501" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1077.43" y="511.5" ></text>
</g>
<g >
<title>std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, Poco::Dynamic::Var, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, Poco::Dynamic::Var&gt; &gt; &gt;::~map[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="469" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1059.19" y="479.5" ></text>
</g>
<g >
<title>ecache_evict (10,101,010 samples, 0.52%)</title><rect x="971.0" y="405" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="974.03" y="415.5" ></text>
</g>
<g >
<title>tsdn_tsd (10,101,010 samples, 0.52%)</title><rect x="326.3" y="85" width="6.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="329.29" y="95.5" ></text>
</g>
<g >
<title>std::__1::__shared_count::__release_shared[abi:v15000] (30,303,030 samples, 1.55%)</title><rect x="22.2" y="725" width="18.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="25.16" y="735.5" ></text>
</g>
<g >
<title>DB::Block::~Block (20,202,020 samples, 1.03%)</title><rect x="539.2" y="821" width="12.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="542.18" y="831.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="1013.6" y="373" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1016.61" y="383.5" ></text>
</g>
<g >
<title>te_assert_invariants (10,101,010 samples, 0.52%)</title><rect x="624.3" y="517" width="6.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="627.33" y="527.5" ></text>
</g>
<g >
<title>check_entry_exit_locking (10,101,010 samples, 0.52%)</title><rect x="417.5" y="661" width="6.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="420.53" y="671.5" ></text>
</g>
<g >
<title>tsd_witness_tsdp_get_unsafe (10,101,010 samples, 0.52%)</title><rect x="928.5" y="677" width="6.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="931.45" y="687.5" ></text>
</g>
<g >
<title>arena_sdalloc (10,101,010 samples, 0.52%)</title><rect x="1117.0" y="405" width="6.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1120.01" y="415.5" ></text>
</g>
<g >
<title>imalloc (10,101,010 samples, 0.52%)</title><rect x="247.2" y="709" width="6.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="250.22" y="719.5" ></text>
</g>
<g >
<title>isdalloct (10,101,010 samples, 0.52%)</title><rect x="1135.3" y="645" width="6.0" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1138.26" y="655.5" ></text>
</g>
<g >
<title>_ZNSt3__110destroy_atB6v15000IN2DB9MergeTask20GlobalRuntimeContextETnNS_9enable_ifIXnt10is_array_vIT_EEiE4typeELi0EEEvPS5_ (30,303,030 samples, 1.55%)</title><rect x="22.2" y="677" width="18.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="25.16" y="687.5" ></text>
</g>
<g >
<title>std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, unsigned long&gt;::~pair (10,101,010 samples, 0.52%)</title><rect x="539.2" y="709" width="6.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="542.18" y="719.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.52%)</title><rect x="733.8" y="645" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="736.81" y="655.5" ></text>
</g>
<g >
<title>DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 63ul, 64ul&gt;::dealloc (10,101,010 samples, 0.52%)</title><rect x="393.2" y="597" width="6.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="396.20" y="607.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="417.5" y="677" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="420.53" y="687.5" ></text>
</g>
<g >
<title>std::__1::__list_imp&lt;DB::InputPort, std::__1::allocator&lt;DB::InputPort&gt; &gt;::~__list_imp (20,202,020 samples, 1.03%)</title><rect x="837.2" y="565" width="12.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="840.22" y="575.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="642.6" y="693" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="645.58" y="703.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_allocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="563.5" y="693" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="566.51" y="703.5" ></text>
</g>
<g >
<title>std::__1::allocator_traits&lt;std::__1::allocator&lt;char&gt; &gt;::deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="910.2" y="309" width="6.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="913.21" y="319.5" ></text>
</g>
<g >
<title>tcache_salloc (10,101,010 samples, 0.52%)</title><rect x="46.5" y="725" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="49.49" y="735.5" ></text>
</g>
<g >
<title>nallocx (10,101,010 samples, 0.52%)</title><rect x="411.4" y="741" width="6.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="414.44" y="751.5" ></text>
</g>
<g >
<title>void* std::__1::__libcpp_operator_new[abi:v15000]&lt;unsigned long&gt; (20,202,020 samples, 1.03%)</title><rect x="454.0" y="693" width="12.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="457.02" y="703.5" ></text>
</g>
<g >
<title>Poco::Dynamic::VarHolderImpl&lt;Poco::JSON::Array&gt;::VarHolderImpl (20,202,020 samples, 1.03%)</title><rect x="1098.8" y="741" width="12.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1101.76" y="751.5" ></text>
</g>
<g >
<title>aligned_usize_get (10,101,010 samples, 0.52%)</title><rect x="1159.6" y="613" width="6.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1162.59" y="623.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.52%)</title><rect x="916.3" y="229" width="6.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="919.29" y="239.5" ></text>
</g>
<g >
<title>sdallocx_default (10,101,010 samples, 0.52%)</title><rect x="812.9" y="277" width="6.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="815.89" y="287.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="131.6" y="597" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="134.65" y="607.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 1.03%)</title><rect x="247.2" y="773" width="12.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="250.22" y="783.5" ></text>
</g>
<g >
<title>te_assert_invariants_debug (10,101,010 samples, 0.52%)</title><rect x="1056.2" y="197" width="6.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1059.19" y="207.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ISerialization::Substream, std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt;::~vector[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="508.8" y="741" width="6.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="511.76" y="751.5" ></text>
</g>
<g >
<title>_ZNSt3__112__destroy_atB6v15000INS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEETnNS_9enable_ifIXntsr8is_arrayIT_EE5valueEiE4typeELi0EEEvPSB_ (10,101,010 samples, 0.52%)</title><rect x="873.7" y="357" width="6.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="876.71" y="367.5" ></text>
</g>
<g >
<title>do_rallocx (10,101,010 samples, 0.52%)</title><rect x="435.8" y="677" width="6.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="438.77" y="687.5" ></text>
</g>
<g >
<title>std::__1::allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt;::pointer&gt; std::__1::allocate_at_least[abi:v15000]&lt;std::__1::allocator&lt;DB::ISerialization::Substream&gt; &gt; (10,101,010 samples, 0.52%)</title><rect x="514.8" y="693" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="517.85" y="703.5" ></text>
</g>
<g >
<title>DB::NameAndTypePair* std::__1::construct_at[abi:v15000]&lt;DB::NameAndTypePair, DB::NameAndTypePair const&amp;, DB::NameAndTypePair*&gt; (20,202,020 samples, 1.03%)</title><rect x="472.3" y="741" width="12.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="475.27" y="751.5" ></text>
</g>
<g >
<title>void std::__1::allocator_traits&lt;std::__1::allocator&lt;Poco::Dynamic::Var&gt; &gt;::construct[abi:v15000]&lt;Poco::Dynamic::Var, Poco::Dynamic::Var&amp;, void, void&gt; (20,202,020 samples, 1.03%)</title><rect x="1007.5" y="821" width="12.2" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1010.53" y="831.5" ></text>
</g>
<g >
<title>te_ctx_get (10,101,010 samples, 0.52%)</title><rect x="460.1" y="517" width="6.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="463.10" y="527.5" ></text>
</g>
<g >
<title>imalloc_body (10,101,010 samples, 0.52%)</title><rect x="1165.7" y="741" width="6.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1168.67" y="751.5" ></text>
</g>
<g >
<title>te_event_advance (10,101,010 samples, 0.52%)</title><rect x="721.6" y="517" width="6.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="724.65" y="527.5" ></text>
</g>
<g >
<title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::~vector[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="971.0" y="901" width="6.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="974.03" y="911.5" ></text>
</g>
<g >
<title>sz_size2index (10,101,010 samples, 0.52%)</title><rect x="308.0" y="613" width="6.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="311.04" y="623.5" ></text>
</g>
<g >
<title>arena_vsalloc (10,101,010 samples, 0.52%)</title><rect x="849.4" y="261" width="6.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="852.38" y="271.5" ></text>
</g>
<g >
<title>std::__1::__libcpp_deallocate[abi:v15000] (10,101,010 samples, 0.52%)</title><rect x="508.8" y="693" width="6.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="511.76" y="703.5" ></text>
</g>
<g >
<title>MemoryTracker::allocImpl (10,101,010 samples, 0.52%)</title><rect x="636.5" y="677" width="6.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="639.49" y="687.5" ></text>
</g>
<g >
<title>te_next_event_compute (10,101,010 samples, 0.52%)</title><rect x="904.1" y="293" width="6.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="907.12" y="303.5" ></text>
</g>
</g>
</svg>
